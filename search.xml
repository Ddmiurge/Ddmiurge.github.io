<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2-SAT问题</title>
    <url>/2021/09/05/2-SAT%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id="2-SAT问题"><a href="#2-SAT问题" class="headerlink" title="2-SAT问题"></a>2-SAT问题</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a><font color=darkmagenta><strong>描述</strong></font></h2><p><strong>有n个组，第i个组里有两个节点$A_i, A_i’$ 。需要从每个组中选出一个。而某些点不可以同时选出（称之为不相容）。任务是保证选出的n个点都能两两相容。这类型的问题我们称之为2-SAT问题</strong></p>
<h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a><font color=darkmagenta><strong>问题引入</strong></font></h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a><font color=#1453ad><em>Question</em></font></h3><blockquote>
<p>某国有N个党派，每个党派里面有且只有两个代表（编号连续），要求从中选一个代表出来组成和平委员会，且如果两个代表不和，则他们不能同时属于委员会</p>
</blockquote>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><font color=#1453ad><em>Sample Input</em></font></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 2</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><font color=#1453ad><em>Sample Output</em></font></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 </span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color=#1453ad><em>Analysis</em></font></h3><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a><font color=c62b26><em>理解</em></font></h4><p>可以通过图论知识来解决，如果选1,则不能选4,只能选3,而如果选4，则只能选2，所以我们根据这个来建立有向边。</p>
<p>$Conclusion$:若所有$i_1,i_2$都不在同一个强分支，则有解。</p>
<p>对于判定强分支有以下的方法</p>
<ul>
<li>$Kusarajo$,$Tarjan$</li>
<li>染色法</li>
</ul>
<p>这里选择使用染色法</p>
<h4 id="染色法"><a href="#染色法" class="headerlink" title="染色法"></a><font color=c62b26><em>染色法</em></font></h4><p>从每一个组别开始去$dfs$,将要选择的点依次标记出来，并把其相关的必选点也同样染色，如果出现了冲突，则清除染色方案，重新染色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//color是标记颜色的，other记录同一组中另外一个元素是多少</span></span><br><span class="line"><span class="comment">//stk是手动的栈，这里采用链式前向星存图</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(color[u])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(color[other[u]])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	color[u]=<span class="literal">true</span>;</span><br><span class="line">	stk[++top]=u;<span class="comment">//记录 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">DFS</span>(to[i]))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twoSAT</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(color,<span class="literal">false</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(color));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(color[<span class="number">2</span>*i<span class="number">-1</span>]||color[<span class="number">2</span>*i])<span class="keyword">continue</span>;</span><br><span class="line">		<span class="comment">//已经染过了色 </span></span><br><span class="line">		top=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">DFS</span>(<span class="number">2</span>*i<span class="number">-1</span>))&#123;</span><br><span class="line">			<span class="keyword">while</span>(top)color[stk[top]]=<span class="literal">false</span>,top--;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="built_in">DFS</span>(<span class="number">2</span>*i))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里来说一下这一段代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">DFS</span>(to[i]))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>注意这里不可以写成</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">DFS</span>(to[i]);</span><br></pre></td></tr></table></figure>

<p>因为这一点染色是否成功要看与之相关的所有的点的染色是否成功，而如果有相关一个点失败了，那么就是失败了，要回去重新$dfs$</p>
<h3 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a><font color=1453ad><em>Codes</em></font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 8005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 20005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> other[maxn*<span class="number">2</span>],ans[maxn],N,M,tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> head[maxn],to[maxm],nxt[maxm];</span><br><span class="line"><span class="keyword">bool</span> color[maxn];<span class="keyword">int</span> stk[maxn],top=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;<span class="keyword">int</span> sign=<span class="number">1</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;res=res*<span class="number">10</span>+c<span class="number">-48</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> res*sign;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> K)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*K;i++)</span><br><span class="line">		other[i]=(i&amp;<span class="number">1</span>)?i+<span class="number">1</span>:i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	to[++tot]=y;</span><br><span class="line">	nxt[tot]=head[x];</span><br><span class="line">	head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twoSAT</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	N=<span class="built_in">read</span>();M=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">init</span>(N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> a=<span class="built_in">read</span>(),b=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">addedge</span>(a,other[b]);</span><br><span class="line">		<span class="built_in">addedge</span>(b,other[a]);</span><br><span class="line">		<span class="comment">//a,b之间是相互冲突的，如果a选了的话，那么就</span></span><br><span class="line">		<span class="comment">//必须要选b所在组别的另外一个，如果是b选了同理 </span></span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">twoSAT</span>())&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*N;i++)<span class="keyword">if</span>(color[i])<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(color[u])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(color[other[u]])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	color[u]=<span class="literal">true</span>;</span><br><span class="line">	stk[++top]=u;<span class="comment">//记录 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">DFS</span>(to[i]))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twoSAT</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(color,<span class="literal">false</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(color));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(color[<span class="number">2</span>&lt;&lt;i<span class="number">-1</span>]||color[<span class="number">2</span>*i])<span class="keyword">continue</span>;</span><br><span class="line">		<span class="comment">//已经染过了色 </span></span><br><span class="line">		top=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">DFS</span>(<span class="number">2</span>*i<span class="number">-1</span>))&#123;</span><br><span class="line">			<span class="keyword">while</span>(top)color[stk[top]]=<span class="literal">false</span>,top--;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="built_in">DFS</span>(<span class="number">2</span>*i))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><font color= darkMagenta><strong>例题</strong></font></h2><h3 id="洛谷P4782"><a href="#洛谷P4782" class="headerlink" title="洛谷P4782"></a><font color=1453ad><em>洛谷P4782</em></font></h3><p>链接：<a href="https://www.luogu.org/problemnew/show/P4782">洛谷P4782</a></p>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a><font color=c62b26><em>Analysis</em></font></h4><p>就和它自己说的一样，这是一道模板题，这里选择把真和假的两种状态作为所说的选择。所以就选择用$i$表示这一个点要选，$i+N$来表示这一个点不选</p>
<h4 id="Codes-1"><a href="#Codes-1" class="headerlink" title="Codes"></a><font color=c62b26><em>Codes</em></font></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> color[maxn&lt;&lt;<span class="number">1</span>],N,M,other[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> stk[maxn&lt;&lt;<span class="number">1</span>],top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> head[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],nxt[maxn&lt;&lt;<span class="number">1</span>],tot=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//i表示 这一个节点真,i+N表示假 </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>,sign=<span class="number">1</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;res=res*<span class="number">10</span>+c<span class="number">-48</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> res*sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> K)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*K;i++)</span><br><span class="line">		other[i]=(i&lt;=K)?(i+K):(i-K);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	to[++tot]=y;nxt[tot]=head[x];head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twoSAT</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	N=<span class="built_in">read</span>();M=<span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">init</span>(N);</span><br><span class="line">	<span class="keyword">int</span> a,b,c,d;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">		a=<span class="built_in">read</span>();b=<span class="built_in">read</span>();</span><br><span class="line">		c=<span class="built_in">read</span>();d=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">add</span>(a+!b*N,c+d*N);</span><br><span class="line">		<span class="built_in">add</span>(c+!d*N,a+b*N);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">twoSAT</span>())&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;POSSIBLE\n&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,color[i]&lt;color[i+N]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;IMPOSSIBLE&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(color[u])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(color[other[u]])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	color[u]=<span class="literal">true</span>;</span><br><span class="line">	stk[++top]=u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">DFS</span>(to[i]))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twoSAT</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(color,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(color));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(color[i]||color[i+N])<span class="keyword">continue</span>;</span><br><span class="line">		top=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">DFS</span>(i))&#123;</span><br><span class="line">			<span class="keyword">while</span>(top)color[stk[top]]=<span class="literal">false</span>,top--;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="built_in">DFS</span>(i+N))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="洛谷P4171"><a href="#洛谷P4171" class="headerlink" title="洛谷P4171"></a><font color=1453ad><em>洛谷P4171</em></font></h3><p>链接：<a href="https://www.luogu.org/problemnew/show/P4171">洛谷P4171</a></p>
<h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a><font color=c62b26><em>Analysis</em></font></h4><p>这题里面一种材料要么就只能做满洲菜，要么就做汉族菜，因此每一种材料，汉族菜和满洲菜就相当于是对应着$true$和$false$两种状态了，因此就这样来染色法解决问题。这一道题最需要注意的是在于输入时，每一道菜的序号不一定只有一位数。</p>
<h4 id="Codes-2"><a href="#Codes-2" class="headerlink" title="Codes"></a><font color=c62b26><em>Codes</em></font></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> head[maxn&lt;&lt;<span class="number">1</span>],to[maxm&lt;&lt;<span class="number">1</span>],nxt[maxm&lt;&lt;<span class="number">1</span>],tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> stk[maxn&lt;&lt;<span class="number">1</span>],top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> col[maxn&lt;&lt;<span class="number">1</span>],other[maxn&lt;&lt;<span class="number">1</span>],N,M,K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>,sign=<span class="number">1</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;c&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;res=res*<span class="number">10</span>+c<span class="number">-48</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">return</span> res*sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> K)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)</span><br><span class="line">		other[i]=i+N,other[i+N]=i;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	to[++tot]=y;nxt[tot]=head[x];head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twoSAT</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	K=<span class="built_in">read</span>();</span><br><span class="line">	<span class="keyword">while</span>(K--)&#123;</span><br><span class="line">		N=<span class="built_in">read</span>();M=<span class="built_in">read</span>();</span><br><span class="line">		<span class="built_in">init</span>(N);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,rep=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">char</span> kd[<span class="number">5</span>];</span><br><span class="line">			cin&gt;&gt;kd;</span><br><span class="line">			<span class="keyword">while</span>(kd[rep]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;kd[rep]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">				x=x*<span class="number">10</span>+kd[rep]<span class="number">-48</span>;</span><br><span class="line">				rep++;</span><br><span class="line">			&#125; </span><br><span class="line">			<span class="keyword">if</span>(kd[<span class="number">0</span>]==<span class="string">&#x27;m&#x27;</span>)x+=N;</span><br><span class="line">			cin&gt;&gt;kd;</span><br><span class="line">			rep=<span class="number">1</span>;</span><br><span class="line">		 	<span class="keyword">while</span>(kd[rep]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;kd[rep]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">				y=y*<span class="number">10</span>+kd[rep]<span class="number">-48</span>;</span><br><span class="line">				rep++;</span><br><span class="line">			&#125;  </span><br><span class="line">			<span class="keyword">if</span>(kd[<span class="number">0</span>]==<span class="string">&#x27;m&#x27;</span>)y+=N;<span class="comment">//注意这里的输入很重要</span></span><br><span class="line">			<span class="built_in">add</span>(x,other[y]);</span><br><span class="line">			<span class="built_in">add</span>(y,other[x]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">twoSAT</span>())<span class="built_in">printf</span>(<span class="string">&quot;GOOD\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;BAD\n&quot;</span>);</span><br><span class="line">		<span class="built_in">memset</span>(other,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(other));</span><br><span class="line">		<span class="built_in">memset</span>(to,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(to));</span><br><span class="line">		<span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(head));</span><br><span class="line">		<span class="built_in">memset</span>(nxt,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(nxt));</span><br><span class="line">		tot=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(col[u])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span>(col[other[u]])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	col[u]=<span class="number">1</span>;</span><br><span class="line">	stk[++top]=u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">dfs</span>(to[i]))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">twoSAT</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(col,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(col));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(col[i]||col[i+N])<span class="keyword">continue</span>;</span><br><span class="line">		top=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">dfs</span>(i))&#123;</span><br><span class="line">			<span class="keyword">while</span>(top)col[stk[top]]=<span class="number">0</span>,top--;</span><br><span class="line">			<span class="keyword">if</span>(!<span class="built_in">dfs</span>(i+N))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>2-SAT</tag>
        <tag>染色法</tag>
      </tags>
  </entry>
  <entry>
    <title>20190710 test</title>
    <url>/2021/09/05/20190710test/</url>
    <content><![CDATA[<h1 id="20190710的test"><a href="#20190710的test" class="headerlink" title="20190710的test"></a>20190710的test</h1><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a><font color=darkmagenta><strong>T1</strong></font></h2><h3 id="Desctription"><a href="#Desctription" class="headerlink" title="Desctription"></a><font color=1453ad><em>Desctription</em></font></h3><blockquote>
<p>传说，数千年前圣帕特里克消灭了哞尔兰所有的蛇。然而，蛇们现在卷土重来了！圣帕特里克节是在每年的3月17日，所以小明要用彻底清除哞尔兰所有的蛇来纪念圣帕特里克。小明装备了一个捕网，用来捕捉N组排成一行的蛇（1≤N≤400）。小明必须按照这些组在这一行中出现的顺序捕捉每一组的所有蛇。每当小明抓完一组蛇之后，她就会将蛇放在笼子里，然后带着空的捕网开始捕捉下一组。</p>
<p>一个大小为s的捕网意味着小明可以抓住任意包含g条的一组蛇，其中g≤s。然而，每当小明用大小为s的捕网抓住了一组g条蛇，就意味着浪费了s−g的空间。小明可以任意设定捕网的初始大小，并且她可以改变K次捕网大小（1≤K&lt;N）。</p>
<p>请告诉小明她捕捉完所有组的蛇之后可以达到的总浪费空间的最小值。</p>
</blockquote>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><blockquote>
<p>输入的第一行包含N和K。第二行包含N个整数$a_1$,…,$a_N$，其中$a_i$（0≤$a_i$≤10^6）为第i组蛇的数量</p>
</blockquote>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><blockquote>
<p>输出一个整数，为小明抓住所有蛇的总浪费空间的最小值。</p>
</blockquote>
<h3 id="Anlysis"><a href="#Anlysis" class="headerlink" title="Anlysis"></a><font color=1453ad><em>Anlysis</em></font></h3><p>这一道题一眼就可已看出来是在考$dp$,那么问题就在于如何来设计方程了,考试的时候我设计了一个三维的状态，接着循环写了四层，然后不负众望，$TLE$了。（而$WYXdalao$轻松$AC$）</p>
<p>然后重新来看，设$f[i][j]$代表第$i$个时候，用了$j$个袋子时最少浪费了多少，我们提前预处理出一个前缀和，用来获取区间内蛇的数量，因为要放下所有的蛇，所以说数量要选择最大那一个来减。</p>
<h3 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a><font color=1453ad><em>Codes</em></font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 405</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,K;</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn],mxn[maxn][maxn]; </span><br><span class="line"><span class="keyword">int</span> sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;K);</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">		sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//边界</span></span><br><span class="line">	K++;<span class="comment">//因为j要减1,所以避免负数 </span></span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="built_in">min</span>(K,i);j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> mxn=a[i];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=i<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--)&#123;</span><br><span class="line">				f[i][j]=<span class="built_in">min</span>(f[i][j],f[k][j<span class="number">-1</span>]+mxn*(i-k)-(sum[i]-sum[k]));</span><br><span class="line">				mxn=<span class="built_in">max</span>(mxn,a[k]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=inf;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=K;i++)&#123;</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,f[N][i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a><font color =darkmagenta><strong>T2</strong></font></h2><h3 id="Desctription-1"><a href="#Desctription-1" class="headerlink" title="Desctription"></a><font color=1453ad><em>Desctription</em></font></h3><blockquote>
<p>小明喜欢养宠物，想要将编号为1…N的N只宠物（N≤7500）分为非空的K组（2≤K≤N），使得任意两只来自不同组的宠物都需要走一定的距离才能相遇。宠物x和宠物y（其中1≤x&lt;y≤N）愿意为了见面走 ($2019201913x$+$2019201949y$) mod $2019201997$英里。给定一个将N只宠物分为K个非空小组的分组方案，令M为任意两头来自不同组的宠物愿意为了见面行走的英里数的最小值。为了测试宠物们相互之间的忠诚度，小明想要将N头宠物以最佳的方式分为K组，使得M尽可能大</p>
</blockquote>
<h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><blockquote>
<p>输入仅有一行，包含N和K，用空格分隔。</p>
</blockquote>
<h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><blockquote>
<p>输出最优的M。</p>
</blockquote>
<h3 id="Anlysis-1"><a href="#Anlysis-1" class="headerlink" title="Anlysis"></a><font color=1453ad><em>Anlysis</em></font></h3><p>考试的时候我没有想到可以来找规律!!!<br>$$<br>(2019201913x+2019201949y)\mod 2019201997\\<br>=(-84x-48y)\mod 2019201997<br>$$<br>所以$y=N $,$x=K-1$时最大</p>
<h3 id="Codes-1"><a href="#Codes-1" class="headerlink" title="Codes"></a><font color=1453ad><em>Codes</em></font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N,K;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;K);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">-84</span>*(K<span class="number">-1</span>)<span class="number">-48</span>*N+<span class="number">2019201997</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a><font color =darkmagenta><strong>T3</strong></font></h2><h3 id="Desctription-2"><a href="#Desctription-2" class="headerlink" title="Desctription"></a><font color=1453ad><em>Desctription</em></font></h3><blockquote>
<p>设T 为一棵有根树，我们做如下的定义：</p>
<p>• 设a和b为T 中的两个不同节点。如果a是b的祖先，那么称“a比b不知道</p>
<p>高明到哪里去了”。</p>
<p>• 设a 和 b 为 T 中的两个不同节点。如果 a 与 b 在树上的距离不超过某个给定</p>
<p>常数x，那么称“a 与b 谈笑风生”。</p>
<p>给定一棵n个节点的有根树T，节点的编号为1 到 n，根节点为1号节点。你需</p>
<p>要回答q 个询问，询问给定两个整数p和k，问有多少个有序三元组(a;b;c)满足：</p>
<ol>
<li><p>a、b和 c为 T 中三个不同的点，且 a为p 号节点；</p>
</li>
<li><p>a和b 都比 c不知道高明到哪里去了；</p>
</li>
<li><p>a和b 谈笑风生。这里谈笑风生中的常数为给定的 k。</p>
</li>
</ol>
</blockquote>
<h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><blockquote>
<p>输入文件的第一行含有两个正整数n和q，分别代表有根树的点数与询问的个数。接下来n – 1行，每行描述一条树上的边。每行含有两个整数u和v，代表在节点u和v之间有一条边。</p>
<p>接下来q行，每行描述一个操作。第i行含有两个整数，分别表示第i个询问的p和k。。</p>
</blockquote>
<h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><blockquote>
<p>输出 q 行，每行对应一个询问，代表询问的答案。</p>
</blockquote>
<h3 id="Anlysis-2"><a href="#Anlysis-2" class="headerlink" title="Anlysis"></a><font color=1453ad><em>Anlysis</em></font></h3><p>这一道题，首先要明白，要分两种情况</p>
<ul>
<li><p>$b$是$a$的祖先，这种情况比较简单，可以根据乘法原理，在$O(1)$内得到答案</p>
</li>
<li><p>$b$是$a$的子孙，这种情况就不好求了，要用主席树来做，选择以深度为下标，$size$作为维护的值进行修改。还要用到$dfs$序，一个节点和他的子树的序号是一个连续的区间，这样来进行查询</p>
</li>
</ul>
<p>考试的时候，当然就是没有做出来了</p>
<h3 id="Codes-2"><a href="#Codes-2" class="headerlink" title="Codes"></a><font color=1453ad><em>Codes</em></font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600300</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int64 long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,Q;</span><br><span class="line"><span class="keyword">int</span> siz[maxn],dep[maxn],fa[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn],to[maxn],nxt[maxn],tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],Root[maxn];</span><br><span class="line"><span class="keyword">int</span> maxdep=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nde</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lch,rch;</span><br><span class="line">    Int64 data;</span><br><span class="line">&#125;sgt[maxn*<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">int</span> sign=<span class="number">1</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+c<span class="number">-48</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    x*=sign; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    to[++tot]=y;</span><br><span class="line">    nxt[tot]=head[x];</span><br><span class="line">    head[x]=tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!siz[v])&#123;</span><br><span class="line">            dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">            maxdep=<span class="built_in">max</span>(dep[v],maxdep);</span><br><span class="line">            fa[v]=u;</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">            siz[u]+=siz[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,Int64 val,<span class="keyword">int</span> pur)</span></span>&#123;</span><br><span class="line">    sgt[++s]=sgt[p];</span><br><span class="line">    p=s;</span><br><span class="line">    sgt[p].data+=val;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;=pur)<span class="built_in">insert</span>(sgt[p].lch,l,mid,val,pur);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">insert</span>(sgt[p].rch,mid+<span class="number">1</span>,r,val,pur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Int64 <span class="title">query</span><span class="params">(<span class="keyword">int</span> ver1,<span class="keyword">int</span> ver2,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==x&amp;&amp;r==y)<span class="keyword">return</span> sgt[ver2].data-sgt[ver1].data;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;=y)<span class="keyword">return</span> <span class="built_in">query</span>(sgt[ver1].lch,sgt[ver2].lch,l,mid,x,y);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;x) <span class="keyword">return</span> <span class="built_in">query</span>(sgt[ver1].rch,sgt[ver2].rch,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(sgt[ver1].lch,sgt[ver2].lch,l,mid,x,mid)+<span class="built_in">query</span>(sgt[ver1].rch,sgt[ver2].rch,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,y);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    dfn[u]=++cnt;</span><br><span class="line">    Root[cnt]=Root[cnt<span class="number">-1</span>];<span class="comment">//insert里面会给这个root赋值的 </span></span><br><span class="line">    <span class="built_in">insert</span>(Root[cnt],<span class="number">1</span>,maxdep,(Int64)siz[u]<span class="number">-1</span>,dep[u]);</span><br><span class="line">    <span class="comment">//因为是以dep作为下标来的，所以是1-maxdep</span></span><br><span class="line">    <span class="comment">//然后每一个深度相同的插入可以当作对这个的修改。 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(v!=fa[u])<span class="built_in">dfs_</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;talk.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;talk.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">read</span>(N);<span class="built_in">read</span>(Q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">read</span>(x);<span class="built_in">read</span>(y);</span><br><span class="line">        <span class="built_in">add</span>(x,y);<span class="built_in">add</span>(y,x);</span><br><span class="line">    &#125; </span><br><span class="line">    dep[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs_</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(Q--)&#123;</span><br><span class="line">        <span class="keyword">int</span> p,k;</span><br><span class="line">        <span class="built_in">read</span>(p);<span class="built_in">read</span>(k);</span><br><span class="line">        <span class="keyword">if</span>(dep[p]==maxdep)&#123;<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        Int64 ans=<span class="number">0</span>;</span><br><span class="line">        ans+=(<span class="keyword">long</span> <span class="keyword">long</span>)(<span class="built_in">min</span>(k,dep[p]<span class="number">-1</span>))*(siz[p]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> l=dfn[p]<span class="number">-1</span>,r=dfn[p]+siz[p]<span class="number">-1</span>;</span><br><span class="line">        ans+=<span class="built_in">query</span>(Root[l],Root[r],<span class="number">1</span>,maxdep,dep[p]+<span class="number">1</span>,<span class="built_in">min</span>(maxdep,dep[p]+k));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>主席树</tag>
        <tag>dp</tag>
        <tag>dfs序</tag>
      </tags>
  </entry>
  <entry>
    <title>20190712的test</title>
    <url>/2021/09/05/20190712test/</url>
    <content><![CDATA[<h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a><font color=darkmagenta><strong>T1</strong></font></h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a><font color=1453ad><em>Description</em></font></h3><blockquote>
<p>N个布丁摆成一行,进行M次操作.每次将某个颜色的布丁全部变成另一种颜色的,然后再询问当前一共有多少段颜色.例如颜色分别为1,2,2,1的四个布丁一共有3段颜色.</p>
</blockquote>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><blockquote>
<p>第一行给出N,M表示布丁的个数和好友的操作次数. 第二行N个数$A_1$,$A_2$…$A_n$表示第i个布丁的颜色从第三行起有M行,对于每个操作,若第一个数字是1表示要对颜色进行改变，其后的两个整数X,Y表示将所有颜色为X的变为Y，X可能等于Y. 若第一个数字为2表示要进行询问当前有多少段颜色，这时你应该输出一个整数.</p>
</blockquote>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><blockquote>
<p>针对第二类操作即询问，依次输出当前有多少段颜色.</p>
</blockquote>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><font color=1453ad><em>Sample Input</em></font></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 3</span><br><span class="line">1 2 2 1</span><br><span class="line">2</span><br><span class="line">1 2 1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><font color=1453ad><em>Sample Output</em></font></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color=1453ad><em>Analysis</em></font></h3>]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>树状数组</tag>
        <tag>树</tag>
        <tag>fhq_treap</tag>
      </tags>
  </entry>
  <entry>
    <title>20190709 test</title>
    <url>/2021/09/05/20190709/</url>
    <content><![CDATA[<h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a><font color=darkmagenta><strong>T1</strong></font></h2><h3 id="Desctription"><a href="#Desctription" class="headerlink" title="Desctription"></a><font color=1453ad><em>Desctription</em></font></h3><blockquote>
<p>一队勇士正在向你进攻，每名勇士都有一个战斗值$a_i$。但是这队勇士却有一个致命弱点，如果存在$i$&lt;$j$&lt;$k$使得$a_i$&gt;$a_j$&gt;$a_k$，则会影响他们整体的战斗力。我们将这样的一组(i,j,k)称为这队勇士的一个弱点。请求出这队勇士的弱点数目。</p>
</blockquote>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><blockquote>
<p>输入文件：$weakness.in$</p>
<p>输入的第一行是一个整数n，表示勇士的数目。</p>
<p>接下来一行包括n个整数，表示每个勇士的战斗值$a_i$</p>
</blockquote>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><blockquote>
<p>输入文件：$weakness.out$</p>
<p>输出为一行，包含一个整数。表示这队勇士的弱点数目。</p>
</blockquote>
<h3 id="Anlysis"><a href="#Anlysis" class="headerlink" title="Anlysis"></a><font color=1453ad><em>Anlysis</em></font></h3><p>这一道题很明显的就是一个逆序对数的题目，求每一个数和前面的数可以组成多少逆序对数，和后面可以组成多少逆序对数，然后乘起来，用树状数组来进行计算就可以了。</p>
<h3 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a><font color=1453ad><em>Codes</em></font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-x) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,a[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> dat[maxn+<span class="number">5</span>],dat2[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> par[maxn+<span class="number">5</span>],par2[maxn+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> limnum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span>  <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>;<span class="keyword">int</span> sign=<span class="number">1</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+c<span class="number">-48</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	x*=sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(x&lt;=limnum)&#123;</span><br><span class="line">		d[x]++;</span><br><span class="line">		x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		res+=d[x];</span><br><span class="line">		x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;weakness.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;weakness.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="built_in">read</span>(N);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="built_in">read</span>(a[i]);</span><br><span class="line">		<span class="keyword">if</span>(a[i]&gt;limnum)limnum=a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="built_in">upd</span>(a[i],dat);</span><br><span class="line">		par[i]=<span class="built_in">sum</span>(limnum,dat)-<span class="built_in">sum</span>(a[i],dat);</span><br><span class="line">		<span class="built_in">upd</span>(a[N-i+<span class="number">1</span>],dat2);</span><br><span class="line">		par2[N-i+<span class="number">1</span>]=<span class="built_in">sum</span>(a[N-i+<span class="number">1</span>]<span class="number">-1</span>,dat2);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		ans+=(par[i]*par2[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>树</tag>
        <tag>概率期望</tag>
      </tags>
  </entry>
  <entry>
    <title>20191022考试总结</title>
    <url>/2021/09/05/20191022%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="Xorarray"><a href="#Xorarray" class="headerlink" title="Xorarray"></a><font color=darkmagenta><em>Xorarray</em></font></h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a><font color=1453ad><em>Description</em></font></h3><blockquote>
<p>xor——异或，和 and 与or 一样，是一种重要的逻辑运算，他的运算规律是 0 xor 0 = 0，1 xor 1 = 0，1 xor 0 = 1，0 xor 1 = 1</p>
<p>两个整数之间的异或是将两个整数转化成二进制，对他们的每一位分别进行 xor 操作，例：6(110) xor 13(1101) = 11(1011)</p>
<p>现在我们要介绍一种新的操作——数组异或，将两个相同大小（假设都为n）的数组A、B异或成一个新数组C，则新数组必满足:<br>$$<br>C[k]=\sum_i^{k}\sum_j^{k}\ A[i]\bigoplus  B[i]<br>$$</p>
<p>现在给你数组大小n，和两个数组A,B</p>
<p>求他们的异或数组C</p>
<p>由于最终答案可能过大，你需要对C的每个元素对$1e9+7$取模</p>
</blockquote>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><blockquote>
<p>一共3行。</p>
<p>第一行一个正整数N。</p>
<p>接下来两行每行N个正整数，表示数组A、B。</p>
</blockquote>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><blockquote>
<p>一共1行，N个正整数，表示数组C。</p>
</blockquote>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color=1453ad><em>Analysis</em></font></h3><p>我，我mod少打了一个0，直接就爆0了,$qwq$,太惨了。</p>
<p>这一道题目的核心在于，因为对于每一个$C[k]$的值，考虑将所有的$A[i]$,$B[i]$中每一位中的0的个数,1的个数计算出来，每一位A的0的个数和B的1的个数，B的0的个数和A的1的个数相乘，然后加起来，这样就可以得到这一位上面异或所产生的总的1的个数是多少，而这里面的1是二进制下面的，因此需要还原回去乘以对应的幂次</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">1000000007</span>;</span><br><span class="line">LL A[maxn],B[maxn],C[maxn],N;</span><br><span class="line">LL cntA[<span class="number">40</span>][<span class="number">2</span>],cntB[<span class="number">40</span>][<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> t&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(t &amp;x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;xorarray.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;xorarray.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="built_in">read</span>(N);</span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> t&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(t &amp;x)</span></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>;<span class="keyword">int</span> sign=<span class="number">1</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+c<span class="number">-48</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	x*=sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="built_in">read</span>(A[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="built_in">read</span>(B[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		LL now;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">31</span>;j++)&#123;</span><br><span class="line">			cntA[j][(A[i]&gt;&gt;j)&amp;<span class="number">1</span>]++;</span><br><span class="line">			cntB[j][(B[i]&gt;&gt;j)&amp;<span class="number">1</span>]++;</span><br><span class="line">			now=(cntA[j][<span class="number">0</span>]*cntB[j][<span class="number">1</span>]+cntB[j][<span class="number">0</span>]*cntA[j][<span class="number">1</span>])%mod;</span><br><span class="line">			(now&lt;&lt;=j)%=mod;</span><br><span class="line">			(C[i]+=now)%=mod;</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;C[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Road"><a href="#Road" class="headerlink" title="Road"></a><font color=darkmagenta><em>Road</em></font></h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a><font color=1453ad><em>Description</em></font></h3><blockquote>
<p>给出一个 <em>N</em> 个点的有向图，每个点的出度恰好为一。</p>
<p>现在希望给这 <em>N</em> 条边重定向，求图中不出现环的方案数（对$1e9$+7取模）。</p>
</blockquote>
<h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><blockquote>
<p>第一行一个正整数 <em>N</em>。</p>
<p>第二行 <em>N</em> 个正整数 $X_i$，表示存在一条有向边 <em>i</em> 指向 $X_i$。</p>
</blockquote>
<h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><blockquote>
<p>一行，一个整数 <em>Ans</em>，表示定向后不出现环的方案数。</p>
</blockquote>
<h3 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a><font color=1453ad><em>Analysis</em></font></h3><p>这一道题目，思路其实很简单，首先这个原图里面肯定是存在环的，如果说要让这个环不再是环的话，那么只需要让环里面任意条边反向就可以了，但是不可以全部反向或不反向。考虑强连通分量缩点来得到每一个环的点的个数是多少(以下记作size)</p>
<ul>
<li>若是缩点之后，$size&gt;1$,那么让这里面的边反过来的方案数就有<br>$$<br>\C_{size}^1+\C_{size}^2+……+\C_{size}^{size-2}+\C_{size}^{size-1}<br>$$</li>
</ul>
<p>根据所学过的排列组合的知识，可以化简为$2^{size}-2$</p>
<ul>
<li>若是缩点之后，$size=1$,那么这一条边反不反向都是可以的，直接乘个2就可以了</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=(<span class="keyword">int</span>)<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> N,tot=<span class="number">0</span>,dfst=<span class="number">0</span>,CntBlocks=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> head[maxn],to[maxn&lt;&lt;<span class="number">1</span>],nxt[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> low[maxn],dfn[maxn],Belong[maxn];</span><br><span class="line"><span class="keyword">int</span> stk[maxn],Blocksize[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;to[++tot]=y,nxt[tot]=head[x],head[x]=tot;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>; </span><br><span class="line"><span class="function">LL <span class="title">qkpow</span><span class="params">(LL p)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;road.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;road.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);<span class="keyword">int</span> t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t),<span class="built_in">add</span>(i,t);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i);</span><br><span class="line">	LL ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=CntBlocks;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(Blocksize[i]==<span class="number">1</span>)&#123;</span><br><span class="line">			(ans*=<span class="number">2</span>)%=mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			LL t=<span class="built_in">qkpow</span>(Blocksize[i]);</span><br><span class="line">			ans=(ans*t)%mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">	stk[++stk[<span class="number">0</span>]]=u;</span><br><span class="line">	low[u]=dfn[u]=++dfst;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">		<span class="keyword">int</span> v=to[i];</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line">			<span class="built_in">tarjan</span>(v);</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(!Belong[v])</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line">		CntBlocks++;</span><br><span class="line">		<span class="keyword">while</span>(stk[stk[<span class="number">0</span>]]!=u)&#123;</span><br><span class="line">			Belong[stk[stk[<span class="number">0</span>]]]=CntBlocks;</span><br><span class="line">			Blocksize[CntBlocks]++;</span><br><span class="line">			stk[<span class="number">0</span>]--;</span><br><span class="line">		&#125;</span><br><span class="line">		Belong[u]=CntBlocks;</span><br><span class="line">		Blocksize[CntBlocks]++;</span><br><span class="line">		stk[<span class="number">0</span>]--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qkpow</span><span class="params">(LL p)</span></span>&#123;</span><br><span class="line">	LL res=<span class="number">1</span>;</span><br><span class="line">	LL now=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p&amp;<span class="number">1</span>)res=(res*now)%mod;</span><br><span class="line">		(now*=now)%=mod;</span><br><span class="line">		p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res<span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Detective"><a href="#Detective" class="headerlink" title="Detective"></a><font color=darkmagenta><em>Detective</em></font></h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a><font color=1453ad><em>Description</em></font></h3><blockquote>
<p>小W最近沉迷一个侦探游戏，在这个游戏中会不断出现命案，而小W作为主角，需要不断地收集各种关键证据，只有当所有的关键证据都被找到，你才能驳倒所有人错误的判断，找出真正的凶手。</p>
<p>一共有N个关键证据以及M条信息，每条信息如下所示 : 如果你已经掌握了证据 i ，那么你可以通过 k 个时间的搜索和推理得到证据 j ，同样的，如果你掌握了证据 j 你也可以通过 k 个时间得到证据 j 。</p>
<p>游戏开始时玩家通过初步观察现场已经得到了证据1，于此同时，每个玩家在游戏开始阶段时都能获得一个特殊技能来加快游戏进度，增加趣味性。小 W 选了一个他以前从来没用过的技能 : 好运。这是一个被动技能，系统会在游戏开始时选定一对证据（a，b）当小W发现其中一个证据的时候，他会很好运地立即获得另外一个证据（不计入时间）。</p>
<p>但是这个技能是完全随机的，小W完全不知道进入游戏后系统会挑选哪一对证据，他希望你能帮助他算出他花在本轮游戏上的时间的期望值，这样他心里能有点B数。</p>
<p>提供的信息保证 : i不会等于j，每个k值都互不相同，N个证据都能被得到。</p>
</blockquote>
<h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><blockquote>
<p>一共M+1行。</p>
<p>第一行两个正整数N,M，表示证据数量和信息数量。</p>
<p>接下来M行，每行三个数字i,j,k表示一个信息</p>
</blockquote>
<h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><blockquote>
<p>一共1行，1个整数（期望值是实数，但这里请直接保留0位小数输出）</p>
</blockquote>
<h3 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a><font color=1453ad><em>Analysis</em></font></h3><p>​    如果说没有这个讨厌的被动技能的话，那么也就不会有这该死的期望了，那么也就是一个最小生成树就好了。</p>
<p>​    但这是不可能的，这辈子都不可能的。</p>
<p>​    首先来想一想，找到所有的证据之后，形成的那一张图，应当是一棵树，没有错吧，这一个神奇的被动技能，能都把其中一条边替换为0，这样的话通过枚举点对，我们就可以很轻松的得到错误的解法了</p>
<p>​    换一个思路，考虑在$Kruscal$制造这一棵树的时候来进行统计，每当我们选择一条边的时候，那么它所连接的两棵子树内所有的边，是不是都比它小，那么此时替换它为0的话，无疑就会使最划算的，也就是符合要求的。此时替换会减少的值为这一条边的权值乘以旁边的两棵子树的大小再来除以选择它的概率。那么答案就等于<br>$$<br>Ans=W-\sum\frac{2<em>d</em>size(u)<em>size(v)}{N</em>(N-1)}<br>$$<br>其中W是最小生成树的值，d是选择的边的权值，size(u),size(v)是选择的时候两棵子树的大小</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">int</span> fa[maxn],size[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> u;</span><br><span class="line">	<span class="keyword">int</span> v;</span><br><span class="line">	<span class="keyword">int</span> d;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> edge &amp;cmp)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> d&lt;cmp.d; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;E[maxn*<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruscal</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;detective.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;detective.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); </span><br><span class="line">	cin&gt;&gt;N&gt;&gt;M; </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> u,v,d;cin&gt;&gt;u&gt;&gt;v&gt;&gt;d;</span><br><span class="line">		E[i]=(edge)&#123;u,v,d&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(E+<span class="number">1</span>,E+<span class="number">1</span>+M);</span><br><span class="line">	<span class="built_in">Kruscal</span>();</span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x!=fa[x])<span class="keyword">return</span> fa[x]=<span class="built_in">Seek</span>(fa[x]);</span><br><span class="line">	<span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	fa[x]=y;</span><br><span class="line">	size[y]=size[y]+size[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruscal</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)fa[i]=i,size[i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	db off=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> u=E[i].u;</span><br><span class="line">		<span class="keyword">int</span> v=E[i].v;</span><br><span class="line">		<span class="keyword">int</span> d=E[i].d;</span><br><span class="line">		<span class="keyword">int</span> fu=<span class="built_in">Seek</span>(u);</span><br><span class="line">		<span class="keyword">int</span> fv=<span class="built_in">Seek</span>(v);</span><br><span class="line">		<span class="keyword">if</span>(fu!=fv)&#123;</span><br><span class="line">			cnt++;</span><br><span class="line">			ans+=d;</span><br><span class="line">			off+=((<span class="number">2</span>*(<span class="keyword">double</span>)d*(<span class="keyword">double</span>)size[fu]*(<span class="keyword">double</span>)size[fv])/(<span class="keyword">double</span>)(N*(N<span class="number">-1</span>)+<span class="number">0.0</span>));</span><br><span class="line">			<span class="built_in">Union</span>(fu,fv); </span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">if</span>(cnt==N<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,ans-off);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>Tarjan</tag>
        <tag>期望</tag>
      </tags>
  </entry>
  <entry>
    <title>20190920周记</title>
    <url>/2021/09/05/20190920/</url>
    <content><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><font color=darkmagenta>Summary</font></h2><p>​    我也不知道应该说一些什么，感觉就是很普通的一周。上周父亲带着我去买了一块表，感觉还不错。这周每天晚上都是延长了晚自习，一直到十点半的时候才从学校回来。这么一周下来感觉还是有一些累，回来锻炼，洗漱之后都是已经很晚了，然后早上再起来也是感觉有一些疲倦。至于各个学科，数学到时还不错,题目坐下来到时勉强算得上是顺手，物理化学也是还好。至于地理，感觉有的时候看到五三这些还是觉得不明所以，唉。</p>
<p>​    英语倒是感觉背单词的效率不是很高，没有找出足够多的时间来背，感觉一周七个$list$好像是成为了空谈。不过我还是在尽力，语文课，听33说话倒还是有一些意思。</p>
<p>​    自己闲暇的时光尝试去看了看$python$，感觉基本的操作倒也是不难，甚至尝试用$python$ AC了两道题目。虽然说$python$功能真的是很强大，但是确实是慢了一些，$C++$15 ms就可以A掉的题目，$python$要67 ms。</p>
<p>​    好简短的总结啊，唉，不想说了</p>
]]></content>
      <categories>
        <category>周记</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>20190723的test</title>
    <url>/2021/09/05/20190723/</url>
    <content><![CDATA[<h2 id="Traffic"><a href="#Traffic" class="headerlink" title="Traffic"></a><font color=darkmagenta><em>Traffic</em></font></h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a><font color=1453ad><em>Description</em></font></h3><p>​    工人打算用一组传感器测量公路上的车流量，每个传感器被用来测量一小段路面上的车流量的数值。不幸的是，某一天装有传感器的盒子进了水，之后它们就不能精确的测量了。现在每个传感器只能输出一个可能结果的范围。例如，一个传感器可能会给出范围[7,13]，表示在这段路面上的车流量不小于7，并且不大于13。</p>
<p>​    高速路要测量的这一段长N英里，当然高速路都是单向的，从第1英里驶向第N英里。工人想要安装N个传感器——每个监测1英里长的路段。在其中某些路段上，有能够使得车辆进入高速公路的上匝道，在这样的路段上，工人会将传感器装在上匝道上，测量流入的车流量。在某些路段上有能够使得车辆离开高速公路的下匝道，在这样的路段上，工人会将传感器装在下匝道上。每一个路段包含至多一个匝道。如果在公路的一个路段上没有上匝道或下匝道，工人就将传感器装在高速公路的主路上。</p>
<p>​    给定N个传感器的读数，请求出在高速公路第1英里之前和第N英里之后车流量的最为准确的可能范围。这些范围应当与所有N个传感器的读数相一致。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><p>​    输入的第一行包含N（1≤N≤100）。余下N行每行按从第1英里至第N英里的顺序描述一段1英里长的路段。每行包含一个字符串，为”on”（如果这段路上有一个上匝道），”off”（如果这段路上有一个下匝道），或者是”none”（如果这段路上没有匝道），然后是两个范围为0…1000的整数，表示这段路上的传感器的读数所给出的下界、上界。至少一个高速公路路段的描述会是”none”。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><p>​    输出的第一行包含两个整数，为第1英里之前的车流量的最准确的可能范围。第二行包含两个整数，为第N英里之后的车流量的最准确的可能范围。输入保证存在符合要求的解。</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color=1453ad><em>Analysis</em></font></h3><p>前后扫一遍即可</p>
<h3 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a><font color=1453ad><em>Codes</em></font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正反各自扫一遍?过程中求交集和加减?  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y)?x:y</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y)?x:y</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">int</span> L,R;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;traffic.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;traffic.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">	<span class="keyword">int</span> fs=<span class="number">0</span>,fe=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,d[i].op,&amp;d[i].L,&amp;d[i].R);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> FL=-inf,FR=inf,EL=-inf,ER=inf;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(d[i].op[<span class="number">0</span>]==<span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">			FL=<span class="built_in">max</span>(FL,d[i].L);</span><br><span class="line">			FR=<span class="built_in">min</span>(FR,d[i].R);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(d[i].op[<span class="number">0</span>]==<span class="string">&#x27;o&#x27;</span>&amp;&amp;d[i].op[<span class="number">1</span>]==<span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">			FL-=<span class="built_in">max</span>(d[i].R,d[i].L);</span><br><span class="line">			FR-=<span class="built_in">min</span>(d[i].L,d[i].R);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(d[i].op[<span class="number">1</span>]==<span class="string">&#x27;f&#x27;</span>)&#123;</span><br><span class="line">			FL+=<span class="built_in">min</span>(d[i].L,d[i].R);</span><br><span class="line">			FR+=<span class="built_in">max</span>(d[i].R,d[i].L);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,<span class="built_in">max</span>(FL,<span class="number">0</span>),FR);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=fe;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(d[i].op[<span class="number">0</span>]==<span class="string">&#x27;o&#x27;</span>&amp;&amp;d[i].op[<span class="number">1</span>]==<span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">			EL+=<span class="built_in">min</span>(d[i].L,d[i].R);</span><br><span class="line">			ER+=<span class="built_in">max</span>(d[i].L,d[i].R);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(d[i].op[<span class="number">1</span>]==<span class="string">&#x27;f&#x27;</span>)&#123;</span><br><span class="line">			EL-=<span class="built_in">max</span>(d[i].R,d[i].L);</span><br><span class="line">			ER-=<span class="built_in">min</span>(d[i].L,d[i].R);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(d[i].op[<span class="number">0</span>]==<span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">			EL=<span class="built_in">max</span>(EL,d[i].L);</span><br><span class="line">			ER=<span class="built_in">min</span>(ER,d[i].R);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,<span class="built_in">max</span>(EL,<span class="number">0</span>),ER);</span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Paint"><a href="#Paint" class="headerlink" title="Paint"></a><font color=darkmagenta><em>Paint</em></font></h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a><font color =1453ad><em>Description</em></font></h3><p>​    $Todobe$要把她的寝室弄得漂漂酿酿，所以她管$Yashem66$要了一些墙纸。</p>
<p>​    $Todobe$有一面墙，可分为n块，$Yashem66$提供的所有墙纸都是统一规格的，均只可覆盖连续k块完整的墙面，但是有m种不同的颜色的墙纸，每种颜色的墙纸都有无限张。$Todobe$要用这些墙纸把墙贴满，墙纸不可以裁剪，墙纸与墙纸之间可以有重叠部分。当墙纸重叠时，只能看到最外层的墙纸颜色。</p>
<p>​    $Todobe$想知道她以不同的方式贴墙纸，共能贴出多少种不同配色方案的墙面，两种方案不同当且仅当两种方案中至少有一块墙面的颜色不同。</p>
<h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><p>输入一行3个整数n,m,k。</p>
<h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><p>输出一行一个整数代表方案数量，答案取模$1e9+7$</p>
<h3 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a><font color=1453ad><em>Analysis</em></font></h3><p>这一道题目很不好想，首先，对于$N$个块，$M$个颜色，一共有$M^N$种方案，然后通过模拟可以发现，这里面肯定有一个连续K个块是同一个颜色的，这就好了，联想到核电站问题的做法就可以了.但是因为数据范围很大，所以要用到矩阵乘法来优化，注意快速幂要开$long;long$否则会出错</p>
<h3 id="Codes-1"><a href="#Codes-1" class="headerlink" title="Codes"></a><font color=1453ad><em>Codes</em></font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll mod=(ll)<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> N,M,K;</span><br><span class="line">ll A[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qkpow</span><span class="params">(ll d,ll p)</span></span>&#123;</span><br><span class="line">	ll res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p&amp;<span class="number">1</span>)res=(res*d)%mod;</span><br><span class="line">		d=(d*d)%mod;</span><br><span class="line">		p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a,ll (*b)[<span class="number">105</span>])</span></span>&#123;</span><br><span class="line">	ll tmp[<span class="number">105</span>];</span><br><span class="line">	<span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(tmp));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K<span class="number">-1</span>;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K<span class="number">-1</span>;j++)</span><br><span class="line">			(tmp[i]+=(a[j]*b[j][i]))%=mod;</span><br><span class="line">	<span class="built_in">memcpy</span>(a,tmp,<span class="built_in"><span class="keyword">sizeof</span></span>(tmp));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mulslf</span><span class="params">(ll (*a)[<span class="number">105</span>])</span></span>&#123;</span><br><span class="line">	ll tmp[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line">	<span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(tmp));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=K<span class="number">-1</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=K<span class="number">-1</span>;k++)&#123;</span><br><span class="line">				(tmp[i][j]+=a[i][k]*a[k][j])%=mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memcpy</span>(a,tmp,<span class="built_in"><span class="keyword">sizeof</span></span>(tmp));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">mtrqkpow</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	ll f[<span class="number">105</span>];</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">	f[K<span class="number">-1</span>]=M;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=K<span class="number">-2</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		f[i]=(f[i+<span class="number">1</span>]*M)%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p&amp;<span class="number">1</span>)<span class="built_in">mul</span>(f,A);</span><br><span class="line">		<span class="built_in">mulslf</span>(A);</span><br><span class="line">		p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> f[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;paint.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;paint.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;N,&amp;M,&amp;K);</span><br><span class="line">	ll res1=<span class="built_in">qkpow</span>(M,N);<span class="comment">//总的可能性 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		 A[i][<span class="number">1</span>]=M<span class="number">-1</span>;</span><br><span class="line">		 A[i][i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(((res1-<span class="built_in">mtrqkpow</span>(N-K+<span class="number">1</span>))%mod)+mod)%mod); </span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Airline"><a href="#Airline" class="headerlink" title="Airline"></a><font color=darkmagenta><em>Airline</em></font></h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a><font color =1453ad><em>Description</em></font></h3><p>​    $Todobe$Farmer John正在一个新的销售区域对他的牛奶销售方案进行调查。他想把牛奶送到T个城镇 (1 &lt;= T &lt;= 25,000)，编号为1到T。这些城镇之间通过R条道路 (1 &lt;= R &lt;= 50,000，编号为1到R) 和P条航线 (1 &lt;= P &lt;= 50,000，编号为1到P) 连接。每条道路i或者航线i连接城镇$A_i$ (1 &lt;= $A_i$ &lt;= T)到$B_i$ (1 &lt;= $B_i$ &lt;= T)，花费为$C_i$。对于道路，0 &lt;= $C_i$ &lt;= 10,000；然而航线的花费很神奇，花费$C_i$可能是负数(-10,000 &lt;= $C_i$ &lt;= 10,000)。道路是双向的，可以从$A_i$到$B_i$，也可以从$B_i$到$A_i$，花费都是$C_i$。然而航线与之不同，只可以从$A_i$到$B_i$。事实上，由于最近恐怖主义太嚣张，为了社会和谐，出台了一些政策保证：如果有一条航线可以从$A_i$到$B_i$，那么保证不可能通过一些道路和航线从$B_i$回到$A_i$。由于$FJ$的奶牛世界公认十分给力，他需要运送奶牛到每一个城镇。他想找到从发送中心城镇S(1 &lt;= S &lt;= T) 把奶牛送到每个城镇的最便宜的方案，或者知道这是不可能的。</p>
<h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a><font color=1453ad><em>Input</em></font></h3><p>第1行：四个空格隔开的整数: T, R, P, and S ,第2到R+1行：三个空格隔开的整数（表示一条道路）：$A_i$, $B_i$ 和 $C_i$, 第R+2到R+P+1行：三个空格隔开的整数（表示一条航线）：$A_i$,$ B_i$ 和$ C_i$</p>
<h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><p>第1到T行：从S到达城镇i的最小花费，如果不存在输出”NO PATH”</p>
<h3 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a><font color=1453ad><em>Analysis</em></font></h3><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a><font color=c62b26>题目分析</font></h4><p>你以为这是一道$SPFA$水题？至少我当时是这么以为的，但是这一道题要卡你的$SPFA$所以说直接来就会爆，因此必须要想办法来优化</p>
<h4 id="SLF优化"><a href="#SLF优化" class="headerlink" title="SLF优化"></a><font color=c62b26>SLF优化</font></h4><p>这一个$SLF$优化说起来并不难，它将原来的队列转换成为了双端队列，对于加入的点$v$，如果说$dist[v]&lt;=dist[Q.top()]$,那么就把这个点放在队列的顶部，反之则将这个点放在最后面</p>
<h3 id="Codes-2"><a href="#Codes-2" class="headerlink" title="Codes"></a><font color=1453ad><em>Codes</em></font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 25005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxe 50005 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int64 long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (x&gt;y)?x:y</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (x&lt;y)?x:y</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],to[maxe&lt;&lt;<span class="number">2</span>],nxt[maxe&lt;&lt;<span class="number">2</span>],wel[maxe&lt;&lt;<span class="number">2</span>],tot=<span class="number">0</span>;;</span><br><span class="line">Int64 dis[maxn];<span class="keyword">int</span> N,R,P,S;<span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],dfst=<span class="number">0</span>,stk[maxn],top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> block[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> t&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(t &amp;x)</span></span>&#123;</span><br><span class="line">	x=<span class="number">0</span>;<span class="keyword">int</span> sign=<span class="number">1</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	<span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+c<span class="number">-48</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">	x*=sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">	to[++tot]=y;</span><br><span class="line">	nxt[tot]=head[x];</span><br><span class="line">	head[x]=tot;</span><br><span class="line">	wel[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">	dfn[u]=low[u]=++dfst;</span><br><span class="line">	stk[++top]=u;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">		<span class="keyword">int</span> v=to[i];</span><br><span class="line">		<span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line">			<span class="built_in">tarjan</span>(v);</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(!block[v])&#123;</span><br><span class="line">			low[u]=<span class="built_in">min</span>(dfn[v],low[u]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line">		block[u]=++cnt;</span><br><span class="line">		<span class="keyword">while</span>(stk[top]!=u)&#123;</span><br><span class="line">			block[stk[top]]=cnt;</span><br><span class="line">			top--;</span><br><span class="line">		&#125;</span><br><span class="line">		top--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> R,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">	deque&lt;<span class="keyword">int</span>&gt;D;</span><br><span class="line">	dis[R]=w;</span><br><span class="line">	vis[R]=<span class="literal">true</span>;</span><br><span class="line">	D.<span class="built_in">push_front</span>(R);</span><br><span class="line">	<span class="keyword">while</span>(!D.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="keyword">int</span> u=D.<span class="built_in">front</span>();D.<span class="built_in">pop_front</span>();</span><br><span class="line">		vis[u]=<span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">			<span class="keyword">int</span> v=to[i],w=wel[i];</span><br><span class="line">			<span class="keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">				dis[v]=dis[u]+w;</span><br><span class="line">				<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">					<span class="keyword">if</span>(D.<span class="built_in">size</span>()&amp;&amp;dis[v]&lt;=dis[D.<span class="built_in">front</span>()])D.<span class="built_in">push_front</span>(v);</span><br><span class="line">					<span class="keyword">else</span> D.<span class="built_in">push_back</span>(v);</span><br><span class="line">					vis[v]=<span class="literal">true</span>;</span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;						</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;airline.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;airline.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="built_in">read</span>(N);<span class="built_in">read</span>(R);<span class="built_in">read</span>(P);<span class="built_in">read</span>(S);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=R;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y,z;<span class="built_in">read</span>(x);<span class="built_in">read</span>(y);<span class="built_in">read</span>(z);</span><br><span class="line">		<span class="built_in">add</span>(x,y,z);<span class="built_in">add</span>(y,x,z);</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=P;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y,z;<span class="built_in">read</span>(x);<span class="built_in">read</span>(y);<span class="built_in">read</span>(z);</span><br><span class="line">		<span class="built_in">add</span>(x,y,z);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">tarjan</span>(S);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line">	<span class="built_in">SPFA</span>(S,<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(dis[i]==<span class="number">0x3f3f3f3f3f3f3f3f</span>l)<span class="built_in">printf</span>(<span class="string">&quot;NO PATH\n&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,dis[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>SPFA</tag>
        <tag>SLF优化</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>K-D tree入门</title>
    <url>/2021/09/05/K-D%20tree/</url>
    <content><![CDATA[<h2 id="KNN问题"><a href="#KNN问题" class="headerlink" title="KNN问题"></a><font color=darkmagenta><strong>KNN问题</strong></font></h2><p>​    K-Nearest Neighbor，我也不知道应该说是问题还是算法，也就不要管这个了。我们想象这样一个场景，在一个平面直角坐标系上面，有很多很多个点。现在我们随机地选择一个点，想要知道离他最近的$k$个点是哪些，怎么办。如果使用肉眼观察的话，那么我们是可以大致判断出来有哪些的。可是在很多时候，我们拿到的并不是图像，而是数据，而这些数据要让计算机来处理，怎么办？？</p>
<p>​    对于这一个问题，我们可以用时间复杂度为$\Theta(n^2)$的方法，处理出所有的距离，询问到处理的距离里面来看，但是我们还可以有别的方法。</p>
<h2 id="K-D-tree"><a href="#K-D-tree" class="headerlink" title="K-D tree"></a><font color=darkmagenta><strong>K-D tree</strong></font></h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a><font color=1453ad><strong>概念</strong></font></h3><p>​    K-D tree 是一棵<strong>二叉查找树</strong>,它可以用来维护有多维信息的数据。因为在做题的时候，遇到的一般都是$2$维,所以说下面的例子我就以二维的来看了</p>
<h3 id="建立"><a href="#建立" class="headerlink" title="建立"></a><font color =1453ad><strong>建立</strong></font></h3><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a><font color=green>解释</font></h4><p>​    平常的二叉查找树，建立的时候，在每一个中间节点，会比较值的大小，比他小的就到他的左儿子那边，比他大的就到他的右儿子那边。但是K-D tree 有多维信息，这种情况下应该怎么办？既然他是有K维的信息，那么我们就任意选择其中以为来进行分割就可以了。这就好像是在平面中画了一条线一样，将它们分成了两个部分<br>​    比如下面的这一个，这是一个这个平面上有很多点，我们先选取其中一维进行分割，分成了两块，然后我们换一维继续分割<br><img src="https://i.loli.net/2019/08/24/sHecKXAoxui5qVC.png" alt="k1.png"><br><img src="https://i.loli.net/2019/08/24/mBPb2FaWUGCwK5r.png" alt="k2.png"></p>
<p>​    就这个样子交替分割下去就可以了，听着是不是就像切蛋糕一样？</p>
<p>​    那么怎么来进行分割呢，有下面两种方法：</p>
<ul>
<li>根据深度，轮流来选择一个维度，依据这一个维度来进行划分。在划分的时候将区间内的值依照这一维的大小来进行排序，然后将中位数存下来，然后再递归的处理</li>
<li>我们计算一下每一维的方差，然后选择方差最大的那一维来进行划分。为什么要这样来进行划分，举个例子，如果说是一块方方正正的豆腐，那么不无论选择那一维来切，效果都是很好的。但是呢，如果说是一根细长木条呢？你轮流切未必就有一个好效果。选择计算每一维的方差，选择方差最大的那一维来的话，能够在构建树上起到很好的效果。</li>
</ul>
<h4 id="假-代码"><a href="#假-代码" class="headerlink" title="(假)代码"></a><font color =green>(假)代码</font></h4><p>首先，我们需要一个结构体</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">K_D_Tree</span>&#123;</span></span><br><span class="line">	node d[maxn];</span><br><span class="line">	<span class="keyword">int</span> lc[maxn];</span><br><span class="line">	<span class="keyword">int</span> rc[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,j) d[i].databank[j]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Minp(i,j) d[i].minpos[j]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxp(i,j) d[i].maxpos[j]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​    其中$node$是用来储存信息的结构体，然后来看看第一种方法如何来进行$build$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> deps)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(L&gt;R)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		keyd=deps%maxk;</span><br><span class="line">		<span class="built_in">nth_element</span>(point+L,point+mid,point+R+<span class="number">1</span>);</span><br><span class="line">		d[mid]=point[mid];</span><br><span class="line">		lc[mid]=<span class="built_in">build</span>(L,mid<span class="number">-1</span>,deps+<span class="number">1</span>);</span><br><span class="line">		rc[mid]=<span class="built_in">build</span>(mid+<span class="number">1</span>,R,deps+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">pushup</span>(mid);</span><br><span class="line">		<span class="keyword">return</span> mid;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>​    这里$pushup$这个函数在接下来会讲，所以说先看着。nth_element 这一个函数第一个和第三个参量是左右区间，左闭右开，而中间的这一个则是你要排的值。像是上面代码中的那个例子，在point+mid这个位置，一定就是这个区间的中位数，前面都比它小，后面都比他大，但是前面后面未必就排好了序。</p>
<p>​    第二种方法（假代码）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxk;i++)&#123;</span><br><span class="line">	<span class="keyword">double</span> aver=var[i]=<span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=L;j&lt;=R;j++)</span><br><span class="line">		aver+=<span class="built_in">D</span>(j,i);</span><br><span class="line">		aver/=(R-L+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=L;j&lt;=R;j++)&#123;&#125;</span><br><span class="line">			var[i]+=((<span class="built_in">D</span>(j,i)-aver)*(<span class="built_in">D</span>(j,i)-aver));</span><br><span class="line">		&#125;<span class="comment">//计算方差 </span></span><br><span class="line">		dim[now]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(var[dim[now]]&lt;var[i])dim[now]=i; </span><br><span class="line">		&#125; </span><br><span class="line">		 <span class="built_in">nth_element</span>(……)</span><br><span class="line">		 <span class="comment">//还要记录一下维度,然后和上面一样递归处理就可以了</span></span><br></pre></td></tr></table></figure>



<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a><font color =1453ad>查询</font></h3><h4 id="K-D-tree-的K近邻查询"><a href="#K-D-tree-的K近邻查询" class="headerlink" title="K-D tree 的K近邻查询"></a><font color=green>K-D tree 的K近邻查询</font></h4><p>​    我们之前提到了，要查询离某一个节点第$k$远（当然也可能是第$k$近）的节点的编号，或者是这一个距离。首先，这个第$k$远怎么办，怎么来记录，这个时候就可以想到优先队列了，每一次询问的时候，我们在优先队列里面先$push$ k个值进去，然后呢，查询的时候，遇到符合要求的数值，就把队首$pop$出来，然后再$push$进去，这样就可以保证我们总是维护好了第$k$远或者第$k$近了。</p>
<p>​    接下来来谈一谈如何查询，首先我们遍历到某一个节点，然后计算一下这一个节点和目标节点之间的距离，看看这一个距离是否符合要求，如果符合我们的要求，那么我们就更新一下，接着，以目标节点作为圆心，现在的答案的距离作为半径，然后做一个圆（三维的情况下是一个球，如果更多的话，那么就是超球体了）然后看看这一个圆有没有和我们遍历到的节点划分的左右平面(多维的话，按照网上的叫法就是超平面了)相交。如何判断？我们计算一下目标节点到左右平面的最小距离(<strong>注意，这里是在说第k近的情况</strong>)，如果说这个距离要比我们现在所说的这一个答案要小的话，那么就到这个平面里面去搜索，而如果是<strong>第k远</strong>的的情况下面，就是计算最远的距离是多少，然后再来判断了</p>
<p>​    可是现在还有一个问题，怎么来确定离左右平面的距离？这个时候就可以记录下每一个节点的子树下面，某一维最大最小的值是多少，建立的时候$pushup$一下，计算的时候就可以用了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">	<span class="keyword">double</span> databank[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">double</span> minpos[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">double</span> maxpos[<span class="number">2</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;cmp)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> databank[keyd]&lt;cmp.databank[keyd];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;point[maxn]; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">K_D_Tree</span>&#123;</span></span><br><span class="line">	node d[maxn];</span><br><span class="line">	<span class="keyword">int</span> lc[maxn];</span><br><span class="line">	<span class="keyword">int</span> rc[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D(i,j) d[i].databank[j]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Minp(i,j) d[i].minpos[j]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxp(i,j) d[i].maxpos[j]</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> now)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(lc[now])&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxk;i++)&#123;</span><br><span class="line">				<span class="built_in">Minp</span>(now,i)=<span class="built_in">min</span>(<span class="built_in">Minp</span>(now,i),<span class="built_in">Minp</span>(lc[now],i));</span><br><span class="line">				<span class="built_in">Maxp</span>(now,i)=<span class="built_in">max</span>(<span class="built_in">Maxp</span>(now,i),<span class="built_in">Maxp</span>(lc[now],i));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(rc[now])&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxk;i++)&#123;</span><br><span class="line">				<span class="built_in">Minp</span>(now,i)=<span class="built_in">min</span>(<span class="built_in">Minp</span>(now,i),<span class="built_in">Minp</span>(rc[now],i));</span><br><span class="line">				<span class="built_in">Maxp</span>(now,i)=<span class="built_in">max</span>(<span class="built_in">Maxp</span>(now,i),<span class="built_in">Maxp</span>(rc[now],i));</span><br><span class="line">			&#125; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    如果是计算最远的距离的话，那么每一维直接就是求距离的公式累加起来就可以了，最近的情况下面，则是如果处于最大最小区间以内，则是不用加，否则这一维取最小的来</p>
<p>​    用图片来表示的话，大概就是这样</p>
<p><img src="https://i.loli.net/2019/08/26/qrBO5boU67dgtQ3.png" alt="p1.PNG"><br><img src="https://i.loli.net/2019/08/26/GPdv5LoZTejSV2E.png" alt="k2.png"></p>
<p>上面的图就分别对应了第$k$近和第$k$远了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">getrange</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">Minp</span>(pos,<span class="number">0</span>)&gt;<span class="built_in">D</span>(p,<span class="number">0</span>))res+=<span class="built_in">sqar</span>(<span class="built_in">Minp</span>(pos,<span class="number">0</span>)-<span class="built_in">D</span>(p,<span class="number">0</span>));</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">Maxp</span>(pos,<span class="number">0</span>)&lt;<span class="built_in">D</span>(p,<span class="number">0</span>))res+=<span class="built_in">sqar</span>(<span class="built_in">Maxp</span>(pos,<span class="number">0</span>)-<span class="built_in">D</span>(p,<span class="number">0</span>));</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">Minp</span>(pos,<span class="number">1</span>)&gt;<span class="built_in">D</span>(p,<span class="number">1</span>))res+=<span class="built_in">sqar</span>(<span class="built_in">Minp</span>(pos,<span class="number">1</span>)-<span class="built_in">D</span>(p,<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">Maxp</span>(pos,<span class="number">1</span>)&lt;<span class="built_in">D</span>(p,<span class="number">1</span>))res+=<span class="built_in">sqar</span>(<span class="built_in">Minp</span>(pos,<span class="number">1</span>)-<span class="built_in">D</span>(p,<span class="number">1</span>));</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;<span class="comment">//第k近</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">disrange</span><span class="params">(node pos,<span class="keyword">int</span> nowp)</span></span>&#123;</span><br><span class="line">	ll res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxk;i++)</span><br><span class="line">		res+=<span class="built_in">max</span>(<span class="built_in">sqar</span>(pos.databank[i]-<span class="built_in">Minp</span>(nowp,i)),<span class="built_in">sqar</span>(pos.databank[i]-<span class="built_in">Maxp</span>(nowp,i)));</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据类型不一样是因为不是从同一道题目上摘下来的，不要在意</p>
<p>那么这样一来，查询的代码就差不多可以写出来了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(L&gt;R)<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(mid!=p)&#123;</span><br><span class="line">			ll res=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxk;i++)</span><br><span class="line">				res+=<span class="built_in">sqar</span>(<span class="built_in">D</span>(mid,i)-<span class="built_in">D</span>(p,i));</span><br><span class="line">			<span class="keyword">if</span>(res&gt;que.<span class="built_in">top</span>())&#123;</span><br><span class="line">				que.<span class="built_in">pop</span>();</span><br><span class="line">				que.<span class="built_in">push</span>(res);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;	</span><br><span class="line">		ll disl=<span class="number">0</span>,disr=<span class="number">0</span>;</span><br><span class="line">		disl=<span class="built_in">range</span>(p,lc[mid]);</span><br><span class="line">		disr=<span class="built_in">range</span>(p,rc[mid]);</span><br><span class="line">		<span class="keyword">if</span>(disl&gt;disr)&#123;</span><br><span class="line">			<span class="keyword">if</span>(disl&gt;que.<span class="built_in">top</span>())<span class="built_in">query</span>(L,mid<span class="number">-1</span>,p);</span><br><span class="line">			<span class="keyword">if</span>(disr&gt;que.<span class="built_in">top</span>())<span class="built_in">query</span>(mid+<span class="number">1</span>,R,p);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(disr&gt;que.<span class="built_in">top</span>())<span class="built_in">query</span>(mid+<span class="number">1</span>,R,p);</span><br><span class="line">			<span class="keyword">if</span>(disl&gt;que.<span class="built_in">top</span>())<span class="built_in">query</span>(L,mid<span class="number">-1</span>,p);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>这里就只写贴一个查询第$k$远的了</p>
<p>K-D tree 的查询时间复杂度据说是 $\Theta(\sqrt N)$</p>
<p>但是在某一些情况下面，它的时间复杂度还是会退化到接近$\Theta(N)$来，比如说</p>
<p><img src="https://img-my.csdn.net/uploads/201212/04/1354625553_3651.jpg"></p>
<p>所有的节点分布大致构成了一个圆，而你查询的节点差不多就是在圆心位置。</p>
<p>当然，设节点数为$K$,维度为$D$,只有当$K &gt;&gt; 2^D$的时候，K-D tree的效率才可以保证，当然，维数如果说高了的话，效率也是无法保证的。想K-D tree这样可以解决多维信息的树还有别的，比如说球树等等，我就不说了。<s>因为我不会用</s>。而如果想要解决更高维的信息，还想要保证效率的话，那么还有一种方法</p>
<h4 id="BBF-算法"><a href="#BBF-算法" class="headerlink" title="BBF 算法"></a><font color=green>BBF 算法</font></h4><p>​    首先，我们需要另外一个优先队列。同时还需要一个对回溯次数限制的值，这个值是依据大量的结果取定的，我也不知道应该给你一个多少比较好。这个$BBF$算法的核心就在于决定一个优先级和最大回溯次数。这个优先级还是之前所说的距离来当。每一次查询到某一个节点的时候，还是计算出左右儿子和目标节点距离，然后进入其中一个查询，把另一个连同树上的位置和优先级一起放进优先队列里面来。然后查询一直到达叶子结点。如果队列不为空且没有到达最大回溯次数，那么就从队列里面拿出队首来进行查询。</p>
<h3 id="插入，删除和重构"><a href="#插入，删除和重构" class="headerlink" title="插入，删除和重构"></a><font color=1453ad>插入，删除和重构</font></h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a><font color=green>插入</font></h4><p>这个时候，到达某一个节点，然后根据这个节点划分的维度，依次往下去，知道叶子节点为止，然后加上来就可以了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> now,node p,<span class="keyword">int</span> deps)</span></span>&#123;</span><br><span class="line">	<span class="comment">//插入操作，常规 </span></span><br><span class="line">	keyd=deps%maxk;</span><br><span class="line">	<span class="keyword">if</span>(p.databank[keyd]&lt;=<span class="built_in">D</span>(now,keyd))&#123;</span><br><span class="line">		<span class="keyword">if</span>(lc[now]==<span class="number">0</span>)&#123;</span><br><span class="line">			lc[now]=++tot;</span><br><span class="line">			d[tot]=p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">insert</span>(lc[now],p,deps+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(rc[now]==<span class="number">0</span>)&#123;</span><br><span class="line">		rc[now]=++tot;</span><br><span class="line">		d[tot]=p;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">insert</span>(rc[now],p,deps+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushup</span>(now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>差不多，就这样吧……</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a><font color=green>删除</font></h4><p>K-D tree的删除操作，对于没有后继节点的节点，那么就直接删除了就好，但是如果说有后继节点的话，你就从它的左子树中，找出这一维最小的那一个值，或者是右子树中找出最大的那一个值，然后再把把那一个值从原来的树中删除了……这是一个递归实现的过程。</p>
<h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a><font color=green>重构</font></h4><p>当插入删除操作进行了一定次数以后，重新用一次$build$就好了。当然也可以类似替罪羊树那样，选择一个规定的$\alpha$，如果说不符合要求再使用一次$build$,不过我觉得还是一种方法更好</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://oi-wiki.org/ds/kdt/">oi-wiki</a></p>
<p><a href="https://blog.csdn.net/likika2012/article/details/39619687">KD树（网易游戏笔试）</a></p>
<p><a href="https://www.cnblogs.com/lysuns/articles/4710712.html">Kd-Tree算法原理和开源实现代码</a></p>
<p><a href="https://blog.csdn.net/zhjchengfeng5/article/details/7855241">K-D tree 数据结构</a></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>K-D tree</tag>
      </tags>
  </entry>
  <entry>
    <title>20190820test</title>
    <url>/2021/09/05/20190820test/</url>
    <content><![CDATA[<h2 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a><font color =darkmagenta>Agent</font></h2><h3 id="Desciption"><a href="#Desciption" class="headerlink" title="Desciption"></a><font color=1453ad><em>Desciption</em></font></h3><blockquote>
<p>IMF(不可能任务小组)有<em>N</em>个Agent，每个Agent的能力值互不相同，现在部长先生想要派出<em>A</em>,<em>B</em>两队Agent去参加特别任务。但是参加大战的两个队伍要满足两个要求：</p>
<p><em>1.</em> <em>A</em>队中能力最大的Agent的能力值要小于<em>B</em>队能力最弱的Agent的能力值。</p>
<p><em>2.</em> <em>A</em>,<em>B</em>两队都要有人参加。</p>
<p>并不是所有的Agent都要去参加的，心急的部长先生想知道有多少种安排Agent的方案。由于答案可能很大，所以只需要你求出答案模<img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml7620\wps1.jpg" alt="img">的值就可以了。</p>
</blockquote>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a><font color =1453ad><em>Input</em></font></h3><p>输入仅一行，为一个整数<em>N</em>。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a><font color=1453ad><em>Output</em></font></h3><p>输出答案模<img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml7620\wps2.jpg" alt="img">的值。</p>
<h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color=1453ad><em>Analysis</em></font></h3><p>这一道题花了一点时间来推，就从$N==6$的情况来讨论一下：</p>
<p>$1.$当$A$组当中只有$1$个的时候一共有: $31+15+7+3+1$种方法，这些都是$2^n-1$,没有什么问题，因为依次取$1,2,3…$你能够选的方案就是这么多，没有什么毛病（就是一个子集的问题，不过排除不选的方案）</p>
<p>$2.$当$A$组当中只有$2$个的时候一共有：$15+7+3+1$种方法吗？不是的，这个时候因为当你选定$A$组最大的那一个的时候，剩余的小的那一个是还有选择的余地的，所以这里并不是这么多，而是要根据排列组合看一看。</p>
<p>$3.$到了这里的时候，差不多就可以看出规律来了，你会发现，这些$2^n-1$的系数，也是$2^x$,没错，这是因为你这样来看的时候，系数都是组合数，加起来就是$2^x$次方了</p>
<p>$4.$化简可以得到式子：<br>$$<br>2^0*(2^{n-1}-1)+2^1*(2^{n-2}-1)+……+2^{n-2}<em>(2^1-1)\\<br>=2^{n-1}</em>(N-1)-2^{n-1}+1<br>$$<br>因此代码就呼之欲出了：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//好像找到规律了,但是找到了也一点都不好写 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">qkpow</span><span class="params">(ll b,ll p)</span></span>&#123;</span><br><span class="line">	ll res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p&amp;<span class="number">1</span>)res=res*b%mod;</span><br><span class="line">		b*=b;</span><br><span class="line">		b%=mod;</span><br><span class="line">		p=p/<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen(&quot;agent.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">	<span class="comment">//freopen(&quot;agent.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;N);</span><br><span class="line">	ll idx=<span class="built_in">qkpow</span>(<span class="number">2</span>,N<span class="number">-1</span>);</span><br><span class="line">	ll res=(idx*(N<span class="number">-1</span>))%mod;</span><br><span class="line">	res=res-idx+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(res+mod)%mod);</span><br><span class="line">	<span class="comment">//fclose(stdin);</span></span><br><span class="line">	<span class="comment">//fclose(stdout);</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>CDQ分治</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>LuoguP1373</title>
    <url>/2021/09/05/LGP1373/</url>
    <content><![CDATA[<h1 id="LGP1373"><a href="#LGP1373" class="headerlink" title="LGP1373"></a><a href="https://www.luogu.org/problemnew/show/P1373">LGP1373</a></h1><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color =darkmagenta><em>Analysis</em></font></h2><p>这一道题目，首先，因为是交替进行，所以要有一维来表示是两个人中的哪一个，其次，这是一个矩阵，还要有矩阵的位置，最后，因为只有双方的魔液数量相同的时候才可以活下来，所以说应该还有一维来记录双方魔液的差值。对于状态转移方程，先做出如下约定：</p>
<ul>
<li>1-&gt;小A, 0-&gt;uim</li>
<li>差值为：小A的魔液减去uim的魔液</li>
</ul>
<p>对于小A:<br>$$<br>f[i][j][k][1]+=f[i-1][j][(k-mat[i][j]+md)\mod md][0]\\<br>f[i][j][k][1]+=f[i][j-1][(k-mat[i][j]+md)\mod md][0]<br>$$<br>对于uim:<br>$$<br>f[i][j][k][0]+=f[i-1][j][(k+mat[i][j])\mod md][1]\\<br>f[i][j][k][0]+=f[i][j-1][(k+mat[i][j])\mod md][1]<br>$$</p>
<p>对于差值，如果说这一步是小A拿到魔液的话，那么双方的差值就应该增大，所以说这一步应该是从减去这么多魔液的地方转移过来的，同样如果说是uim拿到了魔液的话，双方的差值就会减少，所以说因该就是从增加了这么多魔液的地方转移过来的</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a><font color=darkmagenta><em>Code</em></font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 802</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mat[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn][<span class="number">18</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> N,M,K;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;N,&amp;M,&amp;K);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=M;j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;mat[i][j]);</span><br><span class="line">			mat[i][j]%=(K+<span class="number">1</span>);</span><br><span class="line">			f[i][j][mat[i][j]][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> md=K+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=M;j++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> del=<span class="number">0</span>;del&lt;=K;del++)&#123;</span><br><span class="line">				(f[i][j][del][<span class="number">1</span>]+=f[i<span class="number">-1</span>][j][(del-mat[i][j]+md)%md][<span class="number">0</span>])%=mod;</span><br><span class="line"> 				(f[i][j][del][<span class="number">1</span>]+=f[i][j<span class="number">-1</span>][(del-mat[i][j]+md)%md][<span class="number">0</span>])%=mod;</span><br><span class="line"> 				(f[i][j][del][<span class="number">0</span>]+=f[i<span class="number">-1</span>][j][(del+mat[i][j])%md][<span class="number">1</span>])%=mod;</span><br><span class="line"> 				(f[i][j][del][<span class="number">0</span>]+=f[i][j<span class="number">-1</span>][(del+mat[i][j])%md][<span class="number">1</span>])%=mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=M;j++)&#123;</span><br><span class="line">			(ans+=f[i][j][<span class="number">0</span>][<span class="number">0</span>])%=mod; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LG训练题</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>2022元旦日记</title>
    <url>/2022/01/01/2022%E5%85%83%E6%97%A6%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="第一次出校"><a href="#第一次出校" class="headerlink" title="第一次出校"></a><font color=darkmagenta><strong>第一次出校</strong></font></h1><p>​    来大学已经一个学期了，之前因为种种原因一直都没有出去过学校。今天趁着元旦节出校门去逛了一圈。想着是去南京的中央商业区看看，不过对于南京不怎么了解，所以说最后就是坐地铁在新街口一带逛了逛街。首先是去麦当劳搓了一顿午饭。然后在一个书店里面看了看。在里面找到了《我的青春恋爱物语果然有问题》。有点惊喜。随后在无印良品的时候听见外面音响说什么南京大学生歌手比赛什么的，所以没怎么仔细看无印良品就出去听歌去了。听了几首歌之后和室友们一起去蜜雪冰城了，回来在楼上看了看手办，顺便还听了比赛的最后两首歌。我要表白最后一位歌手，长得好漂亮而且歌也很好听，不过好像是已经有npy了。回来之前还买了一份远坂凛的手办</p>
]]></content>
      <categories>
        <category>周记</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>元旦</tag>
      </tags>
  </entry>
  <entry>
    <title>LGP1966</title>
    <url>/2021/10/28/LGP1966/</url>
    <content><![CDATA[<h1 id="LGP1966"><a href="#LGP1966" class="headerlink" title="LGP1966"></a><a href="https://www.luogu.com.cn/problem/P1966">LGP1966</a></h1><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color=darkmagenta><strong>Analysis</strong></font></h2><p>观察$\sum_{1}^{n}(a_i-b_i)^2$,展开发现$a_i^2,b_i^2$的总和是固定的，所以说为了满足题目条件，就应该让$\sum a_ib_i$尽可能大。由排序不等式可知，顺序和是最大的，所以说这道题就可以转换成一道逆序对数的题目</p>
<p>关于排序不等式<a href="https://www.jianshu.com/p/5addc79269b4">戳这</a></p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a><font color=darkmagenta><strong>Code</strong></font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int64 long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (((x)&gt;(y))?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (((x)&lt;(y))?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqar(x) (x)*(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swp(x,y) x^=y,y^=x,x^=y</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxn 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod 99999997</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dbk</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> dbk &amp;obj)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val&lt;obj.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;A[Maxn],B[Maxn];</span><br><span class="line"><span class="keyword">int</span> tmp[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_array</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v[Maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(pos&lt;=N)&#123;</span><br><span class="line">            v[pos]++;</span><br><span class="line">            pos+=<span class="built_in">lowbit</span>(pos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pos)&#123;</span><br><span class="line">            res+=v[pos];</span><br><span class="line">            res%=Mod;</span><br><span class="line">            pos-=<span class="built_in">lowbit</span>(pos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sol</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;A[i].val;</span><br><span class="line">        A[i].pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cin&gt;&gt;B[i].val;</span><br><span class="line">        B[i].pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(A+<span class="number">1</span>,A+<span class="number">1</span>+N);</span><br><span class="line">    <span class="built_in">sort</span>(B+<span class="number">1</span>,B+<span class="number">1</span>+N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        tmp[A[i].pos]=B[i].pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        T.<span class="built_in">modify</span>(tmp[i]);</span><br><span class="line">        ans+=(T.<span class="built_in">query</span>(N)-T.<span class="built_in">query</span>(tmp[i]));</span><br><span class="line">        ans%=Mod;ans+=Mod;ans%=Mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    cin&gt;&gt;N;</span><br><span class="line">    <span class="built_in">sol</span>();</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷练习题</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>逆序对数</tag>
      </tags>
  </entry>
  <entry>
    <title>LuoguP4377</title>
    <url>/2021/09/05/LGP4377/</url>
    <content><![CDATA[<h1 id="LGP4377"><a href="#LGP4377" class="headerlink" title="LGP4377"></a><a href="https://www.luogu.org/problemnew/show/P4377">LGP4377</a></h1><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color=darkmagenta><em>Analysis</em></font></h2><p>今天考试，$Mr.Yu$疯狂暗示，难道不是递增的哦</p>
<p>所以说我一来就开始看第三题，显示贪心错了大样例，然后就决定$dp$了，想不到居然对了，开心。</p>
<p>后面到网上来看题解，全部都是0/1分数规划，我震惊了，嗯，想不到啊。</p>
<p>这里来谈一谈我的做法，设$f[i]$表示才艺之的总之为$i$的时候最小的重量是多少，之所以要这么来设计是因为才艺值是固定的，重量值越小的时候，才艺值就越大，然后每一头奶牛只能够选一次，那么不就是一个0/1背包的模板题，最后来扫一遍得到答案吗</p>
<h2 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a><font color=darkmagenta><em>Codes</em></font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *学学背包问题：</span></span><br><span class="line"><span class="comment"> *f[i]表示总才艺值为i时，最小的重量是多少</span></span><br><span class="line"><span class="comment"> *f[i]=min(f[i],f[i-t[i]]+w[i]); </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 255</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e-6</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cow</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> w;<span class="comment">//重量</span></span><br><span class="line">	<span class="keyword">int</span> t; </span><br><span class="line">&#125;fj[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn*<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> N,W; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;show.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;show.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;W); </span><br><span class="line">	<span class="keyword">int</span> maxt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;fj[i].w,&amp;fj[i].t);</span><br><span class="line">		maxt+=fj[i].t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">	<span class="comment">//0x3f3f3f3f很大，f[i]里面的值并不会很大，所以说不会影响结果 </span></span><br><span class="line">	f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=maxt;j&gt;=fj[i].t;j--)&#123;</span><br><span class="line">			f[j]=<span class="built_in">min</span>(f[j],f[j-fj[i].t]+fj[i].w);	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=maxt;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(f[i]&gt;=W)ans=<span class="built_in">max</span>(ans,i/(f[i]+<span class="number">0.0</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	ans*=<span class="number">1000</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(<span class="keyword">int</span>)ans);</span><br><span class="line">	<span class="built_in">fclose</span>(stdin);</span><br><span class="line">	<span class="built_in">fclose</span>(stdout);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷练习题</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>背包问题</tag>
      </tags>
  </entry>
  <entry>
    <title>LuoguP1005</title>
    <url>/2021/09/05/LG1005/</url>
    <content><![CDATA[<h1 id="LG1005"><a href="#LG1005" class="headerlink" title="LG1005"></a><a href="https://www.luogu.org/problemnew/show/P1005">LG1005</a></h1><p>十年以前，提高组的题目居然要写高精度！！！！</p>
<p>这不是摆明了刁难人吗！！！！！！！</p>
<h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color=darkmagenta><em>Analysis</em></font></h2><p>你需要写的高精度：</p>
<ul>
<li>高精度加法</li>
<li>高精度比较大小</li>
<li>高精度乘高精度</li>
<li>高精度乘低精度</li>
<li>高精度赋初值</li>
</ul>
<p>虽然这一道题目是一道$dp$，但是高精度完全抢走了所有的风头</p>
<p>关于着一道题目的$dp$，首先，就是在于每一行都是独立的，互相影响，所以说每一行单独来$dp$就可以了。</p>
<p>我们设$f[i][j]$来表示$[i,j]$区间里面的最优情况，他可能是是从$[i+1,j]$和$[i,j-1]$两种情况推过来的，所以说因此就可以得出他的方程了</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a><font color=darkmagenta><em>Code</em></font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 85</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> carry 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">int</span> matrix[maxn][maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Largenum</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> val[maxn];</span><br><span class="line">	<span class="keyword">int</span> <span class="keyword">operator</span> [](<span class="keyword">const</span> <span class="keyword">int</span> &amp;ref)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val[ref];</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	<span class="built_in">Largenum</span>(<span class="keyword">int</span> a)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(val));</span><br><span class="line">		<span class="keyword">int</span> pos=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(a)&#123;</span><br><span class="line">			val[pos]=a%carry;</span><br><span class="line">			a/=carry;</span><br><span class="line">			pos++;</span><br><span class="line">		&#125;</span><br><span class="line">		val[<span class="number">0</span>]=pos;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">Largenum</span>(<span class="keyword">void</span>)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(val));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,val[val[<span class="number">0</span>]]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=val[<span class="number">0</span>]<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%03d&quot;</span>,val[i]);</span><br><span class="line">		<span class="comment">//大家都懂的，我这里是每一位存了一个三位数 </span></span><br><span class="line">	&#125;</span><br><span class="line">	Largenum <span class="keyword">operator</span> +(<span class="keyword">const</span> Largenum &amp;obj)<span class="keyword">const</span>&#123;</span><br><span class="line">		Largenum cmp;</span><br><span class="line">		<span class="keyword">int</span> add=<span class="number">0</span>,pos=<span class="built_in">max</span>(val[<span class="number">0</span>],obj.val[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pos;i++)&#123;</span><br><span class="line">			cmp.val[i]=obj.val[i]+val[i]+add;</span><br><span class="line">			add=cmp.val[i]/carry;</span><br><span class="line">			cmp.val[i]%=carry;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(add&gt;<span class="number">0</span>)cmp.val[++pos]=add;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> Largenum &amp;obj)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(val[<span class="number">0</span>]!=obj[<span class="number">0</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=val[<span class="number">0</span>];i++)<span class="keyword">if</span>(val[i]!=obj[i])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Largenum &amp;obj)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(val[<span class="number">0</span>]&gt;obj[<span class="number">0</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>((*<span class="keyword">this</span>)==obj)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(val[<span class="number">0</span>]&lt;obj[<span class="number">0</span>])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=val[<span class="number">0</span>];i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(val[i]&gt;obj[i])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">if</span>(val[i]&lt;obj[i])<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="comment">//这个是状态转移比较大小用的 </span></span><br><span class="line">	</span><br><span class="line">	Largenum <span class="keyword">operator</span> *(<span class="keyword">const</span> Largenum &amp;obj)<span class="keyword">const</span>&#123;</span><br><span class="line">		Largenum cmp;</span><br><span class="line">		<span class="keyword">int</span> pos=val[<span class="number">0</span>]+obj[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=val[<span class="number">0</span>];i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=obj[<span class="number">0</span>];j++)&#123;</span><br><span class="line">				cmp.val[i+j<span class="number">-1</span>]+=val[i]*obj[j];</span><br><span class="line">				cmp.val[i+j]+=cmp.val[i+j<span class="number">-1</span>]/carry;</span><br><span class="line">				cmp.val[i+j<span class="number">-1</span>]=cmp.val[i+j<span class="number">-1</span>]%carry;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp.val[pos]==<span class="number">0</span>&amp;&amp;pos&gt;<span class="number">1</span>)pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Largenum <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">int</span> &amp;obj)<span class="keyword">const</span>&#123;</span><br><span class="line">		Largenum cmp;</span><br><span class="line">		<span class="keyword">int</span> pos=val[<span class="number">0</span>];<span class="keyword">int</span> add=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pos;i++)&#123;</span><br><span class="line">			cmp.val[i]=val[i]*obj+add;</span><br><span class="line">			add=cmp.val[i]/carry;</span><br><span class="line">			cmp.val[i]=cmp.val[i]%carry;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(add&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			cmp.val[++pos]=add%carry;</span><br><span class="line">			add/=carry;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp.val[pos]==<span class="number">0</span>&amp;&amp;pos&gt;<span class="number">1</span>)pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;two[maxn],f[maxn][maxn],<span class="built_in">ans</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> M)</span></span>&#123;</span><br><span class="line">	two[<span class="number">0</span>]=<span class="built_in">Largenum</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</span><br><span class="line">		two[i]=two[i<span class="number">-1</span>]*<span class="number">2</span>;<span class="comment">//预处理一下 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=M;j++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;matrix[i][j]);</span><br><span class="line">	<span class="comment">//f[i][j]表示选择[i,j]区间时的最大值，它从f[i+1][j]和f[i][j+1]这两步枚举过来</span></span><br><span class="line">	<span class="built_in">init</span>(M);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=N;k++)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;t&lt;M;t++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+t&lt;=M;++i)&#123;</span><br><span class="line">				<span class="keyword">int</span> j=i+t;</span><br><span class="line">				<span class="keyword">int</span> pw=M-t;</span><br><span class="line">				<span class="comment">//因为f[i][j]的定义，所以说这里是从短到长的来推的</span></span><br><span class="line">				<span class="comment">//短的时候呢，乘的那一个数也要大一点</span></span><br><span class="line">				Largenum fir=(f[i+<span class="number">1</span>][j]+two[pw]*matrix[k][i]);</span><br><span class="line">				Largenum sec=(f[i][j<span class="number">-1</span>]+two[pw]*matrix[k][j]);</span><br><span class="line">				<span class="keyword">if</span>(fir&lt;sec)f[i][j]=sec;</span><br><span class="line">				<span class="keyword">else</span> f[i][j]=fir; </span><br><span class="line">			&#125; </span><br><span class="line">			ans=ans+f[<span class="number">1</span>][M];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">	ans.<span class="built_in">output</span>();	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LG训练题</category>
      </categories>
      <tags>
        <tag>高精度</tag>
        <tag>区间dp</tag>
      </tags>
  </entry>
  <entry>
    <title>Polya定理</title>
    <url>/2021/09/05/Polya%E5%AE%9A%E7%90%86%E5%92%8C%E6%AF%8D%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="群论"><a href="#群论" class="headerlink" title="群论"></a><font color=darkmagenta>群论</font></h2><p>今天学习了一点很厉害的知识，我简要记录一下，方便日后再来复习，不过并不是十分地详尽。在了解什么是$Polya$定理之前，先让我们来看一看什么是群。这个知识可以是为后面奠基的。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font color=1453ad>定义</font></h3><p>群是一个集合，它满足运算$*$，这个运算是经过定义的，可以是加法，可以是乘法，也可以是其它的运算法则。作为一个群，它具有以下的性质:</p>
<ul>
<li><p>封闭性:$\forall a,b\in G,\exists c\in G,a*b=c$</p>
</li>
<li><p>结合律: $\forall a,b,c\in G,(a<em>b)<em>c=a</em>(b</em>c)$</p>
</li>
<li><p>单位元: $\exists e\in G,\forall a\in G,a<em>e=e</em>a=a$</p>
</li>
<li><p>逆元: $\forall a\in G,\exists b\in G,a<em>b=b</em>a=e,b=a^{-1}$</p>
</li>
</ul>
<p>举个例子，所有的整数就可以算作是一个群，这里的运算就是加法，我们带进去看一看，会发现所有的性质是满足的。没错就这样</p>
<h3 id="置换"><a href="#置换" class="headerlink" title="置换"></a><font color=1453ad>置换</font></h3><p>$N$个元素$1,2,3,\cdots,N$之间的置换，然后把它换成$1,2,3,\cdots,N$的一个全排列就对了，就是这么理解的，写作：<br>$$<br>\begin{pmatrix}<br>1&amp;2&amp;3&amp;\cdots&amp;N\\<br>a_1&amp;a_2&amp;a_3&amp;\cdots&amp;a_n<br>\end{pmatrix}<br>$$<br>就是长成这个样子的了</p>
<h3 id="置换群"><a href="#置换群" class="headerlink" title="置换群"></a><font color=1453ad>置换群</font></h3><p>这是一个元素是置换的群，它的运算是置换的连接。这个东西听起来很玄对不对，对了，这个东西听起来就是很玄的，因为它本来就是这么的玄，下面我们看一个例子来理解一下，比如下面两个群我们来运算一下：<br>$$<br>\begin{pmatrix}<br>1&amp;2&amp;3&amp;4\\<br>3&amp;1&amp;2&amp;4<br>\end{pmatrix}<br>\begin{pmatrix}<br>1&amp;2&amp;3&amp;4\\<br>4&amp;3&amp;2&amp;1<br>\end{pmatrix}=<br>\begin{pmatrix}<br>1&amp;2&amp;3&amp;4\\<br>3&amp;1&amp;2&amp;4<br>\end{pmatrix}<br>\begin{pmatrix}<br>3&amp;1&amp;2&amp;4\\<br>2&amp;4&amp;3&amp;1<br>\end{pmatrix}=<br>\begin{pmatrix}<br>1&amp;2&amp;3&amp;4\\<br>2&amp;4&amp;3&amp;1<br>\end{pmatrix}<br>$$<br>下面解释一下这个运算，首先，先把第二个置换换一换位置，这一下他的第一行顺序是不是就和第一个置换的第二行一样了？然后这个时候再来看，第一个置换里面，1置换成了3，到了第二个置换里面，3又是置换成了2，对不对？这就相当于是1置换成了2，其他的元素我们以此类推，就可以得到最后一个置换了。</p>
<p>而这一个置换群，也是满足四个性质的，为什么？我想封闭性是显然的吧，至于其他的？我怎么可能知道？我都是不知道的了，那么我还讲什么</p>
<h3 id="一个神奇的式子和概念"><a href="#一个神奇的式子和概念" class="headerlink" title="一个神奇的式子和概念"></a><font color =1453ad>一个神奇的式子和概念</font></h3><p>$$<br>|Z_k|*|E_k|=|G|<br>$$</p>
<p>首先，这个并不是绝对值的意思，而是说这几个分别是有多少的个数，下面一一说明每一个的意义是什么</p>
<ul>
<li>$|Z_k|$:设$G$是$1,2,3,\cdots,N$的置换群，$k$是$1,2,3,\cdots,N$中的某一个元素，$G$中使$k$不变的置换，记作$Z_k$</li>
<li>$|E_k|$:等价类。$k$在$G$作用下的轨迹，即$k$在$G$作用下，产生的所有元素集合</li>
</ul>
<p>证明：</p>
<p>请自行百度，谷歌，或者必应。</p>
<h2 id="Polya定理"><a href="#Polya定理" class="headerlink" title="Polya定理"></a><font color=darkmagenta>Polya定理</font></h2><h3 id="Burnside引理"><a href="#Burnside引理" class="headerlink" title="Burnside引理"></a><font color=1453ad>Burnside引理</font></h3><p>我们不妨假设$D(a_j)$是置换$a_j$下面不变的元素个数，那么就很容易就有一个式子<br>$$<br>\sum_{i=1}^{n}|Z_j|=\sum_{i=1}^{s}|D(a_i)|<br>$$<br>我们接着往下面推<br>$$<br>\sum_{i=1}^{n}|Z_j|=\sum_{i=1}^{s}|D(a_i)|\\<br>=\sum_{i=1}^{L}\sum_{k\in|E_i|}|Z_k|<br>$$<br>这里不难理解吧，我们假设一共有$L$个等价类，各个等价类加起来实际上和原来是一样多的，对吧,然后</p>
<p>$$<br>=\sum_{i=1}^{L}|E_i|<em>|Z_i|\\<br>=\sum_{i=1}^{L}|G|=L</em>|G|\\<br>L=\frac{1}{|G|}\sum_{i=1}^{n}|Z_i|=\frac{1}{|G|}\sum_{i=1}^{n}|D(a_i)|<br>$$<br> 可是，虽然我们得到了这一个式子，但是啊，难道这一个$|Z_i|$,或者$D(a_j)$什么的，难道很好算吗？，一点都没有啊，所以说接下来还是得来看一看$Polya$定理</p>
<h3 id="Polya定理-1"><a href="#Polya定理-1" class="headerlink" title="Polya定理"></a><font color=1453ad>Polya定理</font></h3><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a><font color=c62b26>循环</font></h4><p>这个真的就是一个很神奇的东西，简单的来说就是一种来表示置换的方法，来看看下面这一个例子<br>$$<br>\begin{pmatrix}<br>1&amp;2&amp;3&amp;4&amp;5\\<br>3&amp;5&amp;1&amp;4&amp;2<br>\end{pmatrix}=(13)(25)(4)<br>$$<br>这样的表示是唯一的，每一个置换都可以写成若干个互不相交的循环的乘积（我想这里肯定又是重新定义了一下），对于这些循环的个数就叫做循环节数（名字听起来和小学学的小数的循环节差不多，但是要难的多）</p>
<h4 id="Polya定理的表达式"><a href="#Polya定理的表达式" class="headerlink" title="Polya定理的表达式"></a><font color=c62b26>Polya定理的表达式</font></h4><p>既然我们已经是知道了什么是循环，那么我们终于是可以写出这个该死的$Polya$定理的表达式了<br>$$<br>L=\frac{1}{|G|}(m^{c(g1)}+m^{c(g2)}+\cdots+m^{c(g_n)})<br>$$<br>其中$G$是${g_1.g_2,g_3\cdots,g_n}$,$c(g_i)$表示置换$g_i$的循环节个数，这一个式子看起来很神奇对吧，实际上和上面的$Burnside$引理是差不多的，只是换了一种表达的方式，这是前人们通过观察证明得出来的结论，这意味着我并不知道如何从$Burnside$引理推到$Polya$定理。</p>
<h2 id="Polya定理的运用"><a href="#Polya定理的运用" class="headerlink" title="Polya定理的运用"></a><font color =darkmagenta>Polya定理的运用</font></h2><p>下面让我们来看一道题目，这一道题目和方格子着色有关</p>
<blockquote>
<p>对于一个2*2的矩阵，选择用黑白两种颜色来进行着色，如果说经过了旋转以后，得到的图形是相同的话，那么认为是同一种染色的方案。</p>
</blockquote>
<p>因为数据很小，所以说可以通过枚举的方式得出所有的可能性：</p>
<p><img src="https://i.loli.net/2019/07/25/5d399e9be352098161.png"></p>
<p>我们可以看出，如果说是不重复的话，那么一共就有16种方案，但是如果说是要去除掉重复的方案的数量的话，那么就是一共有6种了。尽管说从目前的数据规模来看，这一道题目十分简单，但是如果说数据在扩大个几十倍甚至是上百倍的话，那么就十分不容易解决这一个问题了</p>
<p>因此这里我们就必须要用到刚才的知识来解决现在的问题了</p>
<p>设置换群$G={转0度，转90度，转180度，转270度}$</p>
<p>来标号分别写出四个变化的置换。然后看看，在第一个置换下面，每一个都是不会变的，而对于第二个和第四个置换，第一种和第二种图都是不会变的，对于第三个置换，则是增加了两个对角线填色的图，因此就可以直接代入到式子当中直接得到答案了。</p>
<p>好了，心里面大概也算的上是有一点谱了，差不多就是这么多内容了。（实际上还有一个母函数的内容，但是我自己并不是很懂。）</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>群论</tag>
        <tag>Polya定理</tag>
      </tags>
  </entry>
  <entry>
    <title>一个人的博物馆--讲座报告</title>
    <url>/2021/12/11/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%8D%9A%E7%89%A9%E9%A6%86%E8%AE%B2%E5%BA%A7%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="一个人的博物馆"><a href="#一个人的博物馆" class="headerlink" title="一个人的博物馆"></a><font color=darkmagenta><strong>一个人的博物馆</strong></font></h1><p><a href="www.1937nanjing.org">博物馆网址</a><br><strong>主讲人：吴先斌馆长</strong></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font color=1453ad><strong>前言</strong></font></h2><p>​    今天意外地受到了邀请，在两点钟的时候去书院听一个讲座。本来最开始的时候没有抱着太大的期望，但是去了过后这个讲座确实给人很惊喜。这学期听<s>睡</s>了很多讲座，这个讲座称得上是印象相当深刻的一个讲座了。不过虽然说一边听，一边打字记录，但是有些细节的地方可能还是会有记错的地方</p>
<p>​    <s>我博客以前好像没有这么多图过</s></p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a><font color=1453ad><strong>内容</strong></font></h2><h3 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a><font color=2a9678><strong>Part1</strong></font></h3><p>​    最开始馆长先进行了一下自我介绍，提到了自己也曾经和吴健雄先生见过一面。在讲座的开始之前，他先是简略过了一段那个历史，提到说要从更高的层面来理解这段历史,了解到日本的野心和我们民族意识的觉醒，说到了国家公祭日是对战争受害者的缅怀。</p>
<p><img src="https://s2.loli.net/2021/12/11/TJDV39ReqZn4tXm.jpg" alt="图片1"></p>
<p>​    随后馆长说到了自己创办博物馆的私心。作为一个企业家的他，以前一直都是在经商，和很多人一样，对于历史其实并没有深刻的认识。而他经商的过程中突然意外地发现饿了一本史料：有很多日本人曾经在东南大学的建筑里面，也就是说东南大学的校址是当时日军地一个驻地。于是他就去请教了一位历史学的教授，问他为什么日本人驻扎在那里。可是教授却说没有办法解读，没办法告诉他答案。</p>
<p>​    所以他自己心中郁闷：为什么一个学历史的教授都没有办法解读这件事情？由于心中有点好奇，所以说问教授为什么没法解读。而教授说史料不够，<strong>尤其是对于大屠杀的研究史料不够(十五年前)<strong>，甚至还不如日本。这就让馆长十分惊讶。因为这么重大的历史事件，三十万人被杀，但是对此地研究甚至都还不如加害者日本。馆长请教授举个例子来证明史料的落后。教授谈到了：</strong>第一点</strong>是我们大屠杀事件研究起步落后，日本是在60-70年代南京大屠杀著作公开发行，我们在79年才发行了关于南京大屠杀资料,且是作为内部资料;<strong>第二点</strong>是社会民众参与这段历史研究落后。</p>
<p>​    馆长对于民众参与到历史地研究中来并不理解。所以说教授让他有时间去听讲座。而馆长有一次去听了个日本教授关于日本某个侵华部队犯下的罪过的研究。发现这个教授讲座逻辑清晰，讲得非常地好。就在讲座结束了之后去问这位日本教授是哪一个大学的。结果这个日本教授说自己就是一个保安。是自己平时研究。</p>
<p>​    这样下来馆长就知道了当时教授说要动员社会民众参与历史研究的意义。</p>
<p>​    专家的研究是从思考的层面上面来。而社会人士则可以从自己专门的方面对同一段历史进行解读，所以说社会上的认识都对历史不同层面上的解读之后，对于历史可以有一个更加全面，清晰的认识。有助于反思和铭记历史。</p>
<p>​    李大钊作为历史学家曾经说过：“要到社会中做历史研究。”<s>差不多是这个意思吧。</s></p>
<p>​    <strong>所以在听了讲座时候，就萌发了一个想法：为什么不自己去建立一个博物馆，为想要研究南京大屠杀的人提供一个平台。</strong></p>
<p>​    后来就建立南京民间抗日博物馆，目前为止收集了文物6000余件，书籍40000余。也是中国170家抗战博物馆中，仅有的两家民间的抗战博物馆。</p>
<h3 id="Part2"><a href="#Part2" class="headerlink" title="Part2"></a><font color=2a9678><strong>Part2</strong></font></h3><p>​    博物馆不同于大学。一个博物馆还应当去大量地进行社会实践，去宣传，普及，而不仅仅是研究。</p>
<p>​    馆长就先是提到了戴安澜将军。毛主席为他写了一首五联诗缅怀他，周总理称其为 黄埔之英，民族之雄。</p>
<p>​    说到作为民族英雄牺牲在缅甸战场的他，家人亲属一直以来都没有机会去祭拜。一直到了大约十年前地时候，他的儿子才有机会去祭拜他的父亲。馆长先生了解到了这件事情之后，就和戴安澜将军的儿子联系，提出要一同去祭拜将军。因为者<strong>不仅仅只是一个儿子对于父亲的祭拜，也是一个民族的后代对于英雄先辈的祭拜</strong>。</p>
<p>​    而后他们在2011年的时候一同去了缅甸，根据当时的一张战报记载需寻找一个叫做茅邦村的地方。众所周知，虽然三百年前，缅甸曾经是东南亚小霸王，但是现在经济发展状况并不如意，建国以来就没怎么好过。曼德勒，缅甸的上海，连水电都不能保证。在当地下了飞机之后。两百公里的路程，开车花了十三个小时的时间（路不好）。最后找到了那个村子又发现不是要找的那个村子。弃车步行，38°高温下在原始森林中不行，反复寻找，苍天不负有心人终于找到了。</p>
<p><img src="https://s2.loli.net/2021/12/11/PBVcCkduFlxUiI1.jpg" alt="2"></p>
<p>​    原本是去祭拜先烈的，但是在缅甸发现了一个奇怪的现象。</p>
<p><img src="https://s2.loli.net/2021/12/11/pR3nX9edBrYSWN4.jpg" alt="3"></p>
<p>​    在缅甸境内，有大量的日本军人的纪念碑，甚至连日本的战马都有自己的纪念碑。日本民间在缅甸境内修建了多达3000的纪念碑来纪念死在缅甸战场的日本人。甚至还贿赂缅甸的警察，在警哨上面去刻上日本军人的名字。缅甸的警察每吹一次哨子，就相当于是纪念了一次日本人。</p>
<p>​    试想一下一个缅甸人在缅甸见到的都是日本人的纪念碑，而不是日本人的纪念碑，那么关于中国军队远征缅甸的性质就会被模糊掉。这是作为后代的我们难以面对的一个问题。所以说在缅甸的山头，就决定要为我们的英雄去修建一座纪念碑。</p>
<p>​    后面就通过馆长通过民间的方式，修建了第一座缅甸的中国军人纪念碑。</p>
<p><img src="https://s2.loli.net/2021/12/11/zmgQ91oAIMStshC.jpg" alt="4"></p>
<p>​    这件事也引起了关注，目前为止，民间也已经是修建了十多座纪念碑了。馆长也说到我们要争取超过日本人。虽然说日本人从几十年前就开始修建纪念碑了，但是我们应当有<strong>捍卫历史，尊重先贤的决心</strong>。</p>
<h3 id="Part3"><a href="#Part3" class="headerlink" title="Part3"></a><font color=2a9678><strong>Part3</strong></font></h3><p>​    这一部分有一个小标题——<strong>揭露虚假的和平</strong></p>
<p>​    馆长问我们有没有看过日本的一个电视剧《排球女将》。不过我们之中没有人看过。毕竟是上一个时代的片子了。三原顺子，在电视剧中饰演了女队长。后来她因为感情问题退出了演艺圈从政。有一次讲话中提到：“日本想要摆脱经济低迷的状态，需要一种精神，一种八纮一宇的精神。”这些话引发了轩然大波。</p>
<p>​    八纮一宇是说要征服八方，纳入到一个屋顶之下。1938年相川胜六为了纪念神武天皇2600年生日<s>就你妈离谱</s>修建了八纮一宇塔，炫耀日本侵略武功。充当军国主义宣传侵略战争工具。</p>
<p>​    修建的过程中使用了日占区的石材。其中就有南京的石头。占领区的全部用于塔的基石，自己的石头放在上面。<s>瞬间想到了元代的镇南塔。</s>盟军胜利之后要求日本人拆掉塔。日本人移花接木的方式，将八纮一宇四个字用水泥糊掉，铜像撤掉，保留了样子，改名和平之塔<s>核平之塔</s>。</p>
<p>​    日本人甚至恬不知耻地在这座塔下传递奥运圣火。</p>
<p><img src="https://s2.loli.net/2021/12/11/eoS3i1CQ4BUPKN7.jpg" alt="5"></p>
<p>​    随着日本经济复苏和民族主义情绪复苏，恢复了八纮一宇塔的模样。</p>
<p>​    2013年的时候，日本研究这个塔的一个民间团体找到了馆长，鼓励他把石材要回来。2015年的时候，馆长组织了南京市民去讨要石头</p>
<p><img src="https://s2.loli.net/2021/12/11/hoHNXSUKYTtWsum.jpg" alt="6"></p>
<p>​    谈到了以前做南京大屠杀宣传的时候，日本媒体从来都没有报道。这次还没到日本，媒体的手机都打来了，到了之后日本众多媒体都到了。</p>
<p>​    在日本和知县导论此时，那个知县说了这个要讨论，要了资料去研究。</p>
<p><img src="https://s2.loli.net/2021/12/11/1Ar9On2xzNDBymW.jpg" alt="7"></p>
<p>​    在新闻发布会上，《产经新闻》（看《参考消息》上面翻译的他们的文章就知道这家报纸不是什么好东西）带了自己的翻译。他们提问：你来讨石，有没有法律资格？馆长知道自己不能绕到里面去。就回答：“你问我有没有法律资格。我说中国人有矛盾了，处理问题和日本人不一样，中国讲究情，理，法，我们先将情，再讲理，最后再讲法。讲法，我身份证是南京的，第二，我是南京民间抗战博物馆馆长，保护和收集散落世界的南京抗战文物是馆长的责任，第三，我这次来，不是来和你谈战争赔偿问题的，我是来追赃的，掠夺我的东西，我随时随地都可以要回来。”又要再次提问<s>什么素质</s>，被日本组织者打断：一人只有一次机会。</p>
<p>​    后面第二天专门找了《产经新闻》的报纸来看。</p>
<p><img src="https://s2.loli.net/2021/12/11/YeK1MU7p5SHvm93.jpg" alt="8"></p>
<p>​    称讨石一方态度强硬，说什么来在多次都是和<s>核</s>平之塔。</p>
<p>​    而在回来之后还受到了日本的恐吓信。</p>
<p><img src="https://s2.loli.net/2021/12/11/zqLVIhsi6mDN2Tl.jpg" alt="9"></p>
<p>​    </p>
<p>​    把我恶心到了。</p>
<p>​    而结果非常遗憾：石头没有讨回来。馆长说本来想再去。但是负责协调的老日本共产党员去世了，加上疫情。不过和日方仍然保持通信。而知县曾经表态：“要经过议会的表决。”这就十分困难了。</p>
<p>​    但是讨石的过程并不是没有任何意义的。这也让很多日本人知道了石头的本来面目。</p>
<p><img src="https://s2.loli.net/2021/12/11/78y5MIagcmXAweU.jpg" alt="10">    </p>
<p>​    经过调研，南京还有四块石头没有归还，除此之外还有其他的石头，也希望可以回到祖国来。</p>
<h3 id="Part4"><a href="#Part4" class="headerlink" title="Part4"></a><font color=2a9678><strong>Part4</strong></font></h3><p>​    最后还有一个提问环节。谈到了历史教育，文化交流的问题。馆长提到了对历史不了解并不是我们的错，而是老一辈的他们没有教育好，也希望我们虽然是工科生，但是也要去了解历史，了解民族的过去。</p>
<h2 id="合照"><a href="#合照" class="headerlink" title="合照"></a><font color=1453ad><strong>合照</strong></font></h2><p><img src="https://s2.loli.net/2021/12/11/T9phaOGsoY4HUfk.jpg" alt="11"></p>
]]></content>
      <categories>
        <category>讲座报告</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>南京</tag>
        <tag>抗日战争</tag>
      </tags>
  </entry>
  <entry>
    <title>你往何处去-读后感</title>
    <url>/2021/09/05/%E4%BD%A0%E5%BE%80%E4%BD%95%E5%A4%84%E5%8E%BB-%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<h2 id="关于显克维奇"><a href="#关于显克维奇" class="headerlink" title="关于显克维奇"></a><font color=darkmagenta>关于显克维奇</font></h2><p>​    亨里克显克维奇，出生于十九世纪中叶的一个没落的地主家庭。中学毕业后进入了华沙高等学院进行学习。是波兰十九世纪的著名作家。人们评价他：</p>
<blockquote>
<p>作品人物个性鲜明，情节引人入胜，语言优美流畅，深受群众欢迎，素有“波兰语言大师”之称。</p>
</blockquote>
<p>​    他是最早被介绍到中国的波兰作家。鲁迅曾经翻译过他的短篇小说集。他的作品以炙热的爱国热情，波澜壮阔的战争场面，精致细腻的描写而令人赞叹。</p>
<p>​    显克维奇是一个波兰人，这是一个对于大多数人而言，十分陌生的国家，大多数对他的印象，应该就是德国入侵波兰，二战全面爆发和在拜仁慕尼黑踢球的波兰前锋莱万多夫斯基了。实际上关于波兰，有着很多值得一谈的地方，她的黄金自由制，萨尔马提亚主义，历史上著名的瓦尔纳十字军，<strong>1683年维也纳城下三千翼骑兵大破奥斯曼帝国十五万军队</strong>，以及对俄罗斯的入侵（值得一提的是，蒙古和波兰应当是唯二两个一度攻占了莫斯科的国家，拿破仑占领的莫斯科是俄罗斯人让的，蒙古是没有打进去，俄国人就投降了，而波兰则是在俄国王朝混乱时期攻入了莫斯科），与欧洲其他贵族截然不同的施拉赤塔。<strong>马克思曾经评价波兰是斗争的民族，认为波兰应当是实现共产主义的先驱</strong>（然而有趣的是，当1919年的时候，苏俄红军向着西方进军，准备进行世界革命，欧洲各国统治危在旦夕的时候，波兰人创造了维斯瓦河畔的奇迹，逼得苏俄人割地赔款）</p>
<p>​    我们谈回到显克维奇身上来。他出身的年代，曾经一度称霸东欧的波兰已经被她曾经的附庸普鲁士，被她从奥斯曼帝国手中救下来的奥地利，以及宿敌俄国所瓜分殆尽。华沙起义的失败，更是给波兰民族的前程蒙上了一层阴影。俄国人的民族同化政策进一步加剧,上层贵族走向了对俄罗斯的妥协，而下层的民众则是看不到波兰民族的方向。</p>
<blockquote>
<p>十九世纪六十年代末，一批受实证主义影响的知识分子便掀起了一场意识形态方面的斗争，他们反对旧的封建主义，主张实业救国……显克维奇虽然没有参与这场实证主义运动，但是却收到它的影响……</p>
<p>显克维奇知道，在现实社会是很难找到希望和信心的。但是在波兰的历史上，却发生过伟大的事件，出现过伟大的人物，有过令人振奋的东西，伟大的性格，伟大的罪过和伟大的牺牲</p>
<p>​                                                                                 -《火与剑 林洪亮译本 译后前言》</p>
</blockquote>
<p>​    显克维奇自七八十年代开始开始创作。他的哪一部《火与剑》，就是在那一个时间完成的。《火与剑》这一本书，是他历史小说三部曲的第一部。这也有可能是在中国，他最有名气的一部小说。因为在2013年的时候，$taleworlds$ 的骑马与砍杀里面增加了一部以这本书为名的资料片。相信很多人因为这知道了显克维奇。至少我是因此知道的。我必须要说一下，林洪亮翻译的火与剑真的是精彩绝伦，超乎想象，这一本书理所应当有更多的人来读。它受到的关注太少了。</p>
<p>​    而我所要说的《你往何处去》，则是他在1895年创作的，一部颇具异域风情的小说。</p>
<h2 id="关于这本书"><a href="#关于这本书" class="headerlink" title="关于这本书"></a><font color=darkmagenta>关于这本书</font></h2><p>​    精彩绝伦，妙不可言，难以想象，震撼人心。我认为这一本书很合口味。古罗马距离我们很遥远了，很多人提到她，都是感到无比地陌生。我喜欢罗马，但是我喜欢的，更多的是那一个东方的罗马，是那个君士坦丁堡作为首都的罗马帝国，是那一个和萨珊波斯鏖战百年，教化了斯拉夫人，抵挡了阿拉伯人入侵的罗马。而对于那一个古罗马，我也是感到陌生。</p>
<p>​    显克维奇的笔下，这个古老的国度仿佛就已经展现在了眼前。我看到了暴君尼禄的荒淫无道，恬不知耻，滑稽可笑，我看见了众多的大臣不过是腐败堕落的怕马屁之徒（<strong>想到了语文课上讲的，如果说这些人都是一群追逐利益的人，那么这个国家也就离灭亡不远了</strong>），我看见了那些见利忘义的小人，我看见了基督徒们不畏强权，坦然受死，我看见了一个叛徒的悔过和觉悟，我看见了一位信奉基督教的少女虔诚的信仰和自重，我看见了一个残忍的罗马贵族青年如何如何变成一位虔诚善良的基督徒，和另一人共渡难关。当我一页页翻完了这本书，我感觉好像在那一个世界活过了一般（因此我赶紧去玩了一把欧陆风云4的帝国风云mod，享受了罗马帝国征服蛮子的乐趣）。</p>
<p>​    在我看来，这本有着五个最为主要的人物，男主角维尼裘斯，女主角黎吉亚，维尼裘斯叔父斐特洛纽斯，罗马皇帝尼禄，希腊哲学家基罗。维尼裘斯的转变是作者花了大量篇幅描写的一处，也是相当精彩的一部分，最终终于在黎吉亚的影响下，成为了虔诚的基督徒。斐特洛纽斯，尼禄，基罗则是主要在推动剧情。基罗无论是在前期还是后期，他的作用都是非常明显，文章重大事件的推动，甚至翻转，都是少不了他的参与。他本人或许很难给读者留下很好的印象，但是我相信在竞技场他所做的事情，无疑震撼了无数人：</p>
<blockquote>
<p>……他们没有在笑，因为那个希腊人脸上的表情是那么令人害怕，就像是他自己被大火烧着了一般，那样的痛苦和害怕，他的脸已经扭曲得不成样子了，只见他猛地站了起来，向上伸展自己的胳膊，口中发出悲痛欲绝的圣耀魂，叫道：“主啊，宽恕我吧，戈劳库斯”</p>
<p>……</p>
<pre><code>“罗马的居民们，你们被骗了，我可以用我的性命担保，这里所有牺牲的人都是无辜的，并且我知道纵火的人，他就是——”
</code></pre>
<p>​    他将自己的手指向皇帝。</p>
</blockquote>
<p>​    我向这么精彩的场面，是显克维奇小说能够如此受到欢迎的原因。</p>
<p>​    我读完这个本书，良久不能平静，黎吉亚和维尼裘斯的爱情令人感慨万分。当我从书中走出的时候，我的的确确有一种重生之感。两个人的感情故事让我觉得真的是万分不易，心情也是有一些沉闷。闭上眼睛，我还能想起书中所描写的场面。显克维奇的小说真的是充满了魅力（就是现在网上买另外几本有一些贵，我三年前68买的火与剑小说现在涨了好多）。</p>
<pre><code> 或许，暂时就这么多可说的了吧
</code></pre>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>显克维奇作品选读</tag>
      </tags>
  </entry>
  <entry>
    <title>LGP2471</title>
    <url>/2021/11/17/LGP2471/</url>
    <content><![CDATA[<h1 id="LGP2471"><a href="#LGP2471" class="headerlink" title="LGP2471"></a><a href="https://www.luogu.com.cn/problem/P2471">LGP2471</a></h1><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color=darkmagenta><strong>Analysis</strong></font></h2><p>​    这道题要算到区间的最大值，而且又不需要进行修改，所以说就直接联想到了用ST表来对区间的最大值进行求解。</p>
<p>​    我们假设左边的年限$x$对应的序号为$l$,右边$y$为$r$,因为年限是按照顺序输入的，所以说可以直接用lower_bound进行查找，分成四种情况处理</p>
<ul>
<li><p>左右区间的降水量都未知</p>
<ul>
<li>直接输出maybe</li>
</ul>
</li>
<li><p>左区间已知，右区间未知</p>
<ul>
<li>如果$r==l+1$输出maybe(二者之间都是未知的)</li>
<li>先计算$[l+1,r]$区间的最大值，然后对于最大值和和左区间进行比较，如果说左区间的值小于最大值，输出false</li>
<li>否则的话就直接输出maybe</li>
</ul>
</li>
<li><p>左区间未知，右区间已知</p>
<ul>
<li>如果说$l==r$输出maybe(二者之间都是未知的)</li>
<li>计算$[l,r-1]$区间的最大值，然后最大值和右区间进行比较，如果说右区间的值小于最大值，输出false</li>
<li>否则的话输出maybe</li>
</ul>
</li>
<li><p>左右区间都已知</p>
<ul>
<li><p>如果说$r==l+1$并且$y==x+1$输出true</p>
</li>
<li><p>否则输出maybe</p>
</li>
<li><p>如果说左区间的值小于等于右区间的值的话，直接输出false</p>
</li>
<li><p>计算$[l+1,r-1]$区间的最大值，然后和右区间的值进行比较，如果说大于的话就直接输出false</p>
</li>
<li><p>然后看$r-l==y-x$是否成立（中间没有位置的），成立输出true</p>
</li>
<li><p>否则输出maybe</p>
</li>
</ul>
</li>
</ul>
<h2 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a><font color=darkmagenta><strong>Codes</strong></font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int64 long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (((x)&gt;(y))?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (((x)&lt;(y))?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqar(x) (x)*(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swp(x,y) x^=y,y^=x,x^=y</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxn 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> logn 20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="keyword">int</span> val[Maxn];</span><br><span class="line"><span class="keyword">int</span> LG[Maxn];</span><br><span class="line"><span class="keyword">int</span> year[Maxn];</span><br><span class="line"><span class="keyword">int</span> ST[Maxn][logn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    N=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;year[i]=<span class="built_in">read</span>();val[i]=<span class="built_in">read</span>();ST[i][<span class="number">0</span>]=val[i];&#125;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    M=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">        <span class="keyword">int</span> y=<span class="built_in">read</span>(),x=<span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> posl=<span class="built_in">lower_bound</span>(year+<span class="number">1</span>,year+<span class="number">1</span>+N,y)-year;</span><br><span class="line">        <span class="keyword">int</span> posr=<span class="built_in">lower_bound</span>(year+<span class="number">1</span>,year+<span class="number">1</span>+N,x)-year;</span><br><span class="line">        <span class="comment">//二者都不已知</span></span><br><span class="line">        <span class="keyword">if</span>((posl==N+<span class="number">1</span>||y!=year[posl])&amp;&amp;(posr==N+<span class="number">1</span>||x!=year[posr]))&#123;cout&lt;&lt;<span class="string">&quot;maybe&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="comment">//l已知 r未知</span></span><br><span class="line">        <span class="keyword">if</span>((posl!=N+<span class="number">1</span>&amp;&amp;y==year[posl])&amp;&amp;(posr==N+<span class="number">1</span>||x!=year[posr]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(posl+<span class="number">1</span>==posr)&#123;cout&lt;&lt;<span class="string">&quot;maybe&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> tmp=LG[(posr<span class="number">-1</span>)-(posl+<span class="number">1</span>)+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> maxv=<span class="built_in">max</span>(ST[posl+<span class="number">1</span>][tmp],ST[(posr<span class="number">-1</span>)-(<span class="number">1</span>&lt;&lt;tmp)+<span class="number">1</span>][tmp]);</span><br><span class="line">                <span class="keyword">if</span>(maxv&gt;=val[posl])&#123;cout&lt;&lt;<span class="string">&quot;false&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;cout&lt;&lt;<span class="string">&quot;maybe&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//l未知,r已知</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((posl==N+<span class="number">1</span>||y!=year[posl])&amp;&amp;(posr!=N+<span class="number">1</span>&amp;&amp;x==year[posr]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(posl==posr)&#123;cout&lt;&lt;<span class="string">&quot;maybe&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=LG[(posr<span class="number">-1</span>)-posl+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> maxv=<span class="built_in">max</span>(ST[posl][tmp],ST[(posr<span class="number">-1</span>)-(<span class="number">1</span>&lt;&lt;tmp)+<span class="number">1</span>][tmp]);</span><br><span class="line">                <span class="keyword">if</span>(maxv&gt;=val[posr])&#123;cout&lt;&lt;<span class="string">&quot;false&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;cout&lt;&lt;<span class="string">&quot;maybe&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//二者都已知</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(val[posl]&lt;=val[posr])&#123;cout&lt;&lt;<span class="string">&quot;false&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(posl+<span class="number">1</span>==posr)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x==y+<span class="number">1</span>)&#123;cout&lt;&lt;<span class="string">&quot;true&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;cout&lt;&lt;<span class="string">&quot;maybe&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp=LG[(posr<span class="number">-1</span>)-(posl+<span class="number">1</span>)+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> maxv=<span class="built_in">max</span>(ST[posl+<span class="number">1</span>][tmp],ST[(posr<span class="number">-1</span>)-(<span class="number">1</span>&lt;&lt;tmp)+<span class="number">1</span>][tmp]);</span><br><span class="line">                <span class="keyword">if</span>(maxv&gt;=val[posr])&#123;cout&lt;&lt;<span class="string">&quot;false&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(posr-posl==x-y)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;true&quot;</span>&lt;&lt;endl;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;cout&lt;&lt;<span class="string">&quot;maybe&quot;</span>&lt;&lt;endl;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,sign=<span class="number">1</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)sign=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+c<span class="number">-48</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LG[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;Maxn;i++)&#123;LG[i]=LG[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;logn;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&lt;=N;j++)&#123;</span><br><span class="line">            ST[j][i]=<span class="built_in">max</span>(ST[j][i<span class="number">-1</span>],ST[j+(<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>)][i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷练习题</category>
      </categories>
      <tags>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title>二分图匹配</title>
    <url>/2021/09/05/%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="二分图的匹配"><a href="#二分图的匹配" class="headerlink" title="二分图的匹配"></a>二分图的匹配</h1><h2 id="二分图的最大匹配"><a href="#二分图的最大匹配" class="headerlink" title="二分图的最大匹配"></a><font color=DarkMagenta><strong>二分图的最大匹配</strong></font></h2><h3 id="增广路"><a href="#增广路" class="headerlink" title="增广路"></a><font color=1453ad><strong>增广路</strong></font></h3><p>一条匹配边与非匹配边交替出现的路径叫做增广路</p>
<p>匹配边：两个点已经处于已选集合里面的边</p>
<p>非匹配边：这条边有个点不属于已经选过的集合里面的边</p>
<h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a><font color=#1453ad><strong>匈牙利算法</strong></font></h3><p>在二分图里面交替找增广路的算法，然后把增广路取反直到不存在增广路为止</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">			vis[v]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(!match[v]||<span class="built_in">dfs</span>(match[v]))&#123;</span><br><span class="line">                 <span class="comment">//这里对应着两种情况，一种是还没有匹配，另一种是可以腾出空间</span></span><br><span class="line">				match[v]=u;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">        <span class="comment">//这个N是左边的端点</span></span><br><span class="line">        <span class="keyword">if</span>(dfs[i])ans++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>关于质数和约数的一个小总结</title>
    <url>/2021/09/05/%E5%85%B3%E4%BA%8E%E8%B4%A8%E6%95%B0%E5%92%8C%E7%BA%A6%E6%95%B0%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="约数"><a href="#约数" class="headerlink" title="约数"></a><font color=darkmagenta><strong>约数</strong></font></h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font color=#1453ad>定义</font></h3><p>​    若整数n能够整除d，则d是n的约数，n是d的倍数，记作d|n</p>
<h3 id="基本性质"><a href="#基本性质" class="headerlink" title="基本性质"></a><font color=1453ad>基本性质</font></h3><ul>
<li>唯一分解定理：任何一个正整数都可以分解为$p_1^{b_1}*p_2^{b_2}*p_3^{b_3}<em>……</em>p_n^{b_n}$（为了后面的叙述，若$i&lt;j,p_i&lt;p_j$）</li>
<li>它的正约数个数：$\prod_{i=1}^{m}(b_i+1)$</li>
<li>$lcm(a,b)<em>gcd(a,b)=a</em>b$</li>
</ul>
<h3 id="基本算法和板子"><a href="#基本算法和板子" class="headerlink" title="基本算法和板子"></a><font color=1453ad>基本算法和板子</font></h3><ul>
<li>试除法： 用来求解一个数的正约数集合，时间复杂度：$\Theta(\sqrt n)$</li>
<li>更相减损术： 当使用高精度的时候，使用它来求解最大公约数很方便</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!y)?x:<span class="built_in">gcd</span>(y,x-y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>辗转相除法：比更相减损术更快</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (!y)?x:<span class="built_in">gcd</span>(y,x%y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然了，有一个速度更快的二进制版本</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>)<span class="keyword">return</span> y;</span><br><span class="line">    <span class="keyword">if</span>(y==<span class="number">0</span>)<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;(x&amp;<span class="number">1</span>)==<span class="number">0</span>;i++)x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;(y&amp;<span class="number">1</span>)==<span class="number">0</span>;j++)y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;j)i=j;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;y)&#123;x^=y;y^=x;x^=y;&#125;</span><br><span class="line">        <span class="keyword">if</span>(!(x%=y))<span class="keyword">return</span> y&lt;&lt;i;</span><br><span class="line">        <span class="keyword">while</span>(!(x&amp;<span class="number">1</span>))x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="素数"><a href="#素数" class="headerlink" title="素数"></a><font color=darkmagenta><strong>素数</strong></font></h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a><font color=1453ad><strong>定义</strong></font></h3><p>这个很简单吧，小学就学过的</p>
<h3 id="基本定理"><a href="#基本定理" class="headerlink" title="基本定理"></a><font color=1453ad><strong>基本定理</strong></font></h3><ul>
<li>唯一分解定理（同上）</li>
<li>威尔逊定理：如果$(p-1)!\equiv-1(mod\ p)$，则p为质数</li>
<li>质数有无穷多个</li>
<li>欧拉定理这些的就放在同余那一块来讲了</li>
</ul>
<p>数论的板子都在这里面来看吧</p>
<p><a href="https://perisiely.github.io/2019/09/07/%E6%95%B0%E8%AE%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%BF%E5%AD%90/">数论板子</a></p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>质数</tag>
        <tag>约数</tag>
        <tag>欧拉函数</tag>
        <tag>欧拉筛</tag>
      </tags>
  </entry>
  <entry>
    <title>LGP4588</title>
    <url>/2021/11/17/LGP4588/</url>
    <content><![CDATA[<h1 id="LGP4588"><a href="#LGP4588" class="headerlink" title="LGP4588"></a><a href="https://www.luogu.com.cn/problem/P4588">LGP4588</a></h1><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a><font color=darkmagenta><strong>Analysis</strong></font></h2><p>​    最开始拿到这一道题目的时候第一个反应是暴力求解问题。遇见除法的时候就直接乘上逆元来取模</p>
<p>​    但是$\exist x, ax\equiv1(mod\ n)\iff gcd(a,n)=1$</p>
<blockquote>
<p>对于每一组输入，第一行是两个数字 Q,M</p>
</blockquote>
<p>​    这个M是输入给的，不保证上面的条件。</p>
<p>​    这个时候就要转换思路了</p>
<p>​    <s>我们考虑高精度直接硬算</s></p>
<p>​    两个操作每次就只修改一个数(单点修改)。</p>
<p>​    同余的性质：两个数相乘再去模等于两个数分别取模再相乘再取模（可以左右两边的结果合并）</p>
<p>​    所以说可以考虑用线段树进行操作，选择以时间为轴（能想出来这种方法的真是神仙），这棵线段树应当有$n$个叶子节点，初始值为$1$，假如第$i$次操作是$1$操作，将第$i$个节点转换成为$m$,假如是$2$操作，将$pos$位置改成$1$,每次输出根节点的值就好了</p>
<h2 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a><font color=darkmagenta><strong>Codes</strong></font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int64 long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (((x)&gt;(y))?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (((x)&lt;(y))?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqar(x) (x)*(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swp(x,y) x^=y,y^=x,x^=y</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxn 100005</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Segment_tree</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    Int64 databank[Maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">    Int64 Mod;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetMod</span><span class="params">(<span class="keyword">int</span> M)</span></span>&#123;Mod=M;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> nowpos)</span></span>&#123;</span><br><span class="line">        databank[nowpos]=(databank[nowpos&lt;&lt;<span class="number">1</span>]*databank[nowpos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%Mod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> nowpos,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L==R)&#123;databank[nowpos]=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> mid=L+R&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">init</span>(nowpos&lt;&lt;<span class="number">1</span>,L,mid);</span><br><span class="line">        <span class="built_in">init</span>(nowpos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R);</span><br><span class="line">        <span class="built_in">pushup</span>(nowpos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> nowpos,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> pur,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L==R&amp;&amp;L==pur)&#123;</span><br><span class="line">            databank[nowpos]=val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=L+R&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pur&lt;=mid)<span class="built_in">modify</span>(nowpos&lt;&lt;<span class="number">1</span>,L,mid,pur,val);</span><br><span class="line">        <span class="keyword">if</span>(pur&gt;mid)<span class="built_in">modify</span>(nowpos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,R,pur,val);</span><br><span class="line">        <span class="built_in">pushup</span>(nowpos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;cout&lt;&lt;databank[<span class="number">1</span>]&lt;&lt;endl;&#125;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;<span class="keyword">char</span> c=<span class="built_in">getchar</span>();<span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+c<span class="number">-48</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">read</span>(t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> q,m;<span class="built_in">read</span>(q);<span class="built_in">read</span>(m);</span><br><span class="line">        S.<span class="built_in">SetMod</span>(m);</span><br><span class="line">        S.<span class="built_in">init</span>(<span class="number">1</span>,<span class="number">1</span>,q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> op,v;<span class="built_in">read</span>(op);<span class="built_in">read</span>(v);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">1</span>)S.<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,q,i,v),S.<span class="built_in">output</span>();</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                S.<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,q,v,<span class="number">1</span>);</span><br><span class="line">                S.<span class="built_in">output</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷练习题</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论入门</title>
    <url>/2021/09/05/%E5%8D%9A%E5%BC%88%E8%AE%BA%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="博弈论（Game-Theory）"><a href="#博弈论（Game-Theory）" class="headerlink" title="博弈论（Game Theory）"></a><font color=blue>博弈论（Game Theory）</font></h1><p>首先先说两个定义<br>N状态:<font color=red>前面的一个玩家</font>必胜<br>P状态: <font color=red>后面一个玩家</font>必胜</p>
<h2 id="巴什博弈-（Bush-Game）"><a href="#巴什博弈-（Bush-Game）" class="headerlink" title="巴什博弈 （Bush Game）"></a>巴什博弈 （Bush Game）</h2><p>有一堆数量为n的物体，轮流拿，至少拿1个，至多拿k个(N&gt;K);<br>如果<code>n%（k+1）==0</code>，那么先手必败。<br><s>这一切是显而易见，毫无疑问的</s></p>
<blockquote>
<p>一道例题<br>Tang and Jiang are good friends. To decide whose treat it is for dinner, they are playing a game. Specifically, Tang and Jiang will alternatively write numbers (integers) on a white board. Tang writes first, then Jiang, then again Tang, etc… Moreover, assuming that the number written in the previous round is X, the next person who plays should write a number Y such that 1 &lt;= Y - X &lt;= k. The person who writes a number no smaller than N first will lose the game. Note that in the first round, Tang can write a number only within range [1, k] (both inclusive). You can assume that Tang and Jiang will always be playing optimally, as they are both very smart students.</p>
</blockquote>
<p>这一道题目大意上和Bush Game 差不多，但是不同的是它里面说的是写不出不小于n的就输了，那么必胜的时候就是你已经写出了n-1的时候。所以此时如果<code>(n-1)%(k+1)==0</code>那么先手必定输，否则就是后手输，因为先手那一次后可已转换为第一种情况</p>
<h2 id="尼姆博弈-（Nim-Game）"><a href="#尼姆博弈-（Nim-Game）" class="headerlink" title="尼姆博弈 （Nim Game）"></a>尼姆博弈 （Nim Game）</h2><p>有n堆物体，每一堆的数量为a[i]个，每一次一个人任选一堆取出任意个（不能为0）<br>设k为每一堆异或的结果，如果<code>k==0</code>，那么先手必定失败，否则先手必定胜利。<br>这样来想，把每一堆的数量转换成二进制然后竖着来最低位对齐。如果说<code>k==0</code>,那么这意味这每一个列的1的个数一定会是偶数个。而第一个人取走了一些以后呢，这意味着一定一些列的1的个数为变成奇数个，那么k一定就不再等于0了。而此时后手的人只要把异或的值修正为0就可以了。<br>因为<font color=red>k不等于0了，那么这就说明k的最高位一定会是1，而这个最高位的1一定会是a[i]中的对应位上的1提供的</font>。<br>而根据异或的性质，k和a[i]异或结果为其他的异或结果。<br>我们可以在a[i]中减去一些值，是a[i]最终等于k和a[i]异或的结果，<font color=red>又因为k最高位的1是由a[i]提供的，那么那里一定会变成0，就一定会比a[i]小，而只要把这里减掉，k就又会等于0了</font></p>
<h2 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h2><h3 id="公平组合游戏"><a href="#公平组合游戏" class="headerlink" title="公平组合游戏"></a>公平组合游戏</h3><p>1.双方交替来进行；<br>2.游戏进行的任意时刻，可以执行的合法行动与哪一个玩家执行无关；<br>3.当玩家无法行动的时候，就判负</p>
<h3 id="mex运算"><a href="#mex运算" class="headerlink" title="mex运算"></a>mex运算</h3><p>$$<br>mex(S)=min{x|x\in N,x\notin S}<br>$$</p>
<h3 id="SG函数-1"><a href="#SG函数-1" class="headerlink" title="SG函数"></a>SG函数</h3><p>对于任意状态下的x<br>$$<br>SG(x)=mex{SG(y)|y是x的后继状态}<br>$$<br>对于终止状态，SG值为0。</p>
<blockquote>
<p>如果某一状态后继SG有0，则当前状态为N<br>如果当前状态所有后继SG不为0，则当前为P;</p>
</blockquote>
<p>好的，既然已经知道了SG函数是什么，那么就有一道题了。</p>
<h4 id="移棋子游戏"><a href="#移棋子游戏" class="headerlink" title="移棋子游戏"></a>移棋子游戏</h4><blockquote>
<p><font color=blue><strong>Description</strong></font></p>
</blockquote>
<p>给定一个有N个节点的DAG图，图上某些节点上面有棋子。两名玩家交替移动棋子，玩家每一次可以将任意一颗棋子沿着有向边移动到下一个节点，当无法移动的时候，就输掉了游戏，假设双方都足够聪明，问先手必胜还是后手必胜。</p>
<blockquote>
<p><font color=blue><strong>Input</strong></font></p>
</blockquote>
<p>第一行三个整数N,M,K,表示N个节点M条边K个棋子。接下来M行，每行两个整数x,y,代表x节点到y节点的有向边再接下来K行，表示K个棋子所在的节点编号。</p>
<blockquote>
<p><font color=blue><strong>output</strong></font></p>
</blockquote>
<p>先手胜输出”win”,否则输出”lose”</p>
<blockquote>
<p><font color=blue><strong>Sample Input</strong></font></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6 8 4</span><br><span class="line">2 1</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br><span class="line">1 5</span><br><span class="line">4 5</span><br><span class="line">1 3</span><br><span class="line">3 5</span><br><span class="line">3 6</span><br><span class="line">1 2 4 6</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color=blue><strong>Sample Output</strong></font></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win</span><br></pre></td></tr></table></figure>

<p>这应该是我第一次这么抄题吧。<br>DAG图，看到这个应该回想起拓扑排序，其次，因为没有后继的点$SG$值为0，而每一个点的$SG$值又是有它的后继决定的。如果它的后继没有弄完，那么就不可以算。这很像拓扑排序把入度为0的点push进队列。<br>因此不难想到这一题可以用类似于拓扑排序的方法来做。我们需要存两个图，正向的和反向的。正向的图用来寻找这一个点的后继获取这一个点的$SG$值，反向的用来找祖宗，修改祖宗的出度，并把出度为0的祖宗push进入队列<br>因为有拓扑排序的基础，所以这一道题可以比较容易的做出来了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2003</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;G[maxn];<span class="comment">//正着存图</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;G_[maxn];<span class="comment">//反着存图</span></span><br><span class="line"><span class="keyword">int</span> chess[maxn],SG[maxn];<span class="comment">//记录棋子的位置 ,SG函数值 </span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn*<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,outdgr[maxn];<span class="comment">//记录点，边，出度 </span></span><br><span class="line"><span class="keyword">int</span> k; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!outdgr[i])&#123;</span><br><span class="line">			Q.<span class="built_in">push</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;	</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));	</span><br><span class="line">		<span class="keyword">int</span> u=Q.<span class="built_in">front</span>();Q.<span class="built_in">pop</span>();</span><br><span class="line">		vector&lt;<span class="keyword">int</span>&gt;::iterator iter=G[u].<span class="built_in">begin</span>();</span><br><span class="line">		<span class="keyword">int</span> maxsg=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(iter!=G[u].<span class="built_in">end</span>())&#123;</span><br><span class="line">			maxsg=<span class="built_in">max</span>(maxsg,SG[*iter]);</span><br><span class="line">			vis[SG[*iter]]=<span class="literal">true</span>;</span><br><span class="line">			iter++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> j;</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=maxsg+<span class="number">1</span>;j++)<span class="keyword">if</span>(!vis[j])<span class="keyword">break</span>;</span><br><span class="line">		SG[u]=j;<span class="comment">//得到这一个点的SG值 </span></span><br><span class="line">		vector&lt;<span class="keyword">int</span>&gt;::iterator iter_=G_[u].<span class="built_in">begin</span>();</span><br><span class="line">		<span class="keyword">while</span>(iter_!=G_[u].<span class="built_in">end</span>())&#123;</span><br><span class="line">			outdgr[*iter_]--;</span><br><span class="line">			<span class="keyword">if</span>(!outdgr[*iter_])Q.<span class="built_in">push</span>(*iter_);</span><br><span class="line">			iter_++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=SG[chess[<span class="number">1</span>]];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=k;i++)ans^=SG[chess[i]];</span><br><span class="line">	<span class="keyword">if</span>(!ans)<span class="built_in">printf</span>(<span class="string">&quot;lose\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;win\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(outdgr,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(outdgr));</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> u,v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">		G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">		G_[v].<span class="built_in">push_back</span>(u); </span><br><span class="line">		outdgr[u]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;chess[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>那么，That’s all.</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>搬运自旧博客</tag>
        <tag>博弈论</tag>
        <tag>SG函数</tag>
      </tags>
  </entry>
  <entry>
    <title>大学第一篇博客</title>
    <url>/2021/09/16/%E5%A4%A7%E5%AD%A6%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>重新弄了一下博客，也没有什么想说的。完了，只是说明我还活着</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>Catalan Number入门</title>
    <url>/2021/09/05/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font color=red>定义</font></h2><p>这个cn啊，是组合数学里面经常会用到的东西，比如说：</p>
<ol>
<li>让你算算二叉树的形态</li>
<li>又让你算算合法的括号序列</li>
<li>又或者让你算算出入栈的合法顺序</li>
<li>还可能让你去说说把多边形割成三角形方法</li>
</ol>
<p>综上所述就是18年初赛的第8题</p>
<h2 id="于是有的人弄出来了它的式子"><a href="#于是有的人弄出来了它的式子" class="headerlink" title="于是有的人弄出来了它的式子"></a><font color=red>于是有的人弄出来了它的式子</font></h2><p>我们设为f(n),那么有<br>$$<br>f(n)=\sum^{n-1}<em>{i=0}f(i)\cdot f(n-i-1)<br>$$<br>当然人们并不会满足一个式子，于是就有了第二个<br>$$<br>f(n)=f(n-1)\cdot \frac{4n-2}{n+1}<br>$$<br>但是因为我们没有通项式，所以必须要一个一个的算<br>与是<font color=orange >通项式</font>就来了<br>$$<br>f(n)=\frac{C^{n}</em>{2n}}{n+1}<br>$$<br>当然如果我们进行一点变换的话就可以得到它：<br>$$<br>f(n)=C^{n}<em>{2n}-C^{n-1}</em>{2n}<br>$$</p>
<p>这个式子是一个好式子，面对问题是往往很容易就可以化成这一个形式，然后就发现了这是卡特兰数的题</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><font color=blue>例题</font></h2><h3 id="1-栈（洛谷P1044）"><a href="#1-栈（洛谷P1044）" class="headerlink" title="1.栈（洛谷P1044）"></a><font color=darkmagenta><strong>1.栈（洛谷P1044）</strong></font ></h3><p><a href="https://www.luogu.org/problemnew/show/P1044">洛谷P1044</a><br>这一道题很容易就可以看出来这一个是Cn的模板题<br>那么就是这样的了<br>贴代码(用的是第二个式子)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//洛谷的卡特兰数模板题 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getcn</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		f[i]=((<span class="number">4</span>*i<span class="number">-2</span>)*f[i<span class="number">-1</span>])/(i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,f[n]);</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="built_in">getcn</span>(n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-矩阵（洛谷P1722）"><a href="#2-矩阵（洛谷P1722）" class="headerlink" title="2.矩阵（洛谷P1722）"></a><font color=darkmagenta><strong>2.矩阵（洛谷P1722）</strong></font></h3><p><a href="https://www.luogu.org/problemnew/show/P1722">洛谷P1722</a><br>这一道题啊，可以看出来是一道卡特兰数的题，要求我们去模100，那么向第一个式子那样没有除法，只有加和乘的方法自然就是首选了，既然如此就用第一种方法写Cn就行了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//矩阵 洛谷P1722 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod 100</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	f[<span class="number">0</span>]=f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">			(f[i]+=f[j]*f[i-j<span class="number">-1</span>])%=Mod;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,f[n]);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="3-树屋阶梯-洛谷P2532"><a href="#3-树屋阶梯-洛谷P2532" class="headerlink" title="3.树屋阶梯(洛谷P2532)"></a><font color=darkmagenta><strong>3.树屋阶梯(洛谷P2532)</strong></font></h3><p><a href="https://www.luogu.org/problemnew/show/P2532">洛谷P2532</a><br>这一道题啊，首先你这么考虑，任意选中其中一阶阶梯，然后呢就把整个阶梯分成了它上面的阶梯和它右面的阶梯。每一阶阶梯都这么去考虑，写出整个式子就会发现是卡特兰数了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//洛谷P2532 树屋</span></span><br><span class="line"><span class="comment">//这道题不得不用高精度了 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ln</span>&#123;</span> <span class="comment">// 整数，最大可存储一万位数字  </span></span><br><span class="line">	<span class="keyword">int</span> val[maxn];</span><br><span class="line">	<span class="keyword">int</span> <span class="keyword">operator</span> [](<span class="keyword">const</span> <span class="keyword">int</span> &amp;ref)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val[ref];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Lin</span><span class="params">()</span></span>&#123; <span class="comment">// 读入  </span></span><br><span class="line">		<span class="keyword">char</span> S[maxn];</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,S);</span><br><span class="line">		<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(val));</span><br><span class="line">		<span class="keyword">int</span> lenS=<span class="built_in">strlen</span>(S);</span><br><span class="line">		val[<span class="number">0</span>]=lenS;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=lenS<span class="number">-1</span>,j=<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--,j++) val[j]=S[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">StrIn</span><span class="params">(<span class="keyword">char</span> *S)</span></span>&#123;</span><br><span class="line">		<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(val));</span><br><span class="line">		<span class="keyword">int</span> lenS=<span class="built_in">strlen</span>(S);</span><br><span class="line">		val[<span class="number">0</span>]=lenS;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=lenS<span class="number">-1</span>,j=<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--,j++) val[j]=S[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Lout</span><span class="params">()</span></span>&#123; <span class="comment">// 输出  </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=val[<span class="number">0</span>];i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">		 <span class="built_in">putchar</span>(val[i]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> Ln &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 判断是否等于  </span></span><br><span class="line">		<span class="keyword">if</span>(val[<span class="number">0</span>]!=obj[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=val[<span class="number">0</span>];i++) <span class="keyword">if</span>(val[i]!=obj[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Ln &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 判断是否小于   </span></span><br><span class="line">		<span class="keyword">if</span>(val[<span class="number">0</span>]&gt;obj[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>((*<span class="keyword">this</span>)==obj) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(val[<span class="number">0</span>]&lt;obj[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=val[<span class="number">0</span>];i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(val[i]&gt;obj[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">if</span>(val[i]&lt;obj[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &gt;(<span class="keyword">const</span> Ln &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 判断是否大于   </span></span><br><span class="line">		Ln cmp=*<span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">if</span>(cmp &lt; obj || cmp == obj) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Ln <span class="keyword">operator</span> +(<span class="keyword">const</span> Ln &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 加法运算  </span></span><br><span class="line">		Ln cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		<span class="keyword">int</span> pos=<span class="built_in">max</span>(val[<span class="number">0</span>],obj[<span class="number">0</span>]),add=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pos;i++)&#123;</span><br><span class="line">			cmp.val[i]=val[i]+obj[i]+add;</span><br><span class="line">			add=cmp.val[i]/<span class="number">10</span>;</span><br><span class="line">			cmp.val[i]=cmp.val[i]%<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(add&gt;<span class="number">0</span>) cmp.val[++pos]=add;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Ln <span class="keyword">operator</span> -(<span class="keyword">const</span> Ln &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 减法运算 只能减出正数  </span></span><br><span class="line">		Ln cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		<span class="keyword">int</span> pos=val[<span class="number">0</span>],rent=<span class="number">0</span>; <span class="comment">// rent 借位  </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pos;i++)&#123;</span><br><span class="line">			cmp.val[i]=val[i]-obj[i]-rent;</span><br><span class="line">			<span class="keyword">if</span>(cmp.val[i]&lt;<span class="number">0</span>) &#123;cmp.val[i]+=<span class="number">10</span>;rent=<span class="number">1</span>;&#125;</span><br><span class="line">			<span class="keyword">else</span> rent=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp.val[pos]==<span class="number">0</span> &amp;&amp; pos&gt;<span class="number">1</span>) pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Ln <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">int</span> &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 ×低精度 </span></span><br><span class="line">		<span class="comment">// 对于高精度数 a 和低精度数 b   </span></span><br><span class="line">		<span class="comment">// 这个算法可以写成 a=a^b </span></span><br><span class="line">		Ln cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		<span class="keyword">int</span> pos=val[<span class="number">0</span>]; <span class="comment">// 进位 </span></span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> add=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pos;i++)&#123;</span><br><span class="line">			cmp.val[i]=val[i]*obj+add;</span><br><span class="line">			add=cmp.val[i]/<span class="number">10</span>;</span><br><span class="line">			cmp.val[i]=cmp.val[i]%<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(add&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			cmp.val[++pos]=add%<span class="number">10</span>;</span><br><span class="line">			add/=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp.val[pos]==<span class="number">0</span> &amp;&amp; pos&gt;<span class="number">1</span>) pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Ln <span class="keyword">operator</span> *(<span class="keyword">const</span> Ln &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 ×高精度 </span></span><br><span class="line">		<span class="comment">// 对于高精度数 a 和高精度 b   </span></span><br><span class="line">		<span class="comment">// 这个算法不能写成 a=a*b </span></span><br><span class="line">		Ln cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		<span class="keyword">int</span> pos=val[<span class="number">0</span>]+obj[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=val[<span class="number">0</span>];i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=obj[<span class="number">0</span>];j++)&#123;</span><br><span class="line">				cmp.val[i+j<span class="number">-1</span>]+=val[i]*obj[j];</span><br><span class="line">				cmp.val[i+j]+=cmp.val[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">				cmp.val[i+j<span class="number">-1</span>]=cmp.val[i+j<span class="number">-1</span>]%<span class="number">10</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp.val[pos]==<span class="number">0</span> &amp;&amp; pos&gt;<span class="number">1</span>) pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Ln <span class="keyword">operator</span> /(<span class="keyword">const</span> <span class="keyword">int</span> &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 ÷低精度  </span></span><br><span class="line">		Ln cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		<span class="keyword">int</span> pos=val[<span class="number">0</span>],div=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">			cmp.val[i]=(div*<span class="number">10</span>+val[i])/obj;</span><br><span class="line">			div=(div*<span class="number">10</span>+val[i])%obj;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp[pos]==<span class="number">0</span> &amp;&amp; pos&gt;<span class="number">1</span>) pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> <span class="keyword">operator</span> %(<span class="keyword">const</span> <span class="keyword">int</span> &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 % 低精度  </span></span><br><span class="line">		<span class="keyword">int</span> pos=val[<span class="number">0</span>],div=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;=<span class="number">1</span>;i--) div=(div*<span class="number">10</span>+val[i])%obj;</span><br><span class="line">		<span class="keyword">return</span> div;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Ln <span class="keyword">operator</span> /(<span class="keyword">const</span> Ln &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 ÷高精度  </span></span><br><span class="line">		Ln cmp,t_cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		<span class="built_in">memset</span>(t_cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(t_cmp.val));</span><br><span class="line">		<span class="keyword">int</span> pos=val[<span class="number">0</span>];</span><br><span class="line">		cmp.val[<span class="number">0</span>]=<span class="number">1</span>;cmp.val[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		t_cmp=cmp;</span><br><span class="line">		<span class="keyword">if</span>((*<span class="keyword">this</span>)&lt;obj) <span class="keyword">return</span> cmp; <span class="comment">// 小于除数直接返回 0  </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">			t_cmp=t_cmp*<span class="number">10</span>;</span><br><span class="line">			t_cmp.val[<span class="number">1</span>]=val[i];</span><br><span class="line">			<span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(t_cmp&gt;obj || t_cmp==obj)</span><br><span class="line">			&#123;</span><br><span class="line">				t_cmp=t_cmp-obj;</span><br><span class="line">				k++;</span><br><span class="line">			&#125;</span><br><span class="line">			cmp.val[i]=k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp.val[pos]==<span class="number">0</span> &amp;&amp; pos&gt;<span class="number">1</span>) pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Ln <span class="keyword">operator</span> %(<span class="keyword">const</span> Ln &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 % 高精度  </span></span><br><span class="line">		Ln t_cmp;</span><br><span class="line">		<span class="built_in">memset</span>(t_cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(t_cmp.val));</span><br><span class="line">		<span class="keyword">int</span> pos=val[<span class="number">0</span>];</span><br><span class="line">		t_cmp.val[<span class="number">0</span>]=<span class="number">1</span>;t_cmp.val[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>((*<span class="keyword">this</span>)&lt;obj) <span class="keyword">return</span> (*<span class="keyword">this</span>); <span class="comment">// 小于除数直接返回本身 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">			t_cmp=t_cmp*<span class="number">10</span>;</span><br><span class="line">			t_cmp.val[<span class="number">1</span>]=val[i];</span><br><span class="line">			<span class="keyword">while</span>(t_cmp&gt;obj || t_cmp==obj) t_cmp=t_cmp-obj;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> t_cmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Ln f[<span class="number">505</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	f[<span class="number">1</span>]=f[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		f[i]=(f[i<span class="number">-1</span>]*(<span class="number">4</span>*i<span class="number">-2</span>))/(i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	f[n].<span class="built_in">Lout</span>();</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>Catalan Number</tag>
        <tag>搬运自旧博客</tag>
      </tags>
  </entry>
  <entry>
    <title>同余总结</title>
    <url>/2021/09/05/%E5%90%8C%E4%BD%99%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<!---more--->

<h2 id="同余"><a href="#同余" class="headerlink" title="同余"></a><font color=darkmagenta><strong>同余</strong></font></h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font color=1453ad><strong>定义</strong></font></h3><p>若对于$a,b$两个整数，除以$m$的余数相等，则称$a$,$b$模$m$同余，记作$a\equiv b(mod\ m)$</p>
<h3 id="基本定理和性质"><a href="#基本定理和性质" class="headerlink" title="基本定理和性质"></a><font color=1453ad><strong>基本定理和性质</strong></font></h3><ul>
<li>逆元：若$a*x\equiv 1(mod\ p)$,$a$,$b$互质,则称x是a的逆元，记为$a^{-1}$</li>
<li>欧拉定理：若$a$,$m$互质，则$a^{\phi(m)}\equiv 1(mod \ m)$</li>
<li>扩展欧拉定理： $a^b\equiv a^{b\ mod\ \phi(m)+\phi(m)}(mod\ m)$</li>
<li>贝祖定理：对于任意的整数$a,b,\exists x,y,$使得$ax+by=gcd(a,b)$</li>
<li>对于方程$ax+by=c$有整数解，当且仅当$gcd(a,b)|c$</li>
</ul>
<h3 id="运用和板子"><a href="#运用和板子" class="headerlink" title="运用和板子"></a><font color=1453ad><strong>运用和板子</strong></font></h3><ul>
<li>扩展欧几里得算法：可以用来解决线性的同余方程</li>
<li>逆元：可以用来解决有除法有需要取模的问题</li>
<li>欧拉定理：可以通过欧拉函数来进行降幂操作</li>
</ul>
<p>板子仍然是去数论板子那一篇博客里面来看</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>同余</tag>
      </tags>
  </entry>
  <entry>
    <title>排列组合复习</title>
    <url>/2021/09/05/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<!---more--->

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>排列</tag>
        <tag>组合</tag>
        <tag>斯特林数</tag>
      </tags>
  </entry>
  <entry>
    <title>康托展开</title>
    <url>/2021/09/05/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/</url>
    <content><![CDATA[<p><s>按规矩，祭天 </s></p>
<p>今天加了的内容是康托展开，因为时间原因就不附上题目了<s>而且我也还没有做题</s>，就直接来看内容了</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font color=darkmagenta><strong>定义</strong></font></h2><p>它是用来求解一个数列的全排列下面的结果的序号的问题<br>$$<br>∑(pi*(n-i)!)(i是第几个数字)<br>$$</p>
<h2 id="逆推"><a href="#逆推" class="headerlink" title="逆推"></a><font color=darkmagenta><strong>逆推</strong></font></h2><p>那么就是根据序号求结果了，方法是类似的<br>首先是把<code>1~n-1</code>的阶乘都算出来，然后呢每一位也是倒着回去，用序号整除这里对应的阶乘，然后看看在剩下的没有选的数字当中哪一个的比它小的数字的个数等于这一个结果就行了</p>
<p>比较简洁，大概就是我对此的理解了</p>
<h1 id="最后还有一个逆元的求法"><a href="#最后还有一个逆元的求法" class="headerlink" title="最后还有一个逆元的求法"></a>最后还有一个逆元的求法</h1><p>这个求法的推导自己去推，书上也是有的（数学一本通P17）<br>那么我就附上一份代码就行了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> -(p/i)*<span class="built_in">inv</span>(p%n,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到此为止了。</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>搬运自旧博客</tag>
        <tag>康托展开</tag>
      </tags>
  </entry>
  <entry>
    <title>尼采经典语句</title>
    <url>/2021/09/05/%E5%B0%BC%E9%87%87%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%8F%A5%E6%94%B6%E8%97%8F/</url>
    <content><![CDATA[<h1 id="本篇文章的评注带有大量博主本人的主观臆测和断章取义，请谨慎阅读"><a href="#本篇文章的评注带有大量博主本人的主观臆测和断章取义，请谨慎阅读" class="headerlink" title="本篇文章的评注带有大量博主本人的主观臆测和断章取义，请谨慎阅读"></a><font color=#1453ad>本篇文章的评注带有大量博主本人的主观臆测和断章取义，请谨慎阅读</font></h1><p>1.</p>
<blockquote>
<p>我想要再一次给予和分发，直到人群中的智者再一次为他们的愚蠢，穷人再一次为自己的财富而感到高兴。</p>
</blockquote>
<p><font color =darkmagenta><strong>Analysis</strong></font></p>
<p>​    出自《查拉图斯特拉的序白》的开头部分，这里结合前面的内容来看，尼采想要表达的就是他自己要向太阳一样奉献，似乎也是在告诫人们要认识到自己的不足，同时也应该要学会知足？？</p>
<p>2.</p>
<blockquote>
<p>被妒忌之火围绕的人，终究会像蝎子一样，将毒刺蛰向自己。</p>
</blockquote>
<p><font color=darkmagenta><strong>Analysis</strong></font></p>
<p> 出自《论欢乐和激情》。考虑到这一本书的名字的特点，因此我再理解的时候，认为这一篇文章可能是借用了祆教教义中人间是善与恶之间的战场，人生来就应当在善恶之间抉择。这样来看的话，似乎是可以解释尼采这一篇文章里面所需要表达的意思了。妒忌无疑就是象征着恶，所以说尼采选择了用这样一个预言式的语句来暗示人们不应当嫉妒，而是要珍惜自己的美德？</p>
<p>3.</p>
<blockquote>
<p>以食知识之果，知识之草为生</p>
</blockquote>
<p>​    出自《论三种变形》。我在这里单独拿出这<strong>半句话</strong>,难免有<strong>断章取义之嫌</strong>。但是单独的拿出来的话，似乎是语文作文插进去用也未必不可以。关于这一篇文章，我自己是理解的不怎么透彻，因此就只选出这半句话来。</p>
<p>4.</p>
<blockquote>
<p>不再将脑子埋在天国之物的沙里面，而是自由地扛着它，一个创造了大地之意义的大地脑袋。</p>
</blockquote>
<p>​    出自《论背后世界的人 》。虽然这一句话，乃至整篇，也都是在告诉人们，不要过度沉溺于宗教之中，要去追求正直和现世的东西。但是这一句话我觉得单独拿出来理解成为不再沉迷与虚妄之中，而是脚踏实地做好每一件事也未必不可</p>
<p>5.</p>
<blockquote>
<p>精神曾经是上帝，然后它变成了人，现在它竟然成了乌合之众。</p>
</blockquote>
<p>​    出自《论读写》。之所以选择这一句话，不过只是因为听起来很有气势，自己也不知道应该怎么来评判</p>
<p>6.</p>
<blockquote>
<p>他越是要到高处，光明处，它的根就越是猛烈地伸向大地中，越是向下，越是进入到黑暗中，进入到深处，——进入到恶的里面</p>
</blockquote>
<p>​    出自《论山上的树》。感觉可以用一句俗语来概括：欲上天堂，先下地狱。</p>
<p>7.</p>
<blockquote>
<p>招待饥饿者吃饭的人，也给自己灵魂以活力</p>
</blockquote>
<pre><code> 出自《查拉图斯特拉的序白》。码字的时候难免有的时候会对于一些文字有所遗漏，但是我觉得这并没有什么问题。这一句话同样是可以类比赠人玫瑰，手有余香，但是相比而言，这一句话无疑就会显得更有内涵一些，因此我就选择这一句话了
</code></pre>
<p>8.</p>
<blockquote>
<p>他们曾经想要成为英雄，现在却是荒淫之徒。对他们来说，英雄便是一种伤心和恐惧</p>
</blockquote>
<p>​    出自《论山上的树》。这一句话<strong>很有意思</strong>，现在不总是在提倡什么<strong>不忘初心</strong>么，那么这一句话可不可以认为就是有着相似的意思呢。在我看来，这一句话大抵是可以用在表达不忘记自己的本心的了</p>
<p>9.</p>
<blockquote>
<p>可是凭着我的爱和希望，我恳求你：不要抛弃你灵魂中的英雄，神圣的维护你的最高希望！</p>
</blockquote>
<p>​    同样是出自《论上上的书》。这一篇文章已经是提供了三个句子了，真的是厉害啊。选录下来，大概是觉得这一句话似乎是很好的用在作文的结尾里面，用来呼吁？让我们来看看接下会发生一些什么</p>
<p>10.</p>
<blockquote>
<p>他们刚生下来就开始死亡，渴望着学会倦怠和放弃。</p>
</blockquote>
<p>​    出自《论死亡说教者》。虽然说尼采的这一句话听着前面那一部分有一些奇怪（想起一部经典的小说的封面上面也是写了相似的话）。但是我觉得这一句话倒是很能激励人的，而且也还是很有意思。</p>
<p>11</p>
<blockquote>
<p>你们看他们爬上爬下，这些敏捷的猴子，他们越过彼此往上面爬，却互相拉扯，掉到泥浆里、深渊里</p>
</blockquote>
<p>​    出自《论新偶像》。这个就是完全就不用想了，尼采这一篇文章就是在搞对于政治的讽刺，这样来看的话，这一句话在表达一些什么，我想是不言而喻的了</p>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>尼采</tag>
      </tags>
  </entry>
  <entry>
    <title>数论的板子</title>
    <url>/2021/09/05/%E6%95%B0%E8%AE%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%BF%E5%AD%90/</url>
    <content><![CDATA[<h2 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a><font color=darkmagenta>辗转相除法</font></h2><h3 id="原始版本"><a href="#原始版本" class="headerlink" title="原始版本"></a><font color =1453ad>原始版本</font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(x,y)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (y==<span class="number">0</span>)?x:<span class="built_in">gcd</span>(y,x%y);  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h3 id="高级版本"><a href="#高级版本" class="headerlink" title="高级版本"></a><font color =1453ad>高级版本</font></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">if</span>(!x)<span class="keyword">return</span> y;<span class="keyword">if</span>(!y)<span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;!(x&amp;<span class="number">1</span>);i++)x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;!(j&amp;<span class="number">1</span>);j++)j&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    i=<span class="built_in">min</span>(i,j);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;y)&#123;x^=y;y^=x;x^=y;&#125;</span><br><span class="line">        <span class="keyword">if</span>(!(x-=y))<span class="keyword">return</span> y&lt;&lt;i;<span class="comment">//这里也可以减法改成模</span></span><br><span class="line">        <span class="keyword">while</span>(!(x&amp;<span class="number">1</span>))x&gt;&gt;=<span class="number">1</span>;<span class="comment">//消除所有的2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a><font color=darkmagenta>扩展欧几里得</font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;x=<span class="number">1</span>;y=<span class="number">0</span>;<span class="keyword">return</span> a;&#125;</span><br><span class="line">    <span class="keyword">int</span> gcd=<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">    <span class="keyword">int</span> t=x;x=y;y=t-b/a*y;</span><br><span class="line">    <span class="keyword">return</span> gcd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a><font color=darkmagenta>逆元</font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="comment">//这里面求的是n在mod p情况下的逆元</span></span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> -(p/n)*<span class="built_in">inv</span>(p%n,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a><font color=darkmagenta>欧拉筛</font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prm[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> isp[maxn]=&#123;<span class="number">1</span>,<span class="number">1</span>&#125;;<span class="comment">//记录哪一些数不是质数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eular_Sieve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])prm[++cnt]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;cnt <span class="keyword">and</span> i*prm[j]&lt;maxn;j++)&#123;</span><br><span class="line">            isp[i*prm[j]]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prm[j]))<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a><font color=darkmagenta>欧拉函数</font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> prm[maxn],phi[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> isp[maxn]=&#123;<span class="number">1</span>,<span class="number">1</span>&#125;;<span class="comment">//记录哪一些数不是质数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eular_Sieve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])prm[++cnt]=i,phi[i]=i<span class="number">-1</span>;<span class="comment">//质数的phi值等于他自己减去1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;cnt <span class="keyword">and</span> i*prm[j]&lt;maxn;j++)&#123;</span><br><span class="line">            isp[i*prm[j]]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%prm[j]))&#123;</span><br><span class="line">			   phi[i*prm[j]]=phi[i]*prm[j]</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;      </span><br><span class="line">            <span class="keyword">else</span> phi[i*prm[j]]=phi[i]*(prm[j]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lucas"><a href="#Lucas" class="headerlink" title="Lucas"></a><font color=darkmagenta>Lucas</font></h2><p>非递归形式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> res=<span class="number">1</span>,a,b;</span><br><span class="line">    <span class="keyword">while</span>(n&amp;&amp;m)&#123;</span><br><span class="line">    	<span class="keyword">int</span> a=n%p,b=b%p;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        (res*=<span class="built_in">C</span>(a,b,p))%=p;</span><br><span class="line">        n/=p;m/=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归形式</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qkpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">int</span> p,<span class="keyword">int</span> mod)</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			(res*=b)%=mod;</span><br><span class="line">		&#125;</span><br><span class="line">		(b*=b)%=mod;</span><br><span class="line">		p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;m)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(n==m)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(m&gt;n-m)m=n-m;<span class="comment">//约掉 </span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> s1=<span class="number">1</span>,s2=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		s1=s1*(n-i)%p;</span><br><span class="line">		s2=s2*(i+<span class="number">1</span>)%p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s1*<span class="built_in">qkpow</span>(s2,p<span class="number">-2</span>,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(m==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">C</span>(n%p,m%p,p)*<span class="built_in">Lucas</span>(n/p,m/p,p)%p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Catalan-Number"><a href="#Catalan-Number" class="headerlink" title="Catalan Number"></a><font color=darkmagenta>Catalan Number</font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">f[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">        f[i]=f[j]*f[i<span class="number">-1</span>-j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">	f[i]=((<span class="number">4</span>*i<span class="number">-2</span>)*f[i<span class="number">-1</span>])/(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>Catalan Number</tag>
        <tag>同余</tag>
        <tag>矩阵</tag>
        <tag>扩展欧几里得</tag>
        <tag>乘法逆元</tag>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title>数论test</title>
    <url>/2021/09/05/%E6%95%B0%E8%AE%BAtest/</url>
    <content><![CDATA[<h2 id="有趣的序列"><a href="#有趣的序列" class="headerlink" title="有趣的序列"></a><font color =darkblue>有趣的序列</font></h2><p><a href="https://www.luogu.org/problemnew/show/P3200"><font size =5>洛谷链接</font></a><br>这一道题是一道卡特兰数的题，但是因为数据量以及要进行模运算的原因，要采用我先前博客中写到的通项式。当然因为不可以直接算阶乘，因此采取分解阶乘的方法转换成乘法。</p>
<blockquote>
<p><font color =green >Code</font></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int64 long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> primes[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">bool</span> isp[<span class="number">2</span>*maxn];</span><br><span class="line"><span class="keyword">int</span> newp=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eular_Sieve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">2</span>*maxn;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!isp[i])&#123;</span><br><span class="line">			primes[++newp]=i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=newp&amp;&amp;primes[j]*i&lt;<span class="number">2</span>*maxn;j++)&#123;</span><br><span class="line">			isp[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span>(!(i%primes[j]))<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Int64 <span class="title">qkpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="comment">//a的b次方mod p </span></span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">1</span>)<span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">if</span>(b%<span class="number">2</span>)&#123;</span><br><span class="line">		Int64 t=<span class="built_in">qkpow</span>(a,b/<span class="number">2</span>,p);</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		t=t*a%p;</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		Int64 t=<span class="built_in">qkpow</span>(a,b/<span class="number">2</span>,p);</span><br><span class="line">		t=t*t%p;</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;p);</span><br><span class="line">	<span class="built_in">Eular_Sieve</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=newp;i++)&#123;</span><br><span class="line">		Int64 t=primes[i];</span><br><span class="line">		Int64 cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>,cnt3=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(t&lt;=<span class="number">2</span>*n)&#123;</span><br><span class="line">			cnt1+=(<span class="number">2</span>*n/t);cnt2+=((n+<span class="number">1</span>)/t);cnt3+=(n/t);</span><br><span class="line">			t*=primes[i];</span><br><span class="line">		&#125;</span><br><span class="line">		sum[i]=cnt1-cnt2-cnt3;</span><br><span class="line">	&#125;</span><br><span class="line">	Int64 ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=newp;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(sum[i])&#123;</span><br><span class="line">			(ans*=<span class="built_in">qkpow</span>(primes[i],sum[i],p))%=p;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="打气球"><a href="#打气球" class="headerlink" title="打气球"></a><font color=blue>打气球</font></h2><p>这道题我就不给网址了，yzoj上面最后一页找</p>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote>
<p><font color=#3091f2 size=4><strong>Descrition</strong></font></p>
</blockquote>
<p>周末何老板到磁器口游玩。街边有小贩在组织一种打气球游戏，何老板很感兴趣。</p>
<p>店家立了一块布，布上画了N*N的方格，有的方格里挂上了气球，有的没有。</p>
<p>游戏规则如下：</p>
<p>第1步.观察。如果每一行都至少有一个方格没有气球，并且每一列都至少有一个方格没有气球，游戏结束。否则进行第2步。</p>
<p>第2步.抛骰子。店家拿出一个特制的骰子，该骰子有N个面，上面依次有1到N这N 个数字。玩家先后抛两次骰子，设第一次抛出的数字为x，设第二次抛出的数字为y (注：抛出的数字是随机的)。</p>
<p>第3步.打气球。若坐标为(x,y)的格子里有气球，玩家必须将其打爆。子弹1块钱一发。</p>
<p>如果该格子没有气球，忽略该格子，玩家不用开枪，但玩家也需要支付给店家1块钱。</p>
<p>第4步.继续。执行第1步。 </p>
<p>何老板是个神枪手，他能做到百发百中。他想你帮他算算，对于当前给出的这局游戏，预计要花多少钱才能结束。</p>
<blockquote>
<p><font color=#3091f2 size=4><strong>Input</strong></font></p>
</blockquote>
<p>第一行，两个整数N和M，N表示方格的尺寸,M表示游戏开始时，有M个格子里是没有气球的。 接下来M行，每行两个整数x,y,表示坐标为x,y的格子里没有气球。</p>
<blockquote>
<p><font color=#3091f2 size=4><strong>Output</strong></font></p>
</blockquote>
<p>一行，一个实数，完成游戏预计花费，保留2个小数位。</p>
<blockquote>
<p><font color=#3091f2 size=4><strong>Sample Input</strong></font></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 2 </span><br><span class="line">2 3 </span><br><span class="line">4 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p><font color=#3091f2 size=4><strong>Sample Output</strong></font></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11.77</span><br></pre></td></tr></table></figure>

<p>如果你想看更多的样例输出，可以去<a href="https://wuyanxi.top/2019/02/15/20190201-%E6%95%B0%E8%AE%BA%E9%98%B6%E6%AE%B5%E8%80%83%E8%AF%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/">WYX大佬的博客</a></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a><font color= DarkMagenta>分析</font></h3><p>这一道题啊，实际上啊，就是一道期望的题，如果你点开了上面的那一个链接，多半也看见了YB说的话了吧，那么接下来要做的事情就是找出递归的关系<br>首先，我们都知道每一个格子概率为$\frac{1}{n^2}$<br>我们设有$r$行已经打掉，$c$列已经打掉，函数为$f[r][c]=……$<br>那么分类讨论<br>1.如果说没有抽到有气球的地方，那么就是他自己乘上没有气球的地方的概率<br>2.如果说打掉的地方只能消除行，那么就是乘上$f[r-1][c]$以及这些地方的概率，只能消除列同理<br>3.如果可以同时消去的话，那么就可以类比上面的，写出式子来。<br>4.当然最后你应该加上1，因为每打一次收费1</p>
<p>式子和化简如下<br>$$<br>f[r][c]=\\ \frac{f[r-1][c]\times r(n-c)+f[r][c-1]\times c(n-r)+f[r-1][c-1]\times r\times c+f[r][c]\times(n-r)(n-c)+n^2}{n^2(n-r)(n-c)}<br>$$<br>好了，既然已经知道了式子，那么就可以比较容易的做出来了，至于边界，那你也可以自己推出来，你可以选择两种方法，$dfs$ or$ dp$<br>我的代码里面把$dfs$的注释掉了</p>
<blockquote>
<p><font color =green >Code</font></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2003</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">double</span> f[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> row[maxn],col[maxn];<span class="comment">//行 列 </span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(!r&amp;&amp;!c)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(f[r][c]!=<span class="number">-1</span>)<span class="keyword">return</span> f[r][c];</span><br><span class="line">	<span class="keyword">if</span>(r)ans+=<span class="built_in">dfs</span>(r<span class="number">-1</span>,c)*r*(n-c);</span><br><span class="line">	<span class="keyword">if</span>(c)ans+=<span class="built_in">dfs</span>(r,c<span class="number">-1</span>)*c*(n-r);</span><br><span class="line">	<span class="keyword">if</span>(r&amp;&amp;c)ans+=<span class="built_in">dfs</span>(r<span class="number">-1</span>,c<span class="number">-1</span>)*r*c;</span><br><span class="line">	<span class="keyword">return</span> f[r][c]=(<span class="keyword">double</span>)(ans+n*n)/(n*(c+r)-c*r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">int</span> r=n,c=n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> x,y;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		<span class="keyword">if</span>(!row[x])r--,row[x]=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span>(!col[y])c--,col[y]=<span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*for(int i=0;i&lt;=r;i++)&#123;</span></span><br><span class="line"><span class="comment">		for(int j=0;j&lt;=c;j++)f[i][j]=-1;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	dfs(r,c);*/</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		f[i][<span class="number">0</span>]=f[i<span class="number">-1</span>][<span class="number">0</span>]+n/(i+<span class="number">0.0</span>);</span><br><span class="line">		f[<span class="number">0</span>][i]=f[<span class="number">0</span>][i<span class="number">-1</span>]+n/(i+<span class="number">0.0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;j++)&#123;</span><br><span class="line">			<span class="keyword">double</span> tmp=f[i<span class="number">-1</span>][j]*i*(n-j)+f[i][j<span class="number">-1</span>]*(n-i)*j+f[i<span class="number">-1</span>][j<span class="number">-1</span>]*i*j+n*n;</span><br><span class="line">			f[i][j]=tmp/(n*(i+j)-i*j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,f[r][c]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一道题，不过比较水，居然用暴力枚举就可以做出来了，早知道我当时就直接枚举了，题目与韩信点兵类似</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>概率期望</tag>
        <tag>Catalan Number</tag>
        <tag>搬运自旧博客</tag>
      </tags>
  </entry>
  <entry>
    <title>图论复习(最短路)</title>
    <url>/2021/12/08/%E5%9B%BE%E8%AE%BA%E5%A4%8D%E4%B9%A0%EF%BC%88%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%89/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font color=darkmagenta><strong>前言</strong></font></h2><p>​    下学期开始讲数据结构，我自己比较想去争取一下免修。不过其实关于图论的部分基本上已经是忘得差不多了（我觉得我现在可能唯一还会的算法就是倍增求$LCA$了）。图论的部分就打算从最简单的最短路和最小生成树开始复习了（据说下学期数据结构的内容要求只有$Dijkstra$算法）。</p>
<h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a><font color=1453ad><strong>Dijkstra</strong></font></h2><p>​    <s>它中间的k很容易打漏</s></p>
<p>​    应该是一个荷兰人在上世纪五十年代提出来的算法吧（记不清了），用来计算<strong>非负权图</strong>的<strong>单源最短路</strong></p>
<h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a><font color=2c9678><strong>算法思路</strong></font></h3><p>​    假设起点为$S$,$dist[i]$表示从$S$到点$i$的最短路，$vis[i]$表示是否选中了这一个点($0$表示还没有选中，$1$表示已经选中)</p>
<p>​    思路如下：</p>
<ul>
<li>$dist$数组初始化为$inf$,$dist[S]=0$，$vis$数组初始化为$0$</li>
<li>重复接下来的操作$n$次（假如这个图联通的话）<ul>
<li>从没有选中的点中选择$dist$值最小的一个点$u$,$vis[u]=1$</li>
<li>设$v$是$u$可以直接到达的节点，$val$是这两条边的权值,$dist[v]=min(dist[v],dist[u]+val)$</li>
</ul>
</li>
<li>或者说（不知道这个图到底联不联通）:<ul>
<li>每次选的点加入集合，每次从集合中去出点来，直到集合为空为止</li>
</ul>
</li>
</ul>
<h3 id="算法的正确性"><a href="#算法的正确性" class="headerlink" title="算法的正确性"></a><font color=2a9678><strong>算法的正确性</strong></font></h3><p>​    我就根据自己的理解给一个证明了。<s>不保证正确性。</s></p>
<p>​    每一次都是从没有选择的一群点中选择$dist$最小的点$u$。首先就是不可能存在路径$S \rightarrow mid\rightarrow u $，$mid$属于还没有选择的点当中，十的$dist$更小。这是因为这个图是没有负权的，其他的点$dist$都是更大的，这样转移过来$u$的$dist$不会更小了。所以说每次选的点的最短路长度都是求出来了的，所有的点选完了那么最短路就求出来了</p>
<h3 id="算法的优化"><a href="#算法的优化" class="headerlink" title="算法的优化"></a><font color=2a9678><strong>算法的优化</strong></font></h3><p>​    暴力遍历数组选择节点时间复杂度为$O(n^2)$,为了优化算法，应当考虑提高选择结点的时候的效率。</p>
<p>​    考虑用优先队列进行优化，将选择节点的效率提高到$O(\log n)$,这样算法的效率就提高了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">priority_queue&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;Que;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijsktra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">clr</span>(dist,<span class="number">0x3f</span>);</span><br><span class="line">    dist[S]=<span class="number">0</span>;</span><br><span class="line">    Que.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>,S));</span><br><span class="line">    <span class="keyword">while</span>(Que.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=Que.<span class="built_in">top</span>().second;Que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(inq[u])<span class="keyword">continue</span>;</span><br><span class="line">        inq[u]=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">int</span> w=val[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&gt;dist[u]+w)&#123;</span><br><span class="line">                dist[v]=dist[u]+w;</span><br><span class="line">                Que.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-dist[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是一份代码的案例。<s>有自己define的语句。</s></p>
<h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a><font color=1453ad><strong>Floyd</strong></font></h2><p>相当简单直白的算法了。边的权值可以负可以正，无向有向均可，但是要没有负环。</p>
<h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a><font color=2a9678><strong>算法思路</strong></font></h3><p>​    点$u$到点$v$的路径可以分分解为点$u$到点$mid$再到点$v$两条路径长度之和，所以说对于任意两个点之间的最短路，都枚举一下两个点之间转移的中间节点是多少就好了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=N;k++)<span class="comment">//枚举中间节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="comment">//枚举起点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;j++)<span class="comment">//枚举终点</span></span><br><span class="line">            dist[i][j]=<span class="built_in">min</span>(dist[i][j],dist[i][k]+dist[k][j]);</span><br></pre></td></tr></table></figure>

<p>​    缺点就是比较慢，时间复杂度达到了$O(n^3)$,优点是求得多源点最短路。</p>
<h2 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a><font color=1453ad><strong>Bellman-Ford</strong></font></h2><p>相比于$Dijkstra$，可以处理有负边权的情况</p>
<h3 id="算法思路-2"><a href="#算法思路-2" class="headerlink" title="算法思路"></a><font color=2a9678><strong>算法思路</strong></font></h3><p>假设$dist[i]$表示从$S$到点$i$的最短路，$edge$是边的结构体,其中包含两个点和对应的权值</p>
<ul>
<li>$dist$数组初始化为$inf$,$dist[S]=0$</li>
<li>下面操作（松弛操作）重复$n-1$次：<ul>
<li>枚举每一条边，$dist[edge[k].u]=min(dist[edge[k].u],dist[edge[k].v]+edge[k].val)$</li>
</ul>
</li>
<li>再进行一次松弛操作，如果说松弛操作可以成功，那么就说明这个图存在负环</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bellman_ford</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dist));</span><br><span class="line">    dist[S]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=E;j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> u=edge[j].u;</span><br><span class="line">            <span class="keyword">int</span> v=edge[j].v;</span><br><span class="line">            <span class="keyword">int</span> w=edge[j].w;</span><br><span class="line">            dist[u]=<span class="built_in">min</span>(dist[u],dist[v]+w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=E;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=edge[j].u;</span><br><span class="line">        <span class="keyword">int</span> v=edge[j].v;</span><br><span class="line">        <span class="keyword">int</span> w=edge[j].w;</span><br><span class="line">        <span class="keyword">if</span>(dist[u]&gt;dist[u]+dist[v]+w)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="算法的正确性-1"><a href="#算法的正确性-1" class="headerlink" title="算法的正确性"></a><font color=2a9678><strong>算法的正确性</strong></font></h3><p>​    图的最短路不会包含正权的环（假设说有正环，那么肯定是有一条边可以删掉的，建议自己画图理解一下），也不会有负环（有负环哪来的最短路）。所以说一个图的最短路最多会有$N-1$条边。</p>
<p>​    $N$个点，$N-1$条边，其实就是一棵树，$Bellman-Ford$可以看作是以$S$作为根，一层一层地生成这棵最短路的树的一个过程，这棵树最多有$N-1$层，所以说最多只需要进行$N-1$次操作就好了，如果说还能继续的话就说明是存在负环了。</p>
<h2 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a><font color=1453ad><strong>SPFA</strong></font></h2><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a><font color=2a9678><strong>算法思想</strong></font></h3><p>​    相当于是通过队列的方式对$Bellman-Ford$进行优化。通过队列的方式减少了多余的扫描</p>
<ul>
<li>$dist$初始化为无穷大，$inq$初始化为0（用来记录是否在队列里面），$dist[S]$设为$0$，$inq[S]=1$并且放入队列当中</li>
<li>只要队列不为空：<ul>
<li>拿出队首的元素$u$，扫描队首元素可以到达的节点$v$</li>
<li>如果说$dist[v]&gt;dist[u]+w$,更改值，检查$v$是否在队列当中，如果说不在队列里面的话，那么放入队列里面,$inq$设置为$1$</li>
<li>如果说一个点加入队列的次数超过了$N$说明有负环</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//没有对于负环的检测</span></span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dist));</span><br><span class="line">    <span class="built_in">memset</span>(inq,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(inq));</span><br><span class="line">    dist[S]=<span class="number">0</span>;</span><br><span class="line">    inq[S]=<span class="number">1</span>;</span><br><span class="line">    Que.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span>(Que.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="keyword">int</span> u=Que.<span class="built_in">front</span>();Que.<span class="built_in">pop</span>();</span><br><span class="line">        inq[u]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=nxt[i])&#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">int</span> w=val[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[u]&gt;dist[v]+w)&#123;</span><br><span class="line">                dist[u]=dist[v]+w;</span><br><span class="line">                <span class="keyword">if</span>(!inq[v])&#123;Que.<span class="built_in">push</span>(v);inq[v]=<span class="number">1</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>SPFA</tag>
        <tag>Dijkstra</tag>
        <tag>Floyd</tag>
      </tags>
  </entry>
  <entry>
    <title>概率和期望入门</title>
    <url>/2021/09/05/%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B/</url>
    <content><![CDATA[<h1 id="概率与期望"><a href="#概率与期望" class="headerlink" title="概率与期望"></a><font color=blue>概率与期望</font></h1><h2 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h2><p>概率这一个词语在生活中实际上是经常会碰见的，所以说这里我就来说一说相对而言遇到的要少一些的期望。这个期望啊，可以理解为<font color=red><strong>某些事件大量发生以后的平均的结果</strong></font>。这就好比一个六面的色子扔了很多很多次以后，色子平均值会趋近于<code>3.5</code>。<s>这个原因啊，是显而易见，毫无疑问的，就不需要再多解释了</s>。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>好的，有一道例题可以看看<br><a href="https://www.luogu.org/problemnew/show/P4316">洛谷P4316</a><br>这一道题啊，读完了我就想到了拓扑排序，，同时用两个变长数组来存就可以了<s>最开始我想用边集，可是我不知道怎么用边集来拓扑排序啊，于是ZhuFN大佬提醒我用两个变长数组</s>。因此，我们只需要用两个变长数组，一个<font color=red>用来存点</font>,一个用来<font color=red>存权值</font>就OK了。<br>而这一个拓扑排序的过程中，相对与普通的拓扑排序，增加上对于期望长度的累加就可以了这是因为期望具有可加性<br>$probab(u)$来的那一个点的期望长度，<code>w</code>为这一条边的权值，$outdgr(v)$为有几条路进来，那么可以得到<br>$$<br>probab(v)=[probab(u)+w]/outdgr(v)<br>$$<br>我们这里可采用正着来或反着来（应该是吧），就像是$USACO$的数字金字塔一样吧</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; Q;			</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;G[maxn];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;W[maxn];</span><br><span class="line"><span class="keyword">int</span> n,tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> indgr[maxn];</span><br><span class="line"><span class="keyword">int</span> outdgr[maxn];</span><br><span class="line"><span class="keyword">double</span> probab[maxn];</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topsort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Q.<span class="built_in">push</span>(n);</span><br><span class="line">    <span class="keyword">while</span>(!(Q.<span class="built_in">empty</span>()))&#123;</span><br><span class="line">        <span class="keyword">int</span> u=Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;::iterator iterG=G[u].<span class="built_in">begin</span>();</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt;::iterator iterW=W[u].<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">while</span>(iterG!=G[u].<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">int</span> v=*iterG,w=*iterW;</span><br><span class="line">            indgr[v]--;</span><br><span class="line">            probab[v]+=(probab[u]+w)/(outdgr[v]);</span><br><span class="line">            <span class="keyword">if</span>(!indgr[v])&#123;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">            iterW++;iterG++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(indgr,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(indgr));</span><br><span class="line">    <span class="built_in">memset</span>(outdgr,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(outdgr));</span><br><span class="line">    <span class="built_in">memset</span>(probab,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(probab));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        indgr[a]++;outdgr[a]++;</span><br><span class="line">        G[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">        W[b].<span class="built_in">push_back</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">topsort</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,probab[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里再附上另外的大佬这道题的链接，我是看了dyx大佬代码以后才发现自己累加的地方做错了的<s>对，没错，我最开始错了</s>,而 ZhuFN则是用的dfs做的。<br><a href="https://www.cnblogs.com/saitoasuka/p/10337553.html">dyx</a><br><a href="http://buringstraw.win/index.php/archives/21/">zfn</a><br>那么就可以了</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>概率期望</tag>
        <tag>搬运自旧博客</tag>
      </tags>
  </entry>
  <entry>
    <title>最小生成树</title>
    <url>/2022/01/23/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<h1 id="MST"><a href="#MST" class="headerlink" title="MST"></a><font color=darkmagenta><strong>MST</strong></font></h1><p>​    设$N=(V,E)$是一个连通网，$U$是顶点集$V$的一个非空子集，边$(u,v)$是一个具有最小权值的边，其中$u\in U,v\in V-U$则必存在一棵包含边$(u,v)$的最小生成树</p>
<h1 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a><font color=darkmagenta><strong>Prim</strong></font></h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a><font color=1453ad><strong>思路</strong></font></h2><ul>
<li>将所有的点分为两个点集，一个是已经生成的最小生成树的点集，另外一个是已经在已生成的树里面的点，另一个是还没有生成的树中的点的集合</li>
<li>开始时先随机选择一个点到第一个集合中</li>
<li>每一次选择一条边，这条边的两个顶点分别属于两个集合当中且权值最小，将这条边和点加入到选中的集合中</li>
<li>选择$N-1$条边生成最小生成树</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><font color=1453ad><strong>代码</strong></font></h2><p><a href="https://www.luogu.com.cn/problem/P3366">P3366 【模板】最小生成树 - 洛谷 </a></p>
<p>上面这道题作为例题了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int64 long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (((x)&gt;(y))?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (((x)&lt;(y))?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqar(x) (x)*(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swp(x,y) x^=y,y^=x,x^=y</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxn 5005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxm 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dist[Maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt;G[Maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[Maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> N,M;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,z;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;z);</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(&#123;v,z&#125;);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(&#123;u,z&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)dist[i]=inf;<span class="built_in">clr</span>(vis,<span class="number">0</span>);</span><br><span class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    vector&lt;edge&gt;::iterator iter=G[<span class="number">1</span>].<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span>(iter!=G[<span class="number">1</span>].<span class="built_in">end</span>())&#123;</span><br><span class="line">        edge p=*iter;</span><br><span class="line">        <span class="keyword">int</span> v=p.to;</span><br><span class="line">        dist[v]=<span class="built_in">min</span>(dist[v],p.val);<span class="comment">//注意重边</span></span><br><span class="line">        iter++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> pos;</span><br><span class="line">        <span class="keyword">int</span> minc=inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(minc&gt;dist[j] &amp;&amp; vis[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                minc=dist[j];</span><br><span class="line">                pos=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=minc;</span><br><span class="line">        vis[pos]=<span class="number">1</span>;</span><br><span class="line">        iter=G[pos].<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">while</span>(iter!=G[pos].<span class="built_in">end</span>())&#123;</span><br><span class="line">            edge p=*iter;</span><br><span class="line">            <span class="keyword">if</span>(dist[p.to]&gt;p.val&amp;&amp;vis[p.to]==<span class="number">0</span>)dist[p.to]=p.val;</span><br><span class="line">            iter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> tag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;tag=<span class="number">1</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tag)<span class="built_in">printf</span>(<span class="string">&quot;orz&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Kruscal"><a href="#Kruscal" class="headerlink" title="Kruscal"></a><font color=darkmagenta><strong>Kruscal</strong></font></h2><p>别的不说，我觉得这个算法简直是永远的神，简单易懂好写</p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a><font color=1453ad><strong>思路</strong></font></h2><ul>
<li><p>把每一条边按照权值的大小进行排序，令最小生成树初始状态为$N$个点，没有边的非联通图</p>
</li>
<li><p>从最小的边开始，假如边的两个点不在同一个连通分量，就选择这条边(通过并查集来进行判断)</p>
</li>
<li><p>选择$N-1$条边后最小生成树生成，或者选完了过后还没$N-1$条被选说明选不出来</p>
</li>
</ul>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><font color=1453d><strong>代码</strong></font></h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int64 long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(x,y) (((x)&gt;(y))?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(x,y) (((x)&lt;(y))?(x):(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqar(x) (x)*(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swp(x,y) x^=y,y^=x,x^=y</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxn 5005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Maxm 200005</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DSU</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> belong[Maxn];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Maxn;i++)belong[i]=i;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u==belong[u])<span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">return</span> belong[u]=<span class="built_in">find</span>(belong[u]); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">islink</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fu=<span class="built_in">find</span>(u);</span><br><span class="line">        <span class="keyword">int</span> fv=<span class="built_in">find</span>(v);</span><br><span class="line">        <span class="keyword">return</span> fu==fv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fu=<span class="built_in">find</span>(u);</span><br><span class="line">        <span class="keyword">int</span> fv=<span class="built_in">find</span>(v);</span><br><span class="line">        belong[fu]=fv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;D;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> edge&amp; cmp)<span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val&lt;cmp.val; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;E[Maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    D.<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">int</span> N,M;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> u,v,z;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;z);</span><br><span class="line">        E[i]=&#123;u,v,z&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(E+<span class="number">1</span>,E+<span class="number">1</span>+M);</span><br><span class="line">    <span class="keyword">int</span> tot=<span class="number">0</span>,now=<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(now&lt;=M)&#123;</span><br><span class="line">        <span class="keyword">int</span> u=E[now].u;</span><br><span class="line">        <span class="keyword">int</span> v=E[now].v;</span><br><span class="line">        <span class="keyword">if</span>(D.<span class="built_in">islink</span>(u,v)==<span class="literal">false</span>)&#123;</span><br><span class="line">            D.<span class="built_in">link</span>(u,v);</span><br><span class="line">            tot++;</span><br><span class="line">            ans+=E[now].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tot==N<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">        now++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tot!=N<span class="number">-1</span>)<span class="built_in">printf</span>(<span class="string">&quot;orz&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>图论</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P3807卢卡斯定理</title>
    <url>/2021/09/05/%E6%B4%9B%E8%B0%B7P3807%E5%8D%A2%E5%8D%A1%E6%96%AF%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<p>这是一道模板题</p>
<h2 id="这里是题目-洛谷P3807"><a href="#这里是题目-洛谷P3807" class="headerlink" title="这里是题目 洛谷P3807"></a><strong>这里是题目 <a href="https://www.luogu.org/problemnew/show/P3807">洛谷P3807</a></strong></h2><h2 id="卢卡斯定理及题目的阐释"><a href="#卢卡斯定理及题目的阐释" class="headerlink" title="卢卡斯定理及题目的阐释"></a><font color=darkMagenta><strong>卢卡斯定理及题目的阐释</strong></font></h2><p>卢卡斯定理是用来解决一大很大的组合数来和一个质数求余的问题，它的定义如下<br>如果$p$为素数，设$n=sp+q$,$m=tp+r$<br>则:<br>$$<br>C^{sp+q}_{tp+r}\equiv C^s_t*C^q_r(mod\ p)<br>$$</p>
<p>那么来看看题。<br>首先看这个数据范围，就知道可以用<s>int的类型解决个屁，就是int害的我错了好多次</s>long long 的数据类型解决，这个数据看起来好像是只有 10的5次方,但是中间这么多的计算，突然的就给我溢出了<s>我靠着ZFN大佬的数据测试发现负数才发现的</s>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;m)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(n==m)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(m&gt;n-m)m=n-m;<span class="comment">//约掉 </span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> s1=<span class="number">1</span>,s2=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		s1=s1*(n-i)%p;</span><br><span class="line">		s2=s2*(i+<span class="number">1</span>)%p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s1*<span class="built_in">qkpow</span>(s2,p<span class="number">-2</span>,p)%p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    这一段是求组合的函数，拿出来单独讲一讲<br>​    因为这里面的参数传过来的时候都是已经和p求过余了的，而且p在题目中说了的，是一个质数所以说这里的$n$,$m$都是和$p$互质的。<br>​    因为公式里面要除掉$m!$，同时有要去对p取模，所以考虑用它的逆元乘来代替用它来除<br>而根据费马小定理可以知道它的逆元是它的$p-2$方</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a><font color=darkmagenta><strong>Code</strong></font></h2><p>那么综上，加上以个快速幂就可以解出这道题了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//洛谷P3807 Lucas 模板题 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,m,p;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qkpow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> b,<span class="keyword">int</span> p,<span class="keyword">int</span> mod)</span></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			(res*=b)%=mod;</span><br><span class="line">		&#125;</span><br><span class="line">		(b*=b)%=mod;</span><br><span class="line">		p&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;m)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(n==m)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(m&gt;n-m)m=n-m;<span class="comment">//约掉 </span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> s1=<span class="number">1</span>,s2=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		s1=s1*(n-i)%p;</span><br><span class="line">		s2=s2*(i+<span class="number">1</span>)%p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s1*<span class="built_in">qkpow</span>(s2,p<span class="number">-2</span>,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(m==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">C</span>(n%p,m%p,p)*<span class="built_in">Lucas</span>(n/p,m/p,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="keyword">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">		n+=m;</span><br><span class="line">		cout&lt;&lt;<span class="built_in">Lucas</span>(n,m,p)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>搬运自旧博客</tag>
        <tag>Lucas</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构笔记</title>
    <url>/2022/01/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><font color=darkmagenta><strong>写在前面</strong></font></h1><p>​    寒假看看数据结构的网课当作复习吧，随便写了一些笔记</p>
<h2 id="概念小结"><a href="#概念小结" class="headerlink" title="概念小结"></a><font color=1453ad><strong>概念小结</strong></font></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">数据--个体--&gt;数据元素;</span><br><span class="line">数据元素--性质相同的构成的集合--&gt;数据对象;</span><br><span class="line">数据元素--加上数据元素之间的关系--&gt;数据结构;</span><br><span class="line">数据结构--映像到内存--&gt;存储结构;</span><br><span class="line">数据结构--加上操作--&gt;抽象数据类型;</span><br><span class="line">数据结构--逻辑模型--&gt;逻辑结构;</span><br><span class="line">逻辑结构--&gt;集合结构;</span><br><span class="line">逻辑结构--&gt;线性结构;</span><br><span class="line">逻辑结构--&gt;树形结构;</span><br><span class="line">逻辑结构--&gt;图形结构;</span><br><span class="line">抽象数据类型--&gt;数据对象;</span><br><span class="line">抽象数据类型--&gt;数据类型;</span><br><span class="line">抽象数据类型--&gt;基本操作;</span><br><span class="line">存储结构--&gt;顺序结构;</span><br><span class="line">存储结构--&gt;链式结构;</span><br><span class="line">存储结构--&gt;索引结构;</span><br><span class="line">存储结构--&gt;散列结构;</span><br></pre></td></tr></table></figure>

<p>逻辑结构：研究对象之间的特性和关系；</p>
<p>存储结构：有效组织计算机进行存储</p>
<p>算法五个特性：</p>
<ul>
<li>有穷性：经过有穷步可以结束</li>
<li>确定性：每一条指令必须有确切的含义，没有二义性</li>
<li>可行性：可以执行的</li>
<li>输入</li>
<li>输出</li>
</ul>
<p>算法设计要求：</p>
<ul>
<li>正确性</li>
<li>可读性</li>
<li>健壮性</li>
<li>高效性 </li>
</ul>
<h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a><font color=darkmagenta><strong>栈和队列</strong></font></h1><h2 id="定义和特点"><a href="#定义和特点" class="headerlink" title="定义和特点"></a><font color=1453ad><strong>定义和特点</strong></font></h2><ul>
<li><p>栈特点：后进先出（LIFO）</p>
</li>
<li><p>队列特点：先进先出（FIFO</p>
</li>
</ul>
<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a><font color=1453ad><strong>使用案例</strong></font></h2><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a><font color=2a9678><strong>进制转换</strong></font></h3><blockquote>
<p>将十进制数159转换成八进制数</p>
</blockquote>
<p>短除法余数分别依次是$7，3，2$，每一次得到余数的时候放入栈中，然后将栈中元素依次弹出可以得到八进制数$237$</p>
<h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a><font color=2a9678><strong>括号匹配</strong></font></h3><blockquote>
<p>假设表达式中有[],()两种括号，括号可以嵌套，但是顺序不可以出错。比如([] ())是合法的，但是([)]不合法</p>
</blockquote>
<p>按照顺序依次push进入栈中，如果和下面的匹配就弹出，如果出现交叉的情况说明不匹配。</p>
<h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a><font color=2a9678><strong>表达式求值</strong></font></h3><p>算法有限算法</p>
<p>把表达式分为：</p>
<ul>
<li>操作数： 常数，变量</li>
<li>运算符： 算术运算符，逻辑运算符，关系运算符</li>
<li>界限符： 左右括号和表达式结束符</li>
</ul>
<p>设置两个栈，一个是算符栈，另一个是操作数栈</p>
<p>从左至右开始扫描表达式：</p>
<ul>
<li><p>如果是数：压入操作数栈</p>
</li>
<li><p>如果是运算符：</p>
<ul>
<li>优先级高于运算符栈顶的优先级，入栈并继续向后扫描</li>
<li>优先级低于运算符栈顶的优先级，从操作数栈弹出两个运算数，弹出栈顶运算符，并进行运算，并将结果压栈进入操作数栈</li>
</ul>
</li>
<li><p>继续进行扫描</p>
</li>
</ul>
<h3 id="舞伴问题"><a href="#舞伴问题" class="headerlink" title="舞伴问题"></a><font color=2a9678><strong>舞伴问题</strong></font></h3><blockquote>
<p>舞会上男女各自拍成一列，开始时从队头出来配对跳舞，跳完了过后自己排到后面去。</p>
</blockquote>
<h1 id="树"><a href="#树" class="headerlink" title="树"></a><font color=darkmagenta><strong>树</strong></font></h1><ul>
<li>二叉树和树是两个概念，因为树的结点的孩子不分左右</li>
<li>假设二叉树叶子节点个数为$N_0$,有两个孩子的节点个数为$N_2$,则$N_0=N_2+1$</li>
</ul>
<p>$$<br>设节点数为N,两个孩子的节点数为N_2,一个的为N_1,没有的为N_0\<br>边数:\<br>N-1=N_2+N_1+N_0-1=2*N_2+N_1\<br>化简可得<br>$$</p>
<ul>
<li><p>满二叉树：一个深度为$k$且有$2^k-1$个结点的二叉树</p>
</li>
<li><p>完全二叉树：深度为$k$的具有$n$个节点的二叉树，当且仅当每一个节点都与深度为$k$的满二叉树从上到下，从左到右编号1到$n$对应的时候，称作完全二叉树。其深度为$\lfloor log_2n\rfloor+1$</p>
</li>
<li><p>完全二叉树节点$ib $的父亲$\lfloor i/2\rfloor$,儿子$2<em>i,2</em>i+1$</p>
</li>
<li><p>先序遍历:根左右；中序遍历：左根右；后序遍历：左右根</p>
</li>
<li><p>如果二叉树各节点均不同，则三种遍历的序列都唯一</p>
</li>
<li><p>如果知道先序遍历和中序遍历，或者后序遍历和中序遍历，则可以确定唯一的二叉树。已知先序/后序，中序，确定子树的时候，通过先序/后序确定子树的根，通过中序确定左右。</p>
</li>
<li><p>线索二叉树：我选择把这篇文章贴上来<a href="https://zhuanlan.zhihu.com/p/134184036">#图解 数据结构：轻松搞定线索二叉树 - 知乎 </a></p>
</li>
<li><p>树转换成二叉树：从上到下，当前节点孩子放在该节点的左子树，兄弟放在右子树</p>
</li>
<li><p>二叉树转换成树：左孩子的的右孩子连接到双亲，删除原来的右孩子的线</p>
</li>
<li><p>二叉树转换成森林：从根节点开始，顺着将和右孩子的连线抹掉，再把每一个二叉树再进行还原。</p>
</li>
<li><p>哈夫曼树：最优二叉树，带权路径长度最短的树</p>
<ul>
<li>构造方法：先构造N个二叉树，每个都只有一个节点，选择权值最小的两个节点作为左右子树构成一个新的树，权值设为两个节点权值之和，然后在森林之中删除掉原来的两个节点，再把新的树放入到森林当中</li>
<li></li>
<li>特点：经过$N-1$次合并形成，有$2N-1$条边，且每个分支节点度都为2。</li>
</ul>
</li>
</ul>
<h1 id="图"><a href="#图" class="headerlink" title="图"></a><font color=darkmagenta><strong>图</strong></font></h1><h2 id="定义和术语"><a href="#定义和术语" class="headerlink" title="定义和术语"></a><font color=1453ad><strong>定义和术语</strong></font></h2><ul>
<li><p>图：G=(V,E)</p>
<ul>
<li>V(Vertex):顶点（数据元素）的非空有穷集合 </li>
</ul>
<ul>
<li>E(Edge):边的有穷集合</li>
</ul>
</li>
<li><p>根据是否每条边有方向分为有向图，无向图</p>
</li>
<li><p>任意两个点都有边叫做<strong>完全图</strong>(有向图是两个点之间有两条边)</p>
</li>
<li><p>有向图的边也叫做弧</p>
</li>
<li><p>边的数目很少($\leq nlogn$)叫做稀疏图</p>
</li>
<li><p>边较多的叫做稠密图</p>
</li>
<li><p>网：边带权的图</p>
</li>
<li><p>邻接：有边相连的两个顶点之间联系</p>
</li>
<li><p>$(v_i,v_j)表示无向边，v_i邻接v_j,&lt;v_i,v_j&gt;表示有v_i到v_j的一条有向边，称作v_i邻接到v_j或者v_j邻接于v_i$</p>
</li>
<li><p>关联（依附）:边和顶点的关系</p>
</li>
<li><p>顶点的度：和顶点相关联的边的数目（有向图称出度入度）</p>
</li>
<li><p>路径：连续的边构成的顶点序列</p>
</li>
<li><p>路径长度：路径上的边的权值之和</p>
</li>
<li><p>回路：第一个顶点和最后一个顶点相同的路径</p>
</li>
<li><p>简单路径：除了起点终点可以相同外，其他顶点均不相同</p>
</li>
<li><p>连通图：在图中，任意两个顶点之间存在路径成为连通图（有向图则成为强连通图）</p>
</li>
<li><p>连通分量：无向图的极大连通子图称为其的<strong>连通分量</strong>(有向图叫做<strong>强连通分量</strong>)</p>
</li>
<li><p>生成树：包含无向图所有顶点的极小连通子图</p>
</li>
<li><p>生成森林：对于非连通图，由各个连通分量的生成树的集合</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>图</tag>
        <tag>哈夫曼树</tag>
        <tag>排序算法</tag>
        <tag>栈</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>对于质数知识的复习</title>
    <url>/2021/09/05/%E8%B4%A8%E6%95%B0%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Problem-List"><a href="#Problem-List" class="headerlink" title="Problem List"></a><font color=darkmagenta><em>Problem List</em></font></h2><p><a href="https://www.luogu.org/problem/P4161">洛谷4161</a></p>
<p><a href="https://www.luogu.org/problem/P2926">洛谷2926</a></p>
<p><a href="https://www.luogu.org/problem/P4391">洛谷4397</a></p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>欧拉筛</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P2421题解</title>
    <url>/2021/09/05/%E6%B4%9B%E8%B0%B7P2421/</url>
    <content><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P2421">洛谷P2421</a><br>这一道题目是一道同余的题目，进行推理后用扩展欧几里得就可以了，解析我写在了代码里面</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int64 long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">Int64 c[maxn],p[maxn],l[maxn];</span><br><span class="line"><span class="comment">//出生地，速度，生命长度 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Extend_gcd</span><span class="params">(Int64 a,Int64 b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">	<span class="comment">//ax+by=gcd(a,b);</span></span><br><span class="line">	<span class="keyword">if</span>(!b)&#123;</span><br><span class="line">		x=<span class="number">1</span>;y=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> d=<span class="built_in">Extend_gcd</span>(b,a%b,x,y);</span><br><span class="line">	<span class="keyword">int</span> tmp=x;</span><br><span class="line">	x=y;y=tmp-a/b*y;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">int</span> x,y,t;</span><br><span class="line">			t=<span class="built_in">Extend_gcd</span>((p[i]-p[j]),pos,x,y);</span><br><span class="line">			<span class="comment">//t=gcd((p[i]-p[j]),pos)</span></span><br><span class="line">			<span class="keyword">if</span>((c[j]-c[i])%t)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="comment">/*</span></span><br><span class="line"><span class="comment">			*因为解的方程是(p[i]-p[j])x+pos*y =c[j]-c[i];</span></span><br><span class="line"><span class="comment">			*如果说不整除，那么就没有解 </span></span><br><span class="line"><span class="comment">			*/</span></span><br><span class="line">			Int64 tmp=pos/t;</span><br><span class="line">			<span class="comment">//用pos除以t，得到每一次 x改变多少 </span></span><br><span class="line">			tmp=<span class="built_in">abs</span>(tmp);</span><br><span class="line">			<span class="comment">//保证tmp是正数 </span></span><br><span class="line">			x=x%tmp*((c[j]-c[i])/t)%tmp;</span><br><span class="line">			((x%=tmp)+=tmp)%=tmp;</span><br><span class="line">			<span class="comment">//对解进行修正 </span></span><br><span class="line">			<span class="keyword">if</span>(!x)x+=tmp;</span><br><span class="line">			<span class="keyword">if</span>(x&lt;=<span class="built_in">min</span>(l[j],l[i]))<span class="keyword">return</span> <span class="literal">false</span> ;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	Int64 pos=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;c[i]&gt;&gt;p[i]&gt;&gt;l[i];</span><br><span class="line">		pos=<span class="built_in">max</span>(pos,c[i]);<span class="comment">//寻找最大的序号 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">check</span>(pos))&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,pos);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		pos++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>搬运自旧博客</tag>
        <tag>同余</tag>
        <tag>扩展欧几里得</tag>
      </tags>
  </entry>
  <entry>
    <title>数论题目两道</title>
    <url>/2021/09/05/%E6%95%B0%E8%AE%BA%E7%9A%84%E4%B8%A4%E9%81%93%E9%A2%98/</url>
    <content><![CDATA[<h2 id="错位排列"><a href="#错位排列" class="headerlink" title="错位排列"></a><font color=darkmagenta ><strong>错位排列</strong></font></h2><p>这是一道水题，名字就直接告诉了题的内容和做题的方法，那么直接使用公式就可以了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错排问题</span></span><br><span class="line"><span class="comment">//就是不可以放在自己原来的位置上 </span></span><br><span class="line"><span class="comment">//那么直接根据公式来就可以了</span></span><br><span class="line"><span class="comment">//D=n!*(1-1/1!+1/2!+...) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> fact[<span class="number">15</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)fact[i]=fact[i<span class="number">-1</span>]*i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> res;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	res=fact[n];</span><br><span class="line">	<span class="keyword">double</span> tmp=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		tmp+=(<span class="built_in">pow</span>(<span class="number">-1</span>,i)/(fact[i]+<span class="number">0.0</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.0lf\n&quot;</span>,res*tmp);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a><font color=darkmagenta ><strong>计数器</strong></font></h2><p>大概就是统计<code>1~n</code>中每一个数字出现了多少次。有<code>10^9</code>的数量级，所以不可以枚举的。因此要采取把每一位的数字分开来进行计算，即分解每一位，然后这一位前面的数字乘以这一位的权值(它在十的第几位，权值就是十的第几次方)，如果说这一位数字大于我们统计的数字，那么还可以再加上一次权值，而如果等于，则应该加上它后面的位数组成的数字<code>+1</code>，<code>+1</code>是因为后面的组成的还有全<code>0</code>。比如<code>2533</code>，再统计<code>5</code>时，统计到第三位，因为这这一位等于<code>5</code>，后面的位数组成的数字是<code>33</code>，但是漏了<code>2500</code>，所以要<code>+1</code>(注意0要进行特殊的判定，因为0在最前面是不符合计数的规则的)。<br>那么代码如下<br><a href="https://www.luogu.org/problemnew/show/P1239">洛谷的链接</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计数器 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> tot)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>,k=<span class="number">1</span>,upp,low,now;</span><br><span class="line">	<span class="keyword">int</span> tmp=tot;</span><br><span class="line">	<span class="keyword">while</span>(k&lt;=tot)&#123;</span><br><span class="line">		upp=tot/(k*<span class="number">10</span>);</span><br><span class="line">		low=tot%k;</span><br><span class="line">		now=tmp%<span class="number">10</span>;</span><br><span class="line">		cnt+=(upp*k);</span><br><span class="line">		<span class="keyword">if</span>(now&gt;num)cnt+=k;</span><br><span class="line">		<span class="keyword">if</span>(now==num)cnt+=(low+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span>(num==<span class="number">0</span>)cnt-=k;</span><br><span class="line">		k*=<span class="number">10</span>;	</span><br><span class="line">		tmp/=<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(tmp&lt;<span class="number">10</span>&amp;&amp;num==<span class="number">0</span>)<span class="keyword">break</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">	data[num]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="built_in">memset</span>(data,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(data));</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">		<span class="built_in">calc</span>(i,n);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,data[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>搬运自旧博客</tag>
        <tag>排列组合</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵</title>
    <url>/2021/09/05/%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id="用矩阵来祭我的第一篇博客"><a href="#用矩阵来祭我的第一篇博客" class="headerlink" title="用矩阵来祭我的第一篇博客"></a>用矩阵来祭我的第一篇博客</h1><p>感谢朱枫苓，WYX大佬为本人博客的建设做出的巨大贡献<br>再次特别发出大佬博客的地址，表示我对与朱枫苓大佬的敬佩<br><a href="http://buringstraw.win/">大佬自己的博客</a><br><a href="https://cnblogs.com/buringstraw/">大佬在博客园的博客</a></p>
<p>好了，来看看矩阵</p>
<ol>
<li>加法。只有同型的矩阵才可以相加，对应的位置上面相加就可以了。</li>
<li>数乘。把一个矩阵拿来和一个常数相乘，每一位都乘上来就行了，没有什么多的了。</li>
<li>倒置。直接行列倒过来就行了。还有一个定理：A*B的倒置等于A的倒置乘以B的倒置</li>
</ol>
<p>然后就到了重点了</p>
<h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a><font color=darkMagenta><strong>乘法</strong></font></h2><p>矩阵乘法$A*B$ 可以做乘法的条件是A的列数要等于B的行数 然后呢乘法就是A的第几行和B的第几列对应相乘累加就是答案第几几的位置的值了。这个矩阵啊，作用非常的大，配合快速幂，可以加速状态转移，实现很多的骚操作。 下面让我们看看矩阵是如何骚操作斐波那契数列的</p>
<p><strong>题目背景</strong></p>
<p>大家都知道，斐波那契数列是满足如下性质的一个数列：</p>
<ul>
<li><p>$f(1) = 1$</p>
</li>
<li><p> $f(2) = 1$</p>
</li>
<li><p>$f(n) = f(n-1) + f(n-2) (n ≥ 2 且 n 为整数)$</p>
</li>
</ul>
<p><strong>题目描述</strong></p>
<p>请你求出$ f(n) mod 1000000007$ 的值。</p>
<p>设一个有两个元素的$1*2$的矩阵 $A[n]=[f(n),f(n-1)]$然后这样的话$A[n-1]=[f(n-1),f(n-2)]$那么的设话 $A[n-1]*B=A[n]$  ,易得  B为<br>$$<br>\begin{bmatrix}<br>1&amp;1\<br>1&amp;0<br>\end{bmatrix}<br>$$</p>
<p> 则 $f(n)$ 为  $A[1][1]*(B 的 n 次方时的第二个元素）$</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Matrix F[n]=&#123;f[n],f[n-1]&#125;</span></span><br><span class="line"><span class="comment">//A=&#123;1,1</span></span><br><span class="line"><span class="comment">//   1,0&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll A[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> ll Mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll *a,ll b[<span class="number">2</span>][<span class="number">2</span>])</span></span>&#123;</span><br><span class="line">    ll tmp[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(tmp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)&#123;</span><br><span class="line">            (tmp[j]+=(a[k]*b[k][j]))%=Mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(a,tmp,<span class="built_in"><span class="keyword">sizeof</span></span>(tmp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mulsel</span><span class="params">(ll (*f)[<span class="number">2</span>])</span></span>&#123;</span><br><span class="line">    ll tmp[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">memset</span>(tmp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(tmp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)&#123;</span><br><span class="line">                (tmp[i][j]+=(f[i][k]*f[k][j]))%=Mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(f,tmp,<span class="built_in"><span class="keyword">sizeof</span></span>(tmp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">pw</span><span class="params">(ll b)</span></span>&#123;</span><br><span class="line">    ll ans[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)<span class="built_in">mul</span>(ans,A);</span><br><span class="line">        <span class="built_in">mulsel</span>(A);</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans[<span class="number">1</span>];</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    A[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;A[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    A[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;A[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>; </span><br><span class="line">    ll k;</span><br><span class="line">    cin&gt;&gt;k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">pw</span>(k));<span class="comment">//快速幂 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>搬运自旧博客</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>dp review (1)</title>
    <url>/2021/09/05/%E9%80%92%E6%8E%A8%E5%A4%8D%E4%B9%A0%20(1)/</url>
    <content><![CDATA[<p><s>实际上我只是贴我做的题而已</s><br><s>不仅如此，我还是一两道题就给一篇博客</s></p>
<h2 id="骨牌问题-yzoj1366"><a href="#骨牌问题-yzoj1366" class="headerlink" title="骨牌问题(yzoj1366)"></a>骨牌问题(yzoj1366)</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a><font color=#3091f2><strong>Description</strong></font></h3><blockquote>
<p>　有 2 行 N 列的长方形，可以用 N 个<code> 1*2</code> 的骨牌铺满，但可能有很多种不同的铺法。现在给出自然数n，请回答当长方形为 2 行 n 列时，有多少种不同的铺设方法。</p>
</blockquote>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a><font color=#3091f2><strong>Input</strong></font></h3><blockquote>
<p>第一行一个整数t表示测试数据组数。下面的t行，每行一个整数n。</p>
</blockquote>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a><font color=#3091f2><strong>Output</strong></font></h3><blockquote>
<p>每组数据输出一行一个整数，表示方案总数，这个数可能很大，所以只需输出模10007后的结果。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Sample Input</th>
<th>Sample Output</th>
</tr>
</thead>
<tbody><tr>
<td>3 2 5 7</td>
<td>2 8 21</td>
</tr>
</tbody></table>
<p>难得换行了，但是实际上答案是要求换行的<br>这一个比较的简单，可以看出来就是斐波那契数列<br>所以直接打表法</p>
<blockquote>
<p><font color=green><strong>Code</strong></font></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100003</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod 10007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	f[<span class="number">1</span>]=<span class="number">1</span>;f[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;maxn;i++)f[i]=(f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>])%Mod;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">while</span>(n--)&#123;</span><br><span class="line">		<span class="keyword">int</span> t;</span><br><span class="line">		cin&gt;&gt;t;</span><br><span class="line">		cout&lt;&lt;f[t]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="爬楼梯-yzoj1367"><a href="#爬楼梯-yzoj1367" class="headerlink" title="爬楼梯(yzoj1367)"></a>爬楼梯(yzoj1367)</h3><blockquote>
<p><font color=#3091f2><strong>Description</strong></font></p>
</blockquote>
<p>何老师爬楼梯，他可以每步上 1 、2或3 级，输入楼梯的级数，求不同的走法数。例如：楼梯一共有3级，他可以每步都走一级，或者第一步走一级，第二步走两级，也可以第一步走两级，第二步走一级，还有就是第一步就上3级，所以一共4种方法。</p>
<blockquote>
<p><font color=#3091f2><strong>Input</strong></font></p>
</blockquote>
<p>第一行：N、K。　　第二行：K个整数h[i]，表示坏了的楼梯的级数(1&lt;=h[i]&lt;=N)。</p>
<blockquote>
<p><font color=#3091f2><strong>Output</strong></font></p>
</blockquote>
<p>不同的走法数，这个数字可能很巨大，所以输出最后答案mod 1234567</p>
<p>我懒得给样例了，说实话我不喜欢抄题</p>
<blockquote>
<p><font color=darkMagenta><strong>Analysis</strong></font></p>
</blockquote>
<p>这个的话把坏掉的楼梯直接变成方案数0就可以了，注意边界要特殊处理。方程的话经过推理事<br>$$<br>f[n]=f[n-1]+f[n-2]+f[n-3]<br>$$</p>
<blockquote>
<p><font color=green>Code</font></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod 1234567</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxi 1007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> f[maxi];</span><br><span class="line"><span class="keyword">bool</span> is_broken[maxi];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(is_broken,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(is_broken));</span><br><span class="line">	<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">	<span class="keyword">int</span> n,k;</span><br><span class="line">	f[<span class="number">1</span>]=<span class="number">1</span>;f[<span class="number">2</span>]=<span class="number">2</span>;f[<span class="number">3</span>]=<span class="number">4</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">		is_broken[x]=<span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(is_broken[<span class="number">1</span>])&#123;</span><br><span class="line">		f[<span class="number">1</span>]=<span class="number">0</span>;f[<span class="number">2</span>]-=<span class="number">1</span>;f[<span class="number">3</span>]-=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(is_broken[<span class="number">2</span>])&#123;</span><br><span class="line">		f[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(is_broken[<span class="number">1</span>])&#123;</span><br><span class="line">			f[<span class="number">3</span>]-=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> f[<span class="number">3</span>]-=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(is_broken[<span class="number">3</span>])&#123;</span><br><span class="line">		f[<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(is_broken[i])f[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> f[i]=(f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>]+f[i<span class="number">-3</span>])%Mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,f[n]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>递推</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度压位</title>
    <url>/2021/09/05/%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8E%8B%E4%BD%8D/</url>
    <content><![CDATA[<h2 id="压位的原因"><a href="#压位的原因" class="headerlink" title="压位的原因"></a><font color=darkmagenta><strong>压位的原因</strong></font></h2><p>正常的高精度计算中，每一位只存了一位数字，可是当面对比较大的计算的时候呢，如果说每一位都只存一位数字，那么计算的时间就会比较地长。这个时候可以通过每一位高精度中<font color=red>存储多位数字</font>的方法来降低运算的时间</p>
<h2 id="例题引入"><a href="#例题引入" class="headerlink" title="例题引入"></a><font color=darkmagenta><strong>例题引入</strong></font></h2><p>简单的来说就是 一个高精度的开根号，只要求开到整数向下取整就可以了。数据范围是$10^{1000}$;<br>首先就是开高精度根号的方法，很容易想到的方法就是二分或者是<a href="https://baike.baidu.com/item/%E5%BC%80%E5%B9%B3%E6%96%B9%E8%BF%90%E7%AE%97/1165387?fr=aladdin">手动开根号</a>。我这里使用的是二分的方法。<br>这一道题最开始我是直接高精度来的,然后TLE了，接着我压了四位，还是TLE了，然后直接$10000000$一位了，终于A了。<br>那么接下来我来一点点解析代码(实际上我只解析读入而已了)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123; <span class="comment">// 读入  </span></span><br><span class="line">		<span class="keyword">char</span> S[maxn];</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,S);</span><br><span class="line">		<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(val));</span><br><span class="line">		<span class="keyword">int</span> lenS=<span class="built_in">strlen</span>(S); </span><br><span class="line">		<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=lenS<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i-=<span class="number">7</span>)&#123;<span class="comment">//因为是10^8的进制，所以给7位</span></span><br><span class="line">			<span class="keyword">int</span> t=<span class="built_in">max</span>(i<span class="number">-6</span>,<span class="number">0</span>),res=<span class="number">0</span>;<span class="comment">//i-6~i一共七位，</span></span><br><span class="line">			<span class="keyword">while</span>(t&lt;=i)&#123;</span><br><span class="line">				res=res*<span class="number">10</span>+S[t]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				t++;</span><br><span class="line">			&#125;</span><br><span class="line">			val[++j]=res;</span><br><span class="line">		&#125;</span><br><span class="line">		val[<span class="number">0</span>]=j;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>我的解析全写注释了，实际上总共我也只有两句解析，因为我在这两个地方没怎么注意，所以最开始我……<br>至于这一个高精度的其他部分，那么就直接把10改成对应的大小就可以了，我这里是$10^8$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Int64 long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> carries 10000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1003</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">largenum</span>&#123;</span>  </span><br><span class="line">	Int64 val[maxn];</span><br><span class="line">	Int64 <span class="keyword">operator</span> [](<span class="keyword">const</span> <span class="keyword">int</span> &amp;ref)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val[ref];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123; <span class="comment">// 读入  </span></span><br><span class="line">		<span class="keyword">char</span> S[maxn];</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,S);</span><br><span class="line">		<span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(val));</span><br><span class="line">		<span class="keyword">int</span> lenS=<span class="built_in">strlen</span>(S); </span><br><span class="line">		<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=lenS<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i-=<span class="number">7</span>)&#123;</span><br><span class="line">			<span class="keyword">int</span> t=<span class="built_in">max</span>(i<span class="number">-6</span>,<span class="number">0</span>),res=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(t&lt;=i)&#123;</span><br><span class="line">				res=res*<span class="number">10</span>+S[t]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				t++;</span><br><span class="line">			&#125;</span><br><span class="line">			val[++j]=res;</span><br><span class="line">		&#125;</span><br><span class="line">		val[<span class="number">0</span>]=j;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*inline void StrIn(char *S)&#123;</span></span><br><span class="line"><span class="comment">		memset(val,0,sizeof(val));</span></span><br><span class="line"><span class="comment">		int lenS=strlen(S);</span></span><br><span class="line"><span class="comment">		val[0]=lenS;</span></span><br><span class="line"><span class="comment">		for(int i=lenS-1,j=1;i&gt;=0;i--,j++) val[j]=S[i]-&#x27;0&#x27;;</span></span><br><span class="line"><span class="comment">	&#125;*/</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123; <span class="comment">// 输出  </span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%ld&quot;</span>,val[val[<span class="number">0</span>]]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=val[<span class="number">0</span>]<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">		 <span class="built_in">printf</span>(<span class="string">&quot;%07ld&quot;</span>,val[i]); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> largenum &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 判断是否等于  </span></span><br><span class="line">		<span class="keyword">if</span>(val[<span class="number">0</span>]!=obj[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=val[<span class="number">0</span>];i++) <span class="keyword">if</span>(val[i]!=obj[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> largenum &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 判断是否小于   </span></span><br><span class="line">		<span class="keyword">if</span>(val[<span class="number">0</span>]&gt;obj[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>((*<span class="keyword">this</span>)==obj) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(val[<span class="number">0</span>]&lt;obj[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=val[<span class="number">0</span>];i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(val[i]&gt;obj[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">if</span>(val[i]&lt;obj[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &gt;(<span class="keyword">const</span> largenum &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 判断是否大于   </span></span><br><span class="line">		largenum cmp=*<span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">if</span>(cmp &lt; obj || cmp == obj) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	largenum <span class="keyword">operator</span> +(<span class="keyword">const</span> largenum &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 加法运算  </span></span><br><span class="line">		largenum cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		Int64 pos=<span class="built_in">max</span>(val[<span class="number">0</span>],obj.val[<span class="number">0</span>]),add=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pos;i++)&#123;</span><br><span class="line">			cmp.val[i]=val[i]+obj[i]+add;</span><br><span class="line">			add=cmp.val[i]/carries;</span><br><span class="line">			cmp.val[i]=cmp.val[i]%carries;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(add&gt;<span class="number">0</span>) cmp.val[++pos]=add;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	largenum <span class="keyword">operator</span> -(<span class="keyword">const</span> largenum &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 减法运算 只能减出正数  </span></span><br><span class="line">		largenum cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		Int64 pos=val[<span class="number">0</span>],rent=<span class="number">0</span>; <span class="comment">// rent 借位  </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pos;i++)&#123;</span><br><span class="line">			cmp.val[i]=val[i]-obj[i]-rent;</span><br><span class="line">			<span class="keyword">if</span>(cmp.val[i]&lt;<span class="number">0</span>) &#123;cmp.val[i]+=carries;rent=<span class="number">1</span>;&#125;</span><br><span class="line">			<span class="keyword">else</span> rent=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp.val[pos]==<span class="number">0</span> &amp;&amp; pos&gt;<span class="number">1</span>) pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	largenum <span class="keyword">operator</span> *(<span class="keyword">const</span> <span class="keyword">int</span> &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 ×低精度 </span></span><br><span class="line">		</span><br><span class="line">		largenum cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		Int64 pos=val[<span class="number">0</span>]; <span class="comment">// 进位 </span></span><br><span class="line">		<span class="keyword">long</span> <span class="keyword">long</span> add=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pos;i++)&#123;</span><br><span class="line">			cmp.val[i]=val[i]*obj+add;</span><br><span class="line">			add=cmp.val[i]/carries;</span><br><span class="line">			cmp.val[i]=cmp.val[i]%carries;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(add&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			cmp.val[++pos]=add%carries;</span><br><span class="line">			add/=carries;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp.val[pos]==<span class="number">0</span> &amp;&amp; pos&gt;<span class="number">1</span>) pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	largenum <span class="keyword">operator</span> *(<span class="keyword">const</span> largenum &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 ×高精度 </span></span><br><span class="line">		<span class="comment">// 对于高精度数 a 和高精度 b   </span></span><br><span class="line">		<span class="comment">// 这个算法不能写成 a=a*b </span></span><br><span class="line">		largenum cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		Int64 pos=val[<span class="number">0</span>]+obj[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=val[<span class="number">0</span>];i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=obj[<span class="number">0</span>];j++)&#123;</span><br><span class="line">				cmp.val[i+j<span class="number">-1</span>]+=val[i]*obj[j];</span><br><span class="line">				cmp.val[i+j]+=cmp.val[i+j<span class="number">-1</span>]/carries;</span><br><span class="line">				cmp.val[i+j<span class="number">-1</span>]=cmp.val[i+j<span class="number">-1</span>]%carries;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp.val[pos]==<span class="number">0</span> &amp;&amp; pos&gt;<span class="number">1</span>) pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	largenum <span class="keyword">operator</span> /(<span class="keyword">const</span> <span class="keyword">int</span> &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 ÷低精度  </span></span><br><span class="line">		largenum cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		Int64 pos=val[<span class="number">0</span>],div=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">			cmp.val[i]=(div*carries+val[i])/obj;</span><br><span class="line">			div=(div*carries+val[i])%obj;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp[pos]==<span class="number">0</span> &amp;&amp; pos&gt;<span class="number">1</span>) pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> <span class="keyword">operator</span> %(<span class="keyword">const</span> <span class="keyword">int</span> &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 % 低精度  </span></span><br><span class="line">		<span class="keyword">int</span> pos=val[<span class="number">0</span>],div=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;=<span class="number">1</span>;i--) div=(div*carries+val[i])%obj;</span><br><span class="line">		<span class="keyword">return</span> div;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	largenum <span class="keyword">operator</span> /(<span class="keyword">const</span> largenum &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 ÷高精度  </span></span><br><span class="line">		largenum cmp,t_cmp;</span><br><span class="line">		<span class="built_in">memset</span>(cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cmp.val));</span><br><span class="line">		<span class="built_in">memset</span>(t_cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(t_cmp.val));</span><br><span class="line">		Int64 pos=val[<span class="number">0</span>];</span><br><span class="line">		cmp.val[<span class="number">0</span>]=<span class="number">1</span>;cmp.val[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		t_cmp=cmp;</span><br><span class="line">		<span class="keyword">if</span>((*<span class="keyword">this</span>)&lt;obj) <span class="keyword">return</span> cmp; <span class="comment">// 小于除数直接返回 0  </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">			t_cmp=t_cmp*carries;</span><br><span class="line">			t_cmp.val[<span class="number">1</span>]=val[i];</span><br><span class="line">			<span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(t_cmp&gt;obj || t_cmp==obj)</span><br><span class="line">			&#123;</span><br><span class="line">				t_cmp=t_cmp-obj;</span><br><span class="line">				k++;</span><br><span class="line">			&#125;</span><br><span class="line">			cmp.val[i]=k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(cmp.val[pos]==<span class="number">0</span> &amp;&amp; pos&gt;<span class="number">1</span>) pos--;</span><br><span class="line">		cmp.val[<span class="number">0</span>]=pos;</span><br><span class="line">		<span class="keyword">return</span> cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	largenum <span class="keyword">operator</span> %(<span class="keyword">const</span> largenum &amp;obj)<span class="keyword">const</span>&#123; <span class="comment">// 高精度 % 高精度  </span></span><br><span class="line">		largenum t_cmp;</span><br><span class="line">		<span class="built_in">memset</span>(t_cmp.val,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(t_cmp.val));</span><br><span class="line">		Int64 pos=val[<span class="number">0</span>];</span><br><span class="line">		t_cmp.val[<span class="number">0</span>]=<span class="number">1</span>;t_cmp.val[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>((*<span class="keyword">this</span>)&lt;obj) <span class="keyword">return</span> (*<span class="keyword">this</span>); <span class="comment">// 小于除数直接返回本身 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">			t_cmp=t_cmp*carries;</span><br><span class="line">			t_cmp.val[<span class="number">1</span>]=val[i];</span><br><span class="line">			<span class="keyword">while</span>(t_cmp&gt;obj || t_cmp==obj) t_cmp=t_cmp-obj;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> t_cmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">lgnsqrt</span><span class="params">()</span></span>&#123;</span><br><span class="line">		largenum one=&#123;&#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">		largenum l=&#123;&#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">		largenum r=*<span class="keyword">this</span>;</span><br><span class="line">		largenum cmp=*<span class="keyword">this</span>;</span><br><span class="line">		largenum mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">		largenum tmp=mid*mid;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">			<span class="keyword">if</span>(tmp&lt;cmp||tmp==cmp)&#123;</span><br><span class="line">				l=mid+one;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> r=mid;</span><br><span class="line"> 			mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">			tmp=mid*mid;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(mid*mid&gt;cmp&amp;&amp;((mid-one)*(mid-one)&lt;cmp||(mid-one)*(mid-one)==cmp))</span><br><span class="line">			mid=mid-one;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=mid.val[<span class="number">0</span>];i++)&#123;</span><br><span class="line">			val[i]=mid.val[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br></pre></td></tr></table></figure>
<p>在这一段高精度的最后是自己写的二分开方这里就按正常的开方来就可以了，因为是向下取整，所以呢我就在在后面加了一个if语句。<br>那么，That’s all.</p>
]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>高精度</tag>
        <tag>搬运自旧博客</tag>
      </tags>
  </entry>
  <entry>
    <title>悲惨人生</title>
    <url>/2023/09/11/%E6%82%B2%E6%83%A8%E4%BA%BA%E7%94%9F/</url>
    <content><![CDATA[<h1 id="为什么人生总是痛苦多欢乐少呢"><a href="#为什么人生总是痛苦多欢乐少呢" class="headerlink" title="为什么人生总是痛苦多欢乐少呢"></a><font color=7c1823>为什么人生总是痛苦多欢乐少呢</font></h1><p>如果能让我苦痛而悲惨的人生重来，那我一定不会选择暑期实训</p>
<h1 id="第一周：噩梦的铺垫"><a href="#第一周：噩梦的铺垫" class="headerlink" title="第一周：噩梦的铺垫"></a><font color=1453ad>第一周：噩梦的铺垫</font></h1><p>​    鼠鼠暑期实训的第一周就不同寻常，一个悲剧的故事往往会有一个悲伤的开始。我在暑期实训开始的第一天上午就因为国际交流而请假了。在我们暑期实训的这一个小组里面。有两位同学和我在上同一个国际交流。我们组内的还有一位同学在上另外一个国际交流，这意味着我们这个小组五个人有四个人经常不在。</p>
<p>​    为了方便叙事，我简单列一下我们组员：</p>
<ul>
<li>A: 以前带我拿竞赛分的超级巨佬，比我大一届的半个老乡，唯一没有国际交流的人</li>
<li>B: 以前有过大作业合作经历的同一届学生，和我上同一个国际交流</li>
<li>C: 组长，在上另一个国际交流，自称相关课程完全没有接触过</li>
<li>D: 一个比我大一届的学长，在上同一届国际交流</li>
</ul>
<p>​    星期一国际交流结束后的上午我没有去，下午我才是第一次见到所有组员，和C,D都是在这个时候第一次见面。</p>
<p>​    在这个时候我知道了C是相关的课程一点都没学过（这不能怪ta,我们这种实验性质的学院排课有问题）。后来经过短暂的讨论，我们决定让C来负责后端。后端老师最开始讲的，而且做过的觉得后端相对而言要简单一些所以说就让C来做后端了<del>(应该问题不大吧，只是取数据传过来)。</del></p>
<p>​    第一周的工作时写需求分析，概要设计文档，鼠鼠的任务主要是画一些前端的设计图，还算轻松，划划水。</p>
<p>​    和D商量让他去做主页的设计，我来弄对比页的设计。</p>
<p>​    好些文档我都在复制粘贴划水，心想虽然四个人有国际交流，但是大家好像都能做点东西（至少写文档的时候感觉都还行），还算可以。除了天天都要过来签到坐牢意外还算行吧</p>
<p>​    </p>
<h1 id="第二周：苦痛的开场"><a href="#第二周：苦痛的开场" class="headerlink" title="第二周：苦痛的开场"></a><font color=1453ad>第二周：苦痛的开场</font></h1><p>​    第二周的前面两天主要是完成详细设计的文档，这个时候开始，D就开始失踪了，连续几天见不到人。然后详细设计文档的时候发现他的主页的设计图，搜索的设计图有些问题，和后端大数据的同学商量之后，我保留了他一张展示的图，然后其他的全部淘汰掉重新设计了。到了星期二的时候，老师因为连续见不到他人已经开始问我们他人呢<del>（值得一提的是，这位老师可能认识完了我们小组所有的人了，D日常不在被记住了，C作为组长除了星期一意外的下午都不在，然后我和AB两个人基本都在）</del>。根据他的解释，是去医院了。</p>
<p>​    然后在星期三星期四左右的时候 ，差不多就开始编写代码了。D这个时候倒是出现了，和我讨论分工。此时我对其印象还行，至少其在写文档的时候还算积极，去医院了也能理解。讨论结果是他去照着我画的设计图弄主页先，然后我来弄搜索页。老师的要求是周五前端和后端要完成一个接口的联调，所以说周五的时候我的部分弄好一个接口然后和后端对接就好了，他的之后弄好了再来。</p>
<p>​    周五的时候我们联调完了去找老师验收，老师的评价是我zhengdiankaishipin4们组进度太慢了，周末得加班~~（后端是C来弄的，老师看到了连连摇头，AB后来去帮他了，我们此次验收的接口是C弄得后端）~~~。</p>
<p>​    不过周末没有加班，我去看奥本海默了，确实是一部好电影，诺兰真的nb</p>
<h1 id="第三周：天之将明，其黑尤烈"><a href="#第三周：天之将明，其黑尤烈" class="headerlink" title="第三周：天之将明，其黑尤烈"></a><font color=1453ad>第三周：天之将明，其黑尤烈</font></h1><p>​    大的要来了。</p>
<p>​    星期一的时候再弄图表的传参，弄了一整天没弄好，搞得我有点心态小小失衡。这个时候D不在，东西也没有交上了让我更加烦躁了。然后到了星期二的时候还是这样。过来和我进行了讨论，我告诉其先不要先别的，把写了的东西先交上来，至少应该让和你合作的人了解到现在你是什么进度。他同意了，但是我还是没有看到他的代码</p>
<p>​    到了下午的时候我又催了一次，告诉我说今天晚上应该可以弄好。嗯，晚上应该可以弄好传上来。</p>
<p>​    什么都没有我直接忍无可忍了，我在周三上午弄完了图表和界面之后，去看他工作，发现正点开视频看如何跳转页面，给我说正在学怎么弄，我告诉其先把做了的交上来，让我看看进度。于是他终于才用git把东西给传上去了，告诉我说这个主页分成了三个组件来弄。</p>
<p>​    呃呃，然后打开一看发现里面就是一坨。。。物理意义上的，全他妈挤在中间了，页头，侧边栏和主体部分都在同一行。。。至于按钮的相应函数这些一个都没有。还问我接下来做什么，于是我让其去负责一个可有可无的非重要的页面的工作</p>
<p>​    于是上午剩下来的时间我就把对应函数都写了，可以进行搜索和登录注册了~~（没完全弄好，我传用户id还没弄，然后登录之后登录按钮还在）~~~。晚上国际交流的时候，B帮忙把主页稍微调了一下，至少可以看了</p>
<p>​    星期四，还是见不到人，我开始着手全国概览页面，B帮忙处理了一些主页的问题，主要是主页，登陆注册页的美化调整格式，还有就是登陆回来之后把登录和注册按钮给去掉。等到了下午还没有见到人的时候，我心情真的挺差的，也不想写了，弄了一部分过后去找老师验收了。然后被狠狠指出问题了，这么多个组没一个目前就这进度的，不过也说了到时候验收的时候就按三个人的工作量来算~~（C负责的后端一个接口完善了一周，基本上是弄完了大数据的AB两个人弄的）~~~。此时心情更加雪上加霜。不过随后把页面间传参补上了，然后B把美化弄得差不多了以后我心情好了许多了。</p>
<p>​    接着我开开心心下班拿出手机一看：</p>
<blockquote>
<p>D:  哥们，晚上有时间没，能否抽个空，我想问你些代码方面的东西，在XX，有点不太会</p>
</blockquote>
<p>​    。。。</p>
<p>​    老子心情瞬间跌入谷底。欸不是，现在都快弄完了才来问是吧，而且还是下班的时间，喊我来给你辅导。我只能说预见结局了，我不去指导，那么不会做，光明正大不交东西上来，我去指导，做不出来，还是交不上来东西，所以我告诉他有什么问题直接在网上问吧，他就说回寝室问我。我他妈破大防，去便利店买酒，而据同行的B说，我在便利店的时候和D还是前后出来的，不过我没有注意到，蚌。一个晚上也没有看见他问任何东西，鉴定为摆了。</p>
<p>​    星期五我已经不想管他了，我把矩阵树图画好后贴在了概览页，然后其他杂七杂八的东西弄差不多了过后一起去找老师验收，还是得到了认可。给出的意见就是让我们把页面加一个侧边栏或者页首栏让这些页面看起来像是在同一个项目里面的。</p>
<p>​    </p>
<h1 id="第四周：让我们看看接下来会发生什么"><a href="#第四周：让我们看看接下来会发生什么" class="headerlink" title="第四周：让我们看看接下来会发生什么"></a><font color=1453ad>第四周：让我们看看接下来会发生什么</font></h1><p>​    肝帝B周末把侧边栏加上了，周一就是一点收尾的工作。也是我开始写这篇纪实的日子，现在是周二上午，我确实是没有什么事情要做了，让我们看看接下来会发生些什么。</p>
<p>​    续：</p>
<p>​    现在一切都结束了。说句实话，看了答辩以后，感觉其他组的人确实还是有东西的。给我印象最深刻的组就是那个做视频识别，自动剪辑并投放的那个小组。这个小组是自己带的项目，而且还拉到了投资，看他们的完成度完全不像是这么短的时间内做出来的，而且后续还会继续进行商业化。嗯，确实nb。</p>
<p>​    无论如何，折磨已经结束了。</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>杂谈</tag>
      </tags>
  </entry>
</search>
